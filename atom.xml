<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yaronzz</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.yaronzz.com/"/>
  <updated>2022-06-09T03:05:15.413Z</updated>
  <id>https://www.yaronzz.com/</id>
  
  <author>
    <name>YaornzZ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式-工厂模式</title>
    <link href="https://www.yaronzz.com/post/design_patterns_factory/"/>
    <id>https://www.yaronzz.com/post/design_patterns_factory/</id>
    <published>2022-06-09T02:55:33.000Z</published>
    <updated>2022-06-09T03:05:15.413Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>为了提高内聚和降低耦合，我们经常会定义一些抽象基类或接口，然后声明一个基类指针指向实际子类，来达到多态的目的。外部使用时，需要知道子类的具体名称才能创建相应的对象。</p><p>但这样的话，当子类的种类变多时，就会变得凌乱，于是就需要一个工厂类来进行管理，使用枚举等方式来选择要创建的子类。</p><a id="more"></a><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>工厂模式包含：简单工厂模式、工厂方法模式、抽象工厂模式。</p><p><strong>简单工厂</strong>：定义对象创建接口，将其封到工厂类中，外部不需要知道具体的子类对象。</p><p><img src="https://s2.loli.net/2022/06/09/JOsjeCQ6oZg2N3U.png" alt="image-20220609103204358"></p><p><strong>工厂方法</strong>：简单工厂升级，抽象工厂类的创建对象接口，让工厂子类决定如何创建对象。</p><p><img src="https://s2.loli.net/2022/06/09/JTLuMa4IxYVZnCS.png" alt="image-20220609103334048"></p><p><strong>抽象工厂</strong>：  工厂方法升级，工厂类中定义多个创建不同对象的接口，减少工厂类。</p><p><img src="https://s2.loli.net/2022/06/09/oEqHAcOs7nmVaMT.png" alt="image-20220609103348748"></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>定义抽象基类<code>Protocol</code>，延伸子类<code>TcpProtocol</code>和<code>UdpProtocol</code>:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Protocol</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">name</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TcpProtocol</span> :</span> <span class="keyword">public</span> Protocol</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">name</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="string">"Tcp"</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UdpProtocol</span> :</span> <span class="keyword">public</span> Protocol</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">name</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="string">"Udp"</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h3><p>唯一工厂类，一个产品抽象类，工厂类的创建方法依据入参判断并创建具体产品对象。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="function">Protocol* <span class="title">createProtocol</span><span class="params">(ProtocolType type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (type == ProtocolType::Tcp)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> TcpProtocol();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (type == ProtocolType::Udp)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> UdpProtocol();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h3><p>多个工厂类，一个产品抽象类，利用多态创建不同的产品对象，避免了大量的if-else判断。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Protocol* <span class="title">createProtocol</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TcpFactory</span> :</span> <span class="keyword">public</span> Factory</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">Protocol* <span class="title">createProtocol</span><span class="params">(ProtocolType type)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> TcpProtocol();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><p>多个工厂类，多个产品抽象类，产品子类分组，同一个工厂实现类创建同组中的不同产品，减少了工厂子类的数量。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modbus</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="built_in">string</span> <span class="title">device</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetModbus</span> :</span> <span class="keyword">public</span> Modbus</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">device</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="string">"net"</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SerialModbus</span> :</span> <span class="keyword">public</span> Modbus</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">device</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> <span class="string">"serial"</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Protocol* <span class="title">createProtocol</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> Modbus* <span class="title">createModbus</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TcpFactory</span> :</span> <span class="keyword">public</span> Factory</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">Protocol* <span class="title">createProtocol</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> TcpProtocol();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function">Modbus* <span class="title">createModbus</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> NetProtocol();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参考：</strong></p><ul><li><p><a href="https://www.zhihu.com/question/27125796/answer/1615074467" target="_blank" rel="noopener">简单工厂模式、工厂方法模式和抽象工厂模式有何区别？</a></p></li><li><p><a href="http://www.mscenter.edu.cn/blog/k_eckel" target="_blank" rel="noopener">GoF 23 种设计模式</a> </p></li><li><p><a href="https://www.runoob.com/design-pattern/design-pattern-intro.html" target="_blank" rel="noopener">设计模式简介 | 菜鸟教程 </a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了提高内聚和降低耦合，我们经常会定义一些抽象基类或接口，然后声明一个基类指针指向实际子类，来达到多态的目的。外部使用时，需要知道子类的具体名称才能创建相应的对象。&lt;/p&gt;
&lt;p&gt;但这样的话，当子类的种类变多时，就会变得凌乱，于是就需要一个工厂类来进行管理，使用枚举等方式来选择要创建的子类。&lt;/p&gt;
    
    </summary>
    
    
      <category term="design_patterns" scheme="https://www.yaronzz.com/categories/design-patterns/"/>
    
    
      <category term="cpp" scheme="https://www.yaronzz.com/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>设计模式简介</title>
    <link href="https://www.yaronzz.com/post/design_patterns/"/>
    <id>https://www.yaronzz.com/post/design_patterns/</id>
    <published>2022-06-08T01:55:33.000Z</published>
    <updated>2022-06-09T03:05:15.414Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>设计模式常用于面向对象的开发语言，主要是为了重用代码、让代码更容易被他人理解、保证代码可靠性。</p><p>设计模式最早于1994年被<code>GOF(GANG OF FOUR四人班)</code>提出，他们合著了一本名为 <strong>《Design Patterns - Elements of Reusable Object-Oriented Software》</strong>（<strong>设计模式 - 可复用的面向对象软件元素</strong>）的书，书中总共提到了23种设计模式，可以分为三大类：<code>创造型（Creational Patterns）</code>、<code>结构型（Structural Patterns）</code>和<code>行为模式型（Behavioral Patterns）</code>。</p><h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title="创建型模式"></a>创建型模式</h2><p>提供了一种在创建对象的同时隐藏创建逻辑的方式，使某个给定实例需要创建哪些对象时更加灵活。</p><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>单例模式（Singleton Pattern）</td><td>保证一个类仅有一个实例，并提供一个访问它的全局访问点。</td></tr><tr><td>简单工厂（Simple Factory Pattern）</td><td>提供一个工厂类，定义一个用于创建对象的接口</td></tr><tr><td>工厂方法（Factory Method Pattern）</td><td>简单工厂升级，抽象工厂类的创建对象接口，让工厂子类决定如何创建对象。</td></tr><tr><td>抽象工厂（Abstract Factory Pattern）</td><td>工厂方法升级，工厂类中定义多个创建不同对象的接口，减少工厂类。</td></tr><tr><td>建造者模式（Builder Pattern）</td><td>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</td></tr><tr><td>原型模式（Prototype Pattern）</td><td>用原型实例指定创建对象的种类，并且通过拷贝这个原型来创建新的对象。</td></tr></tbody></table><h2 id="结构型模式"><a href="#结构型模式" class="headerlink" title="结构型模式"></a>结构型模式</h2><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>适配器模式（Adapter Pattern）</td><td>将一个类的接口转换成客户希望的另外一个接口。<br />使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</td></tr><tr><td>桥接模式（Bridge Pattern）</td><td>将抽象部分与它的实现部分分离，使它们都可以独立地变化。</td></tr><tr><td>装饰者模式（Decorator Pattern）</td><td>动态地给一个对象添加一些额外的职责。就扩展功能而言，它比生成子类方式更为灵活。</td></tr><tr><td>组合模式（Composite Pattern）</td><td>将对象组合成树形结构以表示“部分-整体”的层次结构。它使得客户对单个对象和复合对象的使用具有一致性。</td></tr><tr><td>外观模式（Facade Pattern）</td><td>为子系统中的一组接口提供一个一致的界面，定义了一个高层接口，这个接口使得这一子系统更加容易使用。</td></tr><tr><td>享元模式（Flyweight Pattern）</td><td>运用共享技术有效地支持大量细粒度的对象。</td></tr><tr><td>代理模式（Proxy Pattern）</td><td>为其他对象提供一个代理以控制对这个对象的访问。</td></tr></tbody></table><h2 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h2><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>模版方法（Template Method Pattern）</td><td>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。Template Method 使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</td></tr><tr><td>命令模式（Command Pattern）</td><td>将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可取消的操作。</td></tr><tr><td>迭代器模式（Iterator Pattern）</td><td>提供一种方法顺序访问一个聚合对象中各个元素，而又不需暴露该对象的内部表示。</td></tr><tr><td>观察者模式（Observer Pattern）</td><td>定义对象间的一种一对多的依赖关系，以便当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并自动刷新。</td></tr><tr><td>中介者模式（Mediator Pattern）</td><td>用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</td></tr><tr><td>备忘录模式（Memento Pattern）</td><td>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到保存的状态。</td></tr><tr><td>解释器模式（Interpreter Pattern）</td><td>给定一个语言，定义它的文法的一种表示，并定义一个解释器，该解释器使用该表示来解释语言中的句子。</td></tr><tr><td>状态模式（State Pattern）</td><td>允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它所属的类。</td></tr><tr><td>策略模式（Strategy Pattern）</td><td>定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。本模式使得算法的变化可独立于使用它的客户端。</td></tr><tr><td>职责链模式 （Chain of Responsibility Pattern）</td><td>为解除请求的发送者和接收者之间耦合，而使多个对象都有机会处理这个请求。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它。</td></tr><tr><td>访问者模式（Visitor Pattern）</td><td>表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。</td></tr></tbody></table><blockquote><p> 简单工厂模式和策略模式的区别</p></blockquote><p>如果在适合用策略模式的情况下用简单工厂模式，如果新增加策略就要修改工厂类，而这个可能会导致其他错误和比较繁琐，而如果使用了策略模式，只要将新增加的策略当做参数传递到Context类中即可.</p><p>工厂模式是创建型<a href="https://so.csdn.net/so/search?q=设计模式&spm=1001.2101.3001.7020" target="_blank" rel="noopener">设计模式</a>，它主要关心如何去创建一个对象。策略模式是行为型设计模式，它不关注如何去创建一个对象，而是去挑选一个最符合当前应用场景的策略</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="design_patterns" scheme="https://www.yaronzz.com/categories/design-patterns/"/>
    
    
      <category term="cpp" scheme="https://www.yaronzz.com/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-单例模式</title>
    <link href="https://www.yaronzz.com/post/design_patterns_singleton/"/>
    <id>https://www.yaronzz.com/post/design_patterns_singleton/</id>
    <published>2022-06-07T01:55:33.000Z</published>
    <updated>2022-06-09T03:05:15.411Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p><strong>目的：</strong>为了保证一个类在程序中只有一个实例，并且能被全局访问</p><p><strong>要点：</strong></p><ol><li>全局性：使用static关键字，变量需要存在于静态存储区</li><li>多线程：使用mutex进行保护</li><li>唯一性：构造函数私有，只生成一个实例，并且由自己创建</li></ol><a id="more"></a><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="单例类"><a href="#单例类" class="headerlink" title="单例类"></a>单例类</h3><p>通过 <code>Test::Instance()</code>获取类指针</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> Test* <span class="title">Instance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m_instance == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lock</span><span class="params">(m_mutex)</span></span>;</span><br><span class="line">            <span class="keyword">if</span> (m_instance == <span class="literal">nullptr</span>)</span><br><span class="line">                m_instance = <span class="keyword">new</span> Test;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m_instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">DeleteInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m_instance)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lock</span><span class="params">(m_mutex)</span></span>;</span><br><span class="line">            <span class="keyword">if</span> (m_instance)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">delete</span> m_instance;</span><br><span class="line">                m_instance = <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Test() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> Test *m_instance;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">std</span>::mutex m_mutex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Test* Test::m_instance = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">std</span>::mutex Test::m_mutex;</span><br></pre></td></tr></table></figure><h3 id="单例宏"><a href="#单例宏" class="headerlink" title="单例宏"></a>单例宏</h3><p>每个类想要实现单例模式，都要写一遍<code>Instance</code>的接口，有点麻烦，于是希望能用宏实现单例模式，最终使用效果为：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    SINGELTON(Test)</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Test() &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>可以用类模板的方式来进行：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> T *<span class="title">Instance</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (m_instance == <span class="literal">nullptr</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="function"><span class="built_in">std</span>::lock_guard&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">lock</span><span class="params">(m_instanceMutex)</span></span>;</span><br><span class="line">            <span class="keyword">if</span> (m_instance == <span class="literal">nullptr</span>)</span><br><span class="line">                m_instance = <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;T&gt;(<span class="keyword">new</span> T);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> m_instance.<span class="built_in">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;T&gt; m_instance;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">std</span>::mutex m_instanceMutex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">std</span>:</span>:mutex Singleton&lt;T&gt;::m_instanceMutex;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; <span class="title">std</span>:</span>:<span class="built_in">unique_ptr</span>&lt;T&gt; Singleton&lt;T&gt;::m_instance(<span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//单例宏</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SINGELTON(OBJ_CLASS)                            \</span></span><br><span class="line">    <span class="keyword">friend</span> Singleton&lt;OBJ_CLASS&gt;;                        \</span><br><span class="line">                                                        \</span><br><span class="line"><span class="keyword">public</span>:                                                 \</span><br><span class="line">    static OBJ_CLASS *Instance()                        \</span><br><span class="line">    &#123;                                                   \</span><br><span class="line">        <span class="keyword">return</span> Singleton&lt;OBJ_CLASS&gt;::Instance();        \</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;目的：&lt;/strong&gt;为了保证一个类在程序中只有一个实例，并且能被全局访问&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;要点：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;全局性：使用static关键字，变量需要存在于静态存储区&lt;/li&gt;
&lt;li&gt;多线程：使用mutex进行保护&lt;/li&gt;
&lt;li&gt;唯一性：构造函数私有，只生成一个实例，并且由自己创建&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="design_patterns" scheme="https://www.yaronzz.com/categories/design-patterns/"/>
    
    
      <category term="cpp" scheme="https://www.yaronzz.com/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>Qt嵌入式笔记</title>
    <link href="https://www.yaronzz.com/post/qt_arm/"/>
    <id>https://www.yaronzz.com/post/qt_arm/</id>
    <published>2022-05-11T02:40:33.000Z</published>
    <updated>2022-05-21T07:56:36.761Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><a id="more"></a><h2 id="触摸屏使用"><a href="#触摸屏使用" class="headerlink" title="触摸屏使用"></a>触摸屏使用</h2><ol><li><p>查看触摸屏输入设备</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">event0或1等，点击触摸屏即可打印相应信息</span></span><br><span class="line">hexdump  /dev/input/event1</span><br></pre></td></tr></table></figure></li><li><p>触摸屏校准</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/tslib/bin/ts_calibrate</span><br></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/05/11/tmGobd3aAYg6x1e.png" alt="img"></p></li><li><p>触摸屏测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/tslib/bin/ts_test</span><br></pre></td></tr></table></figure></li></ol><h2 id="lrzsz移植"><a href="#lrzsz移植" class="headerlink" title="lrzsz移植"></a>lrzsz移植</h2><ol><li><p>下载并解压lrzsz源码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.ohse.de/uwe/releases/lrzsz-0.12.20.tar.gz</span><br><span class="line">tar -xzvf lrzsz-0.12.20.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>修改交叉编译链并配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">修改配置：CC（交叉编译链）、host、build</span></span><br><span class="line">CC=arm-linux-gnueabihf-gcc ./configure \</span><br><span class="line">--cache-file=./arm-linux.cache \</span><br><span class="line">--prefix=$(pwd)/../output \</span><br><span class="line">--host=arm-linux-gnueabihf \</span><br><span class="line">--build=arm-linux-gnueabihf</span><br></pre></td></tr></table></figure></li><li><p>编译生成</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li></ol><h2 id="arm内核编译"><a href="#arm内核编译" class="headerlink" title="arm内核编译"></a>arm内核编译</h2><ol><li><p>准备工作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install lzop</span><br><span class="line">sudo apt-get install libncurses5-dev libncursesw5-dev</span><br><span class="line">sudo apt-get install libc6-dev-i386 lib32z1</span><br><span class="line">sudo apt-get install libgtk2.0-dev libglib2.0-dev libglade2-dev</span><br></pre></td></tr></table></figure></li><li><p>功能命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">清除编译生成的文件，保留配置文件</span></span><br><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf-  clean       </span><br><span class="line"><span class="meta">#</span><span class="bash">清除编译生成的文件和配置文件</span></span><br><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf-  mrproper </span><br><span class="line"><span class="meta">#</span><span class="bash">清除所有文件</span></span><br><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf-  distclean </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">使用epc_m6y2c_defconfig作为配置文件</span></span><br><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf-  epc_m6y2c_defconfig &amp;&amp;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">基于文本模式的菜单型配置</span></span><br><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- menuconfig</span><br><span class="line"><span class="meta">#</span><span class="bash">图形化配置</span></span><br><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- gconfig</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">编译全部</span></span><br><span class="line">make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- all -j8</span><br></pre></td></tr></table></figure></li><li><p>生成文件</p><ul><li>arch/arm/boot/zImage</li><li>linux-imx/arch/arm/boot/dts/imx6y2c-512m-nand.dtb</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="code" scheme="https://www.yaronzz.com/categories/code/"/>
    
    
      <category term="qt" scheme="https://www.yaronzz.com/tags/qt/"/>
    
      <category term="arm" scheme="https://www.yaronzz.com/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>FRP内网穿透</title>
    <link href="https://www.yaronzz.com/post/frp_use/"/>
    <id>https://www.yaronzz.com/post/frp_use/</id>
    <published>2022-03-30T10:00:20.000Z</published>
    <updated>2022-06-08T02:15:06.775Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>frp 是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。frp提供跨平台的客户端与服务端，开源免费，地址：<a href="https://github.com/fatedier/frp" target="_blank" rel="noopener">frp (github.com)</a></p><p>根据系统版本，<a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener">下载不同的文件</a>并解压如下：</p><p><img src="https://s2.loli.net/2022/03/30/VYOMHWu3AglD8t2.png" alt="image-20220330172447439"></p><a id="more"></a><p>文件包括：</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>frpc</td><td>客户端执行程序</td></tr><tr><td>frpc.ini</td><td>客户端配置</td></tr><tr><td>frps</td><td>服务端执行程序</td></tr><tr><td>frps.ini</td><td>服务端配置</td></tr></tbody></table><h2 id="服务端使用"><a href="#服务端使用" class="headerlink" title="服务端使用"></a>服务端使用</h2><h3 id="手动安装与配置"><a href="#手动安装与配置" class="headerlink" title="手动安装与配置"></a>手动安装与配置</h3><ol><li><p>修改配置文件，详细配置参数请参考<a href="https://gofrp.org/docs/reference/server-configures/" target="_blank" rel="noopener">服务端配置 | frp (gofrp.org)</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 绑定的IP与端口</span></span><br><span class="line">bind_addr = 0.0.0.0</span><br><span class="line">bind_port = 5000</span><br><span class="line"><span class="meta">#</span><span class="bash">用于接收采用 KCP 连接的 frpc</span></span><br><span class="line"><span class="meta">#</span><span class="bash">kcp_bind_port = 0</span></span><br><span class="line"><span class="meta">#</span><span class="bash">用于接收采用 HTTP\HTTPS 连接的 frpc</span></span><br><span class="line"><span class="meta">#</span><span class="bash">vhost_http_port = 0</span></span><br><span class="line"><span class="meta">#</span><span class="bash">vhost_https_port = 0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> http、https类型的二级域名后缀</span></span><br><span class="line"><span class="meta">#</span><span class="bash">subdomain_host = test.com</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> web仪表盘端口，可以查看服务详情与已连接的客户端</span></span><br><span class="line">dashboard_port = 5001</span><br><span class="line"><span class="meta">#</span><span class="bash"> web仪表盘用户与密码</span></span><br><span class="line">dashboard_user = admin</span><br><span class="line">dashboard_pwd = xxxxxx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 日志级别 debug, info, warn, error | 日志最大天数</span></span><br><span class="line">log_file = ./frps.log</span><br><span class="line">log_level = info</span><br><span class="line">log_max_days = 3</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">服务端返回详细错误信息给客户端</span></span><br><span class="line">detailed_errors_to_client = true</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证码</span></span><br><span class="line">token = xxxxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 客户端可以绑定的端口</span></span><br><span class="line"><span class="meta">#</span><span class="bash">allow_ports = 1-65535</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">if</span> tcp stream multiplexing is used, default is <span class="literal">true</span></span></span><br><span class="line">tcp_mux = true</span><br></pre></td></tr></table></figure></li><li><p>启动程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frps -c ./frps.ini</span><br></pre></td></tr></table></figure></li></ol><h3 id="一键安装"><a href="#一键安装" class="headerlink" title="一键安装"></a>一键安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://code.aliyun.com/MvsCode/frps-onekey/raw/master/install-frps.sh -O ./install-frps.sh</span><br><span class="line">chmod 700 ./install-frps.sh</span><br><span class="line">./install-frps.sh install</span><br></pre></td></tr></table></figure><p>管理与配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/frps &#123;start|stop|restart|status|config|version&#125;</span><br></pre></td></tr></table></figure><h2 id="客户端使用"><a href="#客户端使用" class="headerlink" title="客户端使用"></a>客户端使用</h2><ol><li><p>修改配置文件，详细配置参数请参考<a href="https://gofrp.org/docs/reference/client-configures/" target="_blank" rel="noopener">客户端配置 | frp (gofrp.org)</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line"><span class="meta">#</span><span class="bash">frps服务端地址与通讯端口</span></span><br><span class="line">server_addr = 192.168.0.1</span><br><span class="line">server_port = 5000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 验证码</span></span><br><span class="line">token = xxxxxxxxxxxxxxx</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">设置为<span class="literal">false</span>，frpc连接frps失败后重连，默认为<span class="literal">true</span>不重连</span></span><br><span class="line">login_fail_exit = false</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">KCP协议在弱网环境下传输效率提升明显，但是对frps会有一些额外的流量消耗。服务端须先设置kcp_bind_port = 7000，www.yourdomain.com服务端已设置支持</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">连接服务端的通信协议 tcp, kcp, websocket</span></span><br><span class="line">protocol = tcp</span><br><span class="line"></span><br><span class="line">[SSH]  </span><br><span class="line"><span class="meta">#</span><span class="bash">代理类型 tcp, udp, http, https, stcp, sudp, xtcp, tcpmux</span></span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 22</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">压缩传输 | 加密传输</span></span><br><span class="line">use_compression = true</span><br><span class="line">use_encryption = true</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">tcp\udp绑定的服务端口</span></span><br><span class="line">remote_port = 6453</span><br></pre></td></tr></table></figure></li><li><p>启动程序</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure><p>直接访问 <code>192.168.0.1:6453</code>即可</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;frp 是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。frp提供跨平台的客户端与服务端，开源免费，地址：&lt;a href=&quot;https://github.com/fatedier/frp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;frp (github.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;根据系统版本，&lt;a href=&quot;https://github.com/fatedier/frp/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;下载不同的文件&lt;/a&gt;并解压如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/03/30/VYOMHWu3AglD8t2.png&quot; alt=&quot;image-20220330172447439&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="建站" scheme="https://www.yaronzz.com/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="linux" scheme="https://www.yaronzz.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux不同网段网络通信</title>
    <link href="https://www.yaronzz.com/post/linux_netmask/"/>
    <id>https://www.yaronzz.com/post/linux_netmask/</id>
    <published>2022-02-28T09:26:17.000Z</published>
    <updated>2022-05-11T08:07:07.077Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>有两台机子，各自设置了静态 IP：</p><ul><li>A 机：<code>ifconfig eth0 192.168.32.10 netmask 255.255.254.0</code></li><li>B 机：<code>ifconfig eth0 192.168.1.15 netmask 255.255.254.0</code></li></ul><p>A 机 Ping B 机时，显示异常：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span>]<span class="comment"># ping 192.168.1.15</span></span><br><span class="line">PING 192.168.1.15 (192.168.1.15): 56 data bytes</span><br><span class="line">ping: sendto: Network is unreachable</span><br></pre></td></tr></table></figure><p>需要在不改变 AB 机 IP 的情况下，让网络互通。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p><strong>子网掩码</strong>是一个32位的2进制数，常见格式为<code>255.255.255.255</code>（即FF.FF.FF.FF）。子网掩码由1和0组成，且1和0分别连续。 其对应网络地址的所有位都置为1，对应于主机地址的所有位置都为0。用于告知路由器，地址的哪一部分是网络地址，哪一部分是主机地址，使路由器正确判断任意IP地址是否是本网段)的，从而正确地进行路由。</p><p><code>注意：只有网络标识相同的两台主机在无路由的情况下才能相互通信。</code></p><p>通过子网掩码判断两台设备是否属于同一网段的方法是，将IP地址和子网掩码转换为二进制，然后进行二进制“与”计算，如果得出的结果是相同的，那么这两台计算机就属于同一网段。</p><p><strong>比如：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#子网掩码：255.255.254.0</span></span><br><span class="line"><span class="comment">#设备1地址：192.168.0.55</span></span><br><span class="line"><span class="comment">#设备2地址：192.168.1.45</span></span><br><span class="line"></span><br><span class="line">可知：</span><br><span class="line">设备1网段192.168.0，设备2网段192.168.0</span><br></pre></td></tr></table></figure><p>使用子网掩码划分子网后，<a href="https://baike.baidu.com/item/子网/1186929" target="_blank" rel="noopener">子网</a>内可以通信，跨子网不能通信，子网间通信应该使用路由器，并正确配置<a href="https://baike.baidu.com/item/静态路由/100778" target="_blank" rel="noopener">静态路由</a>信息。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ol><li><p>设置掩码为<code>255.255.192.0</code>，从而在二层打通 192.168.0.0 - 192.168.63.255 ，两个设备间可以走二层直接交付</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A机</span></span><br><span class="line">ifconfig eth0 192.168.32.10 netmask 255.255.192.0</span><br><span class="line"><span class="comment"># B机</span></span><br><span class="line">ifconfig eth0 192.168.1.15 netmask 255.255.192.0</span><br></pre></td></tr></table></figure></li><li><p>设置静态路由：</p><p>由于掩码是 23 位，A 机所在局域网 IP 地址范围是 192.168.32.1 ~ 192.168.33.254 (0 和 255 一般不分配给主机)，B 机所在局域网 IP 地址范围是 192.168.0.1 ~ 192.168.1.254。所以不是同一个 network ，网络不可达，无法 ping 通，只能在 A 机上添加一条到 B 机 network 的静态路由，并且在 B 机器上添加 A 机器的 static route </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A机</span></span><br><span class="line">ip route add 192.168.0.0/23 dev eth0</span><br><span class="line"><span class="comment"># B机 </span></span><br><span class="line">ip route add 192.168.32.0/23 dev eth0</span><br></pre></td></tr></table></figure></li></ol><p><strong>参考：</strong><a href="https://www.v2ex.com/t/836870#reply11" target="_blank" rel="noopener">请教大佬一个关于网络的问题 - V2EX</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="code" scheme="https://www.yaronzz.com/categories/code/"/>
    
    
      <category term="linux" scheme="https://www.yaronzz.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>DHCP局域网协议使用教程</title>
    <link href="https://www.yaronzz.com/post/dhcp_use/"/>
    <id>https://www.yaronzz.com/post/dhcp_use/</id>
    <published>2022-02-25T02:52:20.000Z</published>
    <updated>2022-05-11T08:07:07.070Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>DHCP（<a href="https://baike.baidu.com/item/动态主机配置协议/10778663" target="_blank" rel="noopener">动态主机配置协议</a>）是一个局域网的网络协议。指的是由服务器控制一段IP地址范围，客户机登录服务器时就可以自动获得服务器分配的IP地址和子网掩码。默认情况下，DHCP作为Windows Server的一个服务组件不会被系统自动安装，还需要管理员手动安装并进行必要的配置。</p><a id="more"></a><h2 id="客户端模式"><a href="#客户端模式" class="headerlink" title="客户端模式"></a>客户端模式</h2><p>作为客户端接入DHCP服务：连接路由器，使用自动IP搜索功能：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment">#/sbin/udhcpc</span></span><br><span class="line">udhcpc (v1.22.1) started</span><br><span class="line">Setting IP address 0.0.0.0 on eth0</span><br><span class="line">Sending discover...</span><br><span class="line">Sending select <span class="keyword">for</span> 192.168.0.233...</span><br><span class="line">Lease of 192.168.0.233 obtained, lease time 7200</span><br><span class="line">Setting IP address 192.168.0.233 on eth0</span><br><span class="line">Deleting routers</span><br><span class="line">route: SIOCDELRT: No such process</span><br><span class="line">Adding router 192.168.1.1</span><br><span class="line">Recreating /etc/resolv.conf</span><br><span class="line"> Adding DNS server 114.114.114.114</span><br><span class="line"> Adding DNS server 223.5.5.5</span><br></pre></td></tr></table></figure><h2 id="服务端模式"><a href="#服务端模式" class="headerlink" title="服务端模式"></a>服务端模式</h2><p>作为DHCP服务，可以与其他客户端通过网线直连：</p><ol><li><p>关闭<code>dhcpc</code>自动IP搜索功能</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">killall -9 udhcpc</span><br></pre></td></tr></table></figure></li><li><p>设置本地静态IP地址</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth0 192.168.32.10 netmask 255.255.254.0</span><br></pre></td></tr></table></figure><p>eth0: 本地使用的网卡</p><p>192.168.32.10: 本地使用的IP地址</p></li><li><p>配置DHCP服务：<code>vi /etc/udhcpd.conf</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sample udhcpd configuration file (/etc/udhcpd.conf)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The start and end of the IP lease block</span></span><br><span class="line"></span><br><span class="line">start192.168.32.20#客户端的起始地址</span><br><span class="line">end192.168.32.254#客户端的结束地址</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># The interface that udhcpd will use</span></span><br><span class="line"></span><br><span class="line">interfaceeth0#网卡</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># The maximim number of leases (includes addressesd reserved</span></span><br><span class="line"><span class="comment"># by OFFER's, DECLINE's, and ARP conficts</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#max_leases254#default: 254</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># If remaining is true (default), udhcpd will store the time</span></span><br><span class="line"><span class="comment"># remaining for each lease in the udhcpd leases file. This is</span></span><br><span class="line"><span class="comment"># for embedded systems that cannot keep time between reboots.</span></span><br><span class="line"><span class="comment"># If you set remaining to no, the absolute time that the lease</span></span><br><span class="line"><span class="comment"># expires at will be stored in the dhcpd.leases file.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#remainingyes#default: yes</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># The time period at which udhcpd will write out a dhcpd.leases</span></span><br><span class="line"><span class="comment"># file. If this is 0, udhcpd will never automatically write a</span></span><br><span class="line"><span class="comment"># lease file. (specified in seconds)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#auto_time7200#default: 7200 (2 hours)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># The amount of time that an IP will be reserved (leased) for if a</span></span><br><span class="line"><span class="comment"># DHCP decline message is received (seconds).</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#decline_time3600#default: 3600 (1 hour)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># The amount of time that an IP will be reserved (leased) for if an</span></span><br><span class="line"><span class="comment"># ARP conflct occurs. (seconds</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#conflict_time3600#default: 3600 (1 hour)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># How long an offered address is reserved (leased) in seconds</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#offer_time60#default: 60 (1 minute)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If a lease to be given is below this value, the full lease time is</span></span><br><span class="line"><span class="comment"># instead used (seconds).</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#min_lease60#defult: 60</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># The location of the leases file</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#lease_file/var/lib/misc/udhcpd.leases#defualt: /var/lib/misc/udhcpd.leases</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The location of the pid file</span></span><br><span class="line"><span class="comment">#pidfile/var/run/udhcpd.pid#default: /var/run/udhcpd.pid</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Everytime udhcpd writes a leases file, the below script will be called.</span></span><br><span class="line"><span class="comment"># Useful for writing the lease file to flash every few hours.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#notify_file#default: (no script)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#notify_filedumpleases# &lt;--- useful for debugging</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The following are bootp specific options, setable by udhcpd.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#siaddr192.168.0.22#default: 0.0.0.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#snamezorak#default: (none)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#boot_file/var/nfs_root#default: (none)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The remainer of options are DHCP options and can be specifed with the</span></span><br><span class="line"><span class="comment"># keyword 'opt' or 'option'. If an option can take multiple items, such</span></span><br><span class="line"><span class="comment"># as the dns option, they can be listed on the same line, or multiple</span></span><br><span class="line"><span class="comment"># lines. The only option with a default is 'lease'.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Examles</span></span><br><span class="line">optdns114.114.114.114 223.5.5.5 #192.168.10.2 192.168.10.10</span><br><span class="line">optionsubnet255.255.255.0</span><br><span class="line">optrouter192.168.32.10</span><br><span class="line"><span class="comment">#optwins192.168.10.10</span></span><br><span class="line">optiondns192.168.32.10 #129.219.13.81# appened to above DNS servers for a total of 3</span><br><span class="line">optiondomainlocal</span><br><span class="line">optionlease864000# 10 days of seconds</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Currently supported options, for more info, see options.c</span></span><br><span class="line"><span class="comment">#opt subnet</span></span><br><span class="line"><span class="comment">#opt timezone</span></span><br><span class="line"><span class="comment">#opt router</span></span><br><span class="line"><span class="comment">#opt timesrv</span></span><br><span class="line"><span class="comment">#opt namesrv</span></span><br><span class="line"><span class="comment">#opt dns</span></span><br><span class="line"><span class="comment">#opt logsrv</span></span><br><span class="line"><span class="comment">#opt cookiesrv</span></span><br><span class="line"><span class="comment">#opt lprsrv</span></span><br><span class="line"><span class="comment">#opt bootsize</span></span><br><span class="line"><span class="comment">#opt domain</span></span><br><span class="line"><span class="comment">#opt swapsrv</span></span><br><span class="line"><span class="comment">#opt rootpath</span></span><br><span class="line"><span class="comment">#opt ipttl</span></span><br><span class="line"><span class="comment">#opt mtu</span></span><br><span class="line"><span class="comment">#opt broadcast</span></span><br><span class="line"><span class="comment">#opt wins</span></span><br><span class="line"><span class="comment">#opt lease</span></span><br><span class="line"><span class="comment">#opt ntpsrv</span></span><br><span class="line"><span class="comment">#opt tftp</span></span><br><span class="line"><span class="comment">#opt bootfile</span></span><br><span class="line"><span class="comment">#opt wpad</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Static leases map</span></span><br><span class="line"><span class="comment">#static_lease 00:60:08:11:CE:4E 192.168.0.54</span></span><br><span class="line"><span class="comment">#static_lease 00:60:08:11:CE:3E 192.168.0.44</span></span><br></pre></td></tr></table></figure></li><li><p>启动DHCP服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">udhcpd -fS -I 192.168.32.10 /etc/udhcpd.conf</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DHCP（&lt;a href=&quot;https://baike.baidu.com/item/动态主机配置协议/10778663&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;动态主机配置协议&lt;/a&gt;）是一个局域网的网络协议。指的是由服务器控制一段IP地址范围，客户机登录服务器时就可以自动获得服务器分配的IP地址和子网掩码。默认情况下，DHCP作为Windows Server的一个服务组件不会被系统自动安装，还需要管理员手动安装并进行必要的配置。&lt;/p&gt;
    
    </summary>
    
    
      <category term="软件" scheme="https://www.yaronzz.com/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="network" scheme="https://www.yaronzz.com/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>Github配置仓库Git环境</title>
    <link href="https://www.yaronzz.com/post/github_git/"/>
    <id>https://www.yaronzz.com/post/github_git/</id>
    <published>2022-02-25T02:00:20.000Z</published>
    <updated>2022-06-07T02:25:12.062Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>将代码提交到Github时，突然报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  RemoteWorking git:(master) git push</span><br><span class="line">remote: Support <span class="keyword">for</span> password authentication was removed on August 13, 2021. Please use a personal access token instead.</span><br><span class="line">remote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ <span class="keyword">for</span> more information.</span><br><span class="line">fatal: Authentication failed <span class="keyword">for</span> <span class="string">'https://github.com/yaronzz/xxxxx.git/'</span></span><br></pre></td></tr></table></figure><p>这是由于Github提高了仓库的安全性，访问仓库时需要提供令牌<code>token</code></p><a id="more"></a><h2 id="生成token"><a href="#生成token" class="headerlink" title="生成token"></a>生成token</h2><ol><li>访问<a href="https://github.com/settings/tokens" target="_blank" rel="noopener">Personal Access Tokens (github.com)</a> ，点击生成新token</li></ol><p><img src="https://s2.loli.net/2022/06/07/4lRDUVL95Tks7nm.png" alt="image-20220225095049918"></p><ol start="2"><li>配置名称、有效期、访问权限</li></ol><p><img src="https://s2.loli.net/2022/02/25/AFh7VxdQlMCi6eL.png" alt="image-20220225095152285"></p><ol start="3"><li>点击复制<code>token</code>，此token只能查看一次，最好自己保存到其他地方</li></ol><p><img src="https://s2.loli.net/2022/02/25/4jyWiXASvoMr5g3.png" alt="image-20220225095350129"></p><h2 id="使用token"><a href="#使用token" class="headerlink" title="使用token"></a>使用token</h2><p>重新设置git的远程地址：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="built_in">set</span>-url origin https://&lt;你的token&gt;@github.com/&lt;你的github名称&gt;/&lt;你的仓库名&gt;.git</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将代码提交到Github时，突然报错：&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  RemoteWorking git:(master) git push&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;remote: Support &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; password authentication was removed on August 13, 2021. Please use a personal access token instead.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;remote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; more information.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fatal: Authentication failed &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;https://github.com/yaronzz/xxxxx.git/&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这是由于Github提高了仓库的安全性，访问仓库时需要提供令牌&lt;code&gt;token&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="软件" scheme="https://www.yaronzz.com/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="github" scheme="https://www.yaronzz.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Linux安装ss客户端</title>
    <link href="https://www.yaronzz.com/post/ss_install/"/>
    <id>https://www.yaronzz.com/post/ss_install/</id>
    <published>2022-02-18T01:59:51.000Z</published>
    <updated>2022-06-07T01:58:06.813Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装ss"><a href="#安装ss" class="headerlink" title="安装ss"></a>安装ss</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install python-pip</span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure><h3 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/shadowsocks.json</span><br><span class="line"></span><br><span class="line"><span class="comment">#在文件中添加一下内容：</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="string">"server"</span>:[<span class="string">"101.101.101.101"</span>],</span><br><span class="line">   <span class="string">"server_port"</span>:6666,</span><br><span class="line">   <span class="string">"password"</span>:<span class="string">"xxxxxxxx"</span>,</span><br><span class="line">   <span class="string">"timeout"</span>:300,</span><br><span class="line">   <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">   <span class="string">"local_address"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line">   <span class="string">"local_port"</span>:1080,</span><br><span class="line">   <span class="string">"fast_open"</span>:<span class="literal">false</span>,</span><br><span class="line">   <span class="string">"tunnel_remote"</span>:<span class="string">"8.8.8.8"</span>,</span><br><span class="line">   <span class="string">"dns_server"</span>:[<span class="string">"8.8.8.8"</span>, <span class="string">"8.8.4.4"</span>],</span><br><span class="line">   <span class="string">"tunnel_remote_port"</span>:53,</span><br><span class="line">   <span class="string">"tunnel_port"</span>:53</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>server : 服务器地址</li><li>server_port：服务器端口号</li><li>password：密码</li><li>method：加密方式</li></ul><a id="more"></a><h3 id="启动ss"><a href="#启动ss" class="headerlink" title="启动ss"></a>启动ss</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sslocal -c /etc/shadowsocks.json</span><br></pre></td></tr></table></figure><ol><li><p>错误：<code>ERROR method aes-256-gcm not supported</code></p><p>ss版本太低，可以用<code>sslocal --version</code>，一般都是<code>2.8.2</code>，需要升级到<code>3.0</code>：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/shadowsocks/shadowsocks.git master</span><br><span class="line"><span class="built_in">cd</span> master</span><br><span class="line">git checkout master</span><br><span class="line">python setup.py install</span><br><span class="line">sslocal --version</span><br></pre></td></tr></table></figure><p>也可以直接使用<code>pip</code>进行安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install https://github.com/shadowsocks/shadowsocks/archive/master.zip -U</span><br></pre></td></tr></table></figure></li><li><p>错误：<code>libsodium not found</code>，需要手动编译 <code>libsodium 1.0.8</code> 及以上版本</p><ul><li>Debian 7/8、Ubuntu 14/15/16 及其衍生系列：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install build-essential wget -y</span><br></pre></td></tr></table></figure><ul><li>Centos 6/7、RHEL 7 及其衍生系列：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum groupinstall <span class="string">"Development Tools"</span> -y</span><br><span class="line">yum install wget -y</span><br></pre></td></tr></table></figure><p>安装<code>libsodium</code>:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.libsodium.org/libsodium/releases/LATEST.tar.gz</span><br><span class="line">tar xzvf LATEST.tar.gz</span><br><span class="line"><span class="built_in">cd</span> libsodium*</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/libsodium</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>添加运行库位置并加载运行库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编辑文件</span></span><br><span class="line">vim /etc/ld.so.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#输入以下内容</span></span><br><span class="line">include ld.so.conf.d/*.conf<span class="string">"</span></span><br><span class="line"><span class="string">/lib</span></span><br><span class="line"><span class="string">/usr/lib64</span></span><br><span class="line"><span class="string">/usr/local/lib</span></span><br><span class="line"><span class="string">/usr/local/libsodium/lib</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#使配置生效</span></span><br><span class="line"><span class="string">ldconfig</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="配置服务"><a href="#配置服务" class="headerlink" title="配置服务"></a>配置服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编辑文件</span></span><br><span class="line">vi /etc/systemd/system/shadowsocks.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#输入以下内容</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=Shadowsocks</span><br><span class="line">[Service]</span><br><span class="line">TimeoutStartSec=0</span><br><span class="line">ExecStart=sslocal -c /etc/shadowsocks.json</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> shadowsocks.service</span><br><span class="line">systemctl start shadowsocks.service</span><br><span class="line">systemctl status shadowsocks</span><br></pre></td></tr></table></figure><p>检查服务是否运行正常：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --socks5 127.0.0.1:1080 http://httpbin.org/ip</span><br></pre></td></tr></table></figure><h2 id="使用ss代理"><a href="#使用ss代理" class="headerlink" title="使用ss代理"></a>使用ss代理</h2><h3 id="安装privoxy"><a href="#安装privoxy" class="headerlink" title="安装privoxy"></a>安装privoxy</h3><p>privoxy可以将ss提供的socket5代理转为http代理</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装</span></span><br><span class="line">yum install privoxy</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置</span></span><br><span class="line">vi /etc/privoxy/config</span><br><span class="line"><span class="comment">#确保文件中有以下两行</span></span><br><span class="line">listen-address 127.0.0.1:8118</span><br><span class="line">forward-socks5t / 127.0.0.1:1080 .</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> privoxy</span><br><span class="line">systemctl start privoxy</span><br><span class="line">systemctl status privoxy</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>临时启动http代理：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=http://127.0.0.1:8118</span><br><span class="line"><span class="built_in">export</span> https_proxy=http://127.0.0.1:8118</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl www.google.com</span><br></pre></td></tr></table></figure><p>永久启用http代理：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编辑配置文件</span></span><br><span class="line">vi /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment">#配置</span></span><br><span class="line"><span class="built_in">export</span> http_proxy=http://127.0.0.1:8118</span><br><span class="line"><span class="built_in">export</span> https_proxy=http://127.0.0.1:8118</span><br><span class="line"></span><br><span class="line"><span class="comment">#生效</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装ss&quot;&gt;&lt;a href=&quot;#安装ss&quot; class=&quot;headerlink&quot; title=&quot;安装ss&quot;&gt;&lt;/a&gt;安装ss&lt;/h2&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install python-pip&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip install shadowsocks&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;创建配置文件&quot;&gt;&lt;a href=&quot;#创建配置文件&quot; class=&quot;headerlink&quot; title=&quot;创建配置文件&quot;&gt;&lt;/a&gt;创建配置文件&lt;/h3&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vi /etc/shadowsocks.json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#在文件中添加一下内容：&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&quot;server&quot;&lt;/span&gt;:[&lt;span class=&quot;string&quot;&gt;&quot;101.101.101.101&quot;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&quot;server_port&quot;&lt;/span&gt;:6666,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&quot;password&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;xxxxxxxx&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&quot;timeout&quot;&lt;/span&gt;:300,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&quot;method&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;aes-256-cfb&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&quot;local_address&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&quot;local_port&quot;&lt;/span&gt;:1080,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&quot;fast_open&quot;&lt;/span&gt;:&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&quot;tunnel_remote&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;8.8.8.8&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&quot;dns_server&quot;&lt;/span&gt;:[&lt;span class=&quot;string&quot;&gt;&quot;8.8.8.8&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;8.8.4.4&quot;&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&quot;tunnel_remote_port&quot;&lt;/span&gt;:53,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;string&quot;&gt;&quot;tunnel_port&quot;&lt;/span&gt;:53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;server : 服务器地址&lt;/li&gt;
&lt;li&gt;server_port：服务器端口号&lt;/li&gt;
&lt;li&gt;password：密码&lt;/li&gt;
&lt;li&gt;method：加密方式&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="建站" scheme="https://www.yaronzz.com/categories/%E5%BB%BA%E7%AB%99/"/>
    
    
      <category term="linux" scheme="https://www.yaronzz.com/tags/linux/"/>
    
      <category term="ss" scheme="https://www.yaronzz.com/tags/ss/"/>
    
  </entry>
  
  <entry>
    <title>Qt-QScrollArea使用</title>
    <link href="https://www.yaronzz.com/post/qt_qscrollarea/"/>
    <id>https://www.yaronzz.com/post/qt_qscrollarea/</id>
    <published>2022-01-20T03:12:30.000Z</published>
    <updated>2022-05-11T08:07:07.213Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>QScrollArea作为一个控件容器，主要用于提供横向和纵向的滚动条，常用在图片查看等场景。由于它只作为一个容器存在，所以需要为其设置一个控制：<code>QScrollArea::setWidget(QWidget *)</code>。</p><p>QScrollArea也可以用来设计复杂的列表：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyScrollArea</span> :</span> <span class="keyword">public</span> QScrollArea</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MyScrollArea</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_numItem = <span class="number">0</span>;</span><br><span class="line">        m_layout = <span class="keyword">new</span> QVBoxLayout();</span><br><span class="line">        m_layout-&gt;addStretch(<span class="number">1</span>);</span><br><span class="line">        m_widget = <span class="keyword">new</span> QWidget();</span><br><span class="line">        m_widget-&gt;setLayout(m_layout);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>-&gt;setWidget(m_widget);</span><br><span class="line">        <span class="keyword">this</span>-&gt;setWidgetResizable(True);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addItem</span><span class="params">(QWidget* item)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_layout-&gt;insertWidget(m_numItem, item);</span><br><span class="line">        m_numItem ++;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delItem</span><span class="params">(QWidget* item)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        m_layout-&gt;removeWidget(item);</span><br><span class="line">        m_numItem --;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>列表项一般只需要纵向的滚动条，横向宽度保持与外部窗口一致，所以需要重写QScrollArea的<strong>resizeEvent</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resizeEvent</span><span class="params">(QResizeEvent* e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">QScrollArea::resizeEvent(e);</span><br><span class="line"><span class="keyword">auto</span> <span class="built_in">width</span> = e-&gt;<span class="built_in">size</span>()-&gt;<span class="built_in">width</span>();</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">width</span> &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">m_widget-&gt;setMaximumWidth(<span class="built_in">width</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="code" scheme="https://www.yaronzz.com/categories/code/"/>
    
    
      <category term="qt" scheme="https://www.yaronzz.com/tags/qt/"/>
    
  </entry>
  
  <entry>
    <title>C++NFS挂载</title>
    <link href="https://www.yaronzz.com/post/cpp_nfs/"/>
    <id>https://www.yaronzz.com/post/cpp_nfs/</id>
    <published>2021-12-24T02:20:33.000Z</published>
    <updated>2022-05-11T08:07:07.270Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="挂载NFS"><a href="#挂载NFS" class="headerlink" title="挂载NFS"></a>挂载NFS</h2><h3 id="挂载命令"><a href="#挂载命令" class="headerlink" title="挂载命令"></a>挂载命令</h3><p>挂载NFS时，常用的命令比如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将远程目录挂载到本地/home/share目录下</span></span><br><span class="line">mount -t nfs -o nolock 192.168.1.10:/tmp /home/share</span><br></pre></td></tr></table></figure><p>在Linux 下可以用<code>mount</code>函数进行挂载：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Mount</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> remotePath = m_remoteIP + <span class="string">":"</span> + m_remotePath;</span><br><span class="line">    <span class="built_in">string</span> localPath = m_localPath;</span><br><span class="line">    <span class="built_in">string</span> params = <span class="string">"nolock,soft,fg,tcp,timeo=5,retrans=1,rsize=4096,vers=3,addr="</span> + m_remoteIP;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ret = mount(remotePath.c_str(),</span><br><span class="line">                    localPath.c_str(),</span><br><span class="line">                    <span class="string">"nfs"</span>,</span><br><span class="line">                    MS_SYNCHRONOUS,</span><br><span class="line">                    params.c_str());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> errInfo = errno;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="错误码"><a href="#错误码" class="headerlink" title="错误码"></a>错误码</h3><p>挂载失败时，常见错误码<code>errno</code>有：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>EINVAL22<span class="comment">/* Invalid argument 挂载参数问题，可能是没加addr*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>EACCES13<span class="comment">/* Permission denied 权限问题*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>EPERM 1<span class="comment">/* Operation not permitted 权限问题*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>EBUSY16<span class="comment">/* Device or resource busy 挂载目录正被使用*/</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>ENOENT 2<span class="comment">/* No such file or directory 挂载目录错误*/</span></span></span><br></pre></td></tr></table></figure><h3 id="挂载参数"><a href="#挂载参数" class="headerlink" title="挂载参数"></a>挂载参数</h3><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>rsize=n</td><td>读时最大字节数</td></tr><tr><td>wsize=n</td><td>写时最大字节数</td></tr><tr><td>timeo=n</td><td>客户端重传请求前等待时间,默认等待重传时间为60s</td></tr><tr><td>retrans=n</td><td>客户端返回错误前的重传次数。默认为重传3次。retrans与soft参数一起使用时才有效。</td></tr><tr><td>soft/hard</td><td>软挂载方式挂载系统，若NFS请求超时，则客户端向调用程序返回错误；<br />如果使用硬连接方式则客户端一直重新请求直至成功。默认为hard</td></tr><tr><td>bg/fg</td><td>设置挂载失败后的行为方式。<br />默认的fg方式将立刻退出返回错误状态，bg方式是退出前将产生一个子进程在后台继续尝试挂载</td></tr><tr><td>vers=xxx</td><td>设置版本</td></tr><tr><td>addr=xxx</td><td>设置服务地址</td></tr><tr><td>tcp/udp</td><td>设置协议，一般使用tcp，网络不稳定可以换udp</td></tr><tr><td>port=n</td><td>设置服务端口号</td></tr><tr><td>lock/nolock</td><td>选择是否使用NLM协议在服务器上锁文件。当选择nolock选项时，锁对于同一主机的应用有效，对不同主机不受锁的影响。默认为lock。</td></tr></tbody></table><h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p>卸载函数有<code>mount</code>和<code>mount2</code>，第二个可以加参数，所以一般情况下使用<code>mount2</code>进行强制卸载：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">UnMount</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> umount2(m_localPath.c_str(), MNT_FORCE) == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果<code>m_localPath</code>目录没有被挂载，则会返回错误</p><h2 id="检查是否挂载"><a href="#检查是否挂载" class="headerlink" title="检查是否挂载"></a>检查是否挂载</h2><h3 id="检查命令"><a href="#检查命令" class="headerlink" title="检查命令"></a>检查命令</h3><p>Linux下使用命令检查nfs是否挂载成功的方式有很多，比如：</p><ol><li><p>检查文件系统的磁盘空间占用情况 <code>df -h</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Filesystem                Size      Used Available Use% Mounted on</span><br><span class="line">ubi0:rootfs              54.1M     50.8M      3.3M  94% /</span><br><span class="line">devtmpfs                215.8M         0    215.8M   0% /dev</span><br><span class="line">192.168.0.249:/nfs       59.6G      1.6G     57.9G   3% /mnt/udisk</span><br></pre></td></tr></table></figure></li><li><p>查看挂载信息文件 <code>cat /proc/mounts</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ubi0:rootfs / ubifs rw,sync,relatime 0 0</span><br><span class="line">devtmpfs /dev devtmpfs rw,relatime,size=220936k,nr_inodes=55234,mode=755 0 0</span><br><span class="line">192.168.0.249:/nfs /mnt/udisk nfs rw,sync,relatime,vers=3,rsize=4096,wsize=8192,namlen=255,soft,nolock,proto=tcp,timeo=5,retrans=1,sec=sys,mountaddr=192.168.0.249,mountvers=3,mountproto=tcp,local_lock=all,addr=192.168.0.249 0 0</span><br></pre></td></tr></table></figure></li><li><p>直接使用挂载命令 <code>mount</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ubi0:rootfs on / <span class="built_in">type</span> ubifs (rw,sync,relatime)</span><br><span class="line">devtmpfs on /dev <span class="built_in">type</span> devtmpfs (rw,relatime,size=220936k,nr_inodes=55234,mode=755)</span><br><span class="line">192.168.0.249:/nfs on /mnt/udisk <span class="built_in">type</span> nfs (rw,sync,relatime,vers=3,rsize=4096,wsize=8192,namlen=255,soft,nolock,proto=tcp,timeo=5,retrans=1,sec=sys,mountaddr=192.168.0.249,mountvers=3,mountproto=tcp,local_lock=all,addr=192.168.0.249)</span><br></pre></td></tr></table></figure></li><li><p>查看指定目录是否挂载点 <code>mountpoint -d /mnt/udisk</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打印文件系统的主设备号和次设备号</span></span><br><span class="line">0:21</span><br></pre></td></tr></table></figure></li></ol><h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><p><strong>功能需求：</strong></p><ul><li>检查目录是否挂载成功</li><li>当NFS服务关闭时，检查结果也需要同步</li></ul><p>经过测试，只有<code>mountpoint</code> 能完成第二点功能需求，所以直接使用shell命令来进行检查：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CheckMount</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> shell = <span class="string">"mountpoint -d "</span> + m_localPath;</span><br><span class="line"></span><br><span class="line">    QProcess proc;</span><br><span class="line">    proc.start(shell.c_str());</span><br><span class="line">    <span class="keyword">if</span> (!proc.waitForFinished(<span class="number">10000</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">auto</span> output = proc.readAll();</span><br><span class="line">    <span class="keyword">return</span> !output.isEmpty())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="NFS服务"><a href="#NFS服务" class="headerlink" title="NFS服务"></a>NFS服务</h2><h3 id="Windows下安装"><a href="#Windows下安装" class="headerlink" title="Windows下安装"></a>Windows下安装</h3><p>Windows下常见的NFS服务软件可以使用<a href="https://www.hanewin.net/nfs-e.htm" target="_blank" rel="noopener">haneWIN NFS Server</a></p><p><strong>1. 下载地址</strong>：<a href="https://r.hanewin.net/nfs1261.zip" target="_blank" rel="noopener">https://r.hanewin.net/nfs1261.zip</a></p><p><strong>2. 配置方法</strong>：打开目录下的<strong>exports</strong>文件，配置NFS服务目录，比如共享D盘下的<strong>NFSData</strong>目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\NFSData  -name:nfs -exec -maproot:0 -alldirs</span><br></pre></td></tr></table></figure><ul><li>name：设置挂载的目录名给客户端使用，比如<code>mount -t nfs -o nolock 192.168.1.10:/nfs /home/share</code></li><li>maproot：将root权限开放给客户端</li><li>alldirs：将全部路径开放给客户端</li></ul><p>Linux下安装</p><ol><li>安装：<code>sudo apt-get install nfs-kernel-server</code></li><li>配置方法：编辑文件 <code>/etc/exports</code></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/mnt/nfstest *(rw,sync,no_root_squash,no_subtree_check)</span><br></pre></td></tr></table></figure><ul><li>rw：可读可写</li><li>no_root_squash：root的权限</li><li>sync：资料同步写入存储器中</li><li>no_subtree_check：输出目录是一个子目录，nfs服务器也不检查其父目录的权限，这样可以提高效率</li></ul><p>编辑成功之后运行命令<code>exportfs -au</code>刷新</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;挂载NFS&quot;&gt;&lt;a href=&quot;#挂载NFS&quot; class=&quot;headerlink&quot; title=&quot;挂载NFS&quot;&gt;&lt;/a&gt;挂载NFS&lt;/h2&gt;&lt;h3 id=&quot;挂载命令&quot;&gt;&lt;a href=&quot;#挂载命令&quot; class=&quot;headerlink&quot; title=&quot;挂载命令&quot;&gt;&lt;/a&gt;挂载命令&lt;/h3&gt;&lt;p&gt;挂载NFS时，常用的命令比如：&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#将远程目录挂载到本地/home/share目录下&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mount -t nfs -o nolock 192.168.1.10:/tmp /home/share&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在Linux 下可以用&lt;code&gt;mount&lt;/code&gt;函数进行挂载：&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Mount&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; remotePath = m_remoteIP + &lt;span class=&quot;string&quot;&gt;&quot;:&quot;&lt;/span&gt; + m_remotePath;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; localPath = m_localPath;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; params = &lt;span class=&quot;string&quot;&gt;&quot;nolock,soft,fg,tcp,timeo=5,retrans=1,rsize=4096,vers=3,addr=&quot;&lt;/span&gt; + m_remoteIP;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; ret = mount(remotePath.c_str(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    localPath.c_str(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;string&quot;&gt;&quot;nfs&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    MS_SYNCHRONOUS,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    params.c_str());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (ret != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; errInfo = errno;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.yaronzz.com/categories/code/"/>
    
    
      <category term="cpp" scheme="https://www.yaronzz.com/tags/cpp/"/>
    
      <category term="nfs" scheme="https://www.yaronzz.com/tags/nfs/"/>
    
  </entry>
  
  <entry>
    <title>GDB-CoreDump调试</title>
    <link href="https://www.yaronzz.com/post/gdb_coreDump/"/>
    <id>https://www.yaronzz.com/post/gdb_coreDump/</id>
    <published>2021-12-23T09:26:17.000Z</published>
    <updated>2022-05-11T08:07:07.273Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="配置并生成崩溃信息"><a href="#配置并生成崩溃信息" class="headerlink" title="配置并生成崩溃信息"></a>配置并生成崩溃信息</h2><ol><li>查看并开启core dump功能</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看是否开启 0不开</span></span><br><span class="line"><span class="built_in">ulimit</span> -c</span><br><span class="line"><span class="comment">#开启core dump功能</span></span><br><span class="line"><span class="built_in">ulimit</span> -c unlimited</span><br></pre></td></tr></table></figure><ol start="2"><li>指定core dump输出目录到<code>/opt/dump/</code></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> /opt/dump/core.%e.%p &gt; /proc/sys/kernel/core_pattern</span><br></pre></td></tr></table></figure><ol start="3"><li>执行问题程序即可，输出如下：</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#崩溃信息</span></span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># Alignment trap: not handling instruction e8502f00 at [&lt;75f76aca&gt;]</span></span><br><span class="line">Unhandled fault: alignment exception (0x001) at 0x0d98b981</span><br><span class="line">pgd = 98be4000</span><br><span class="line">[0d98b981] *pgd=00000000</span><br><span class="line"></span><br><span class="line">[1]-  Bus error (core dumped)    ./<span class="built_in">test</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="调试崩溃文件"><a href="#调试崩溃文件" class="headerlink" title="调试崩溃文件"></a>调试崩溃文件</h2><p>可执行软件：<code>test</code>，产生的dump文件<code>core-test-775</code></p><ol><li>使用gdb调试程序</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gdb <span class="built_in">test</span></span><br></pre></td></tr></table></figure><ol start="2"><li>设置程序所需的动态库路径</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查询所需库</span></span><br><span class="line">(gdb)info sharedlibrary</span><br><span class="line"><span class="comment">#设置库路径/root/lib/和/root/lib2/,用冒号隔开</span></span><br><span class="line">(gdb)<span class="built_in">set</span> solib-search-path /root/lib/:/root/lib2/</span><br></pre></td></tr></table></figure><ol start="3"><li>打开崩溃文件</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(gdb)core-file core-test-775</span><br></pre></td></tr></table></figure><ol start="4"><li>查询崩溃信息</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(gdb)bt</span><br></pre></td></tr></table></figure><h2 id="设置自动加载动态库路径"><a href="#设置自动加载动态库路径" class="headerlink" title="设置自动加载动态库路径"></a>设置自动加载动态库路径</h2><ol><li>修改用户目录下的<code>~/.gdbinit</code>：</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set auto-load safe-path /</span><br></pre></td></tr></table></figure><ol start="2"><li>修改程序软件的目录下的<code>~/.gdbinit</code>：</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> solib-search-path /root/lib/:/root/lib2/</span><br></pre></td></tr></table></figure><ol start="3"><li>调试崩溃信息</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gdb <span class="built_in">test</span></span><br><span class="line">(gdb)core-file core-test-775</span><br><span class="line">(gdb)bt</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;配置并生成崩溃信息&quot;&gt;&lt;a href=&quot;#配置并生成崩溃信息&quot; class=&quot;headerlink&quot; title=&quot;配置并生成崩溃信息&quot;&gt;&lt;/a&gt;配置并生成崩溃信息&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;查看并开启core dump功能&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#查看是否开启 0不开&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;ulimit&lt;/span&gt; -c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#开启core dump功能&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;ulimit&lt;/span&gt; -c unlimited&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;指定core dump输出目录到&lt;code&gt;/opt/dump/&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; /opt/dump/core.%e.%p &amp;gt; /proc/sys/kernel/core_pattern&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;执行问题程序即可，输出如下：&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#崩溃信息&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[root@&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt; ~]&lt;span class=&quot;comment&quot;&gt;# Alignment trap: not handling instruction e8502f00 at [&amp;lt;75f76aca&amp;gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Unhandled fault: alignment exception (0x001) at 0x0d98b981&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pgd = 98be4000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[0d98b981] *pgd=00000000&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[1]-  Bus error (core dumped)    ./&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.yaronzz.com/categories/code/"/>
    
    
      <category term="linux" scheme="https://www.yaronzz.com/tags/linux/"/>
    
      <category term="gdb" scheme="https://www.yaronzz.com/tags/gdb/"/>
    
  </entry>
  
  <entry>
    <title>Qt交叉编译</title>
    <link href="https://www.yaronzz.com/post/qt_cross_compile/"/>
    <id>https://www.yaronzz.com/post/qt_cross_compile/</id>
    <published>2021-12-23T09:06:30.000Z</published>
    <updated>2022-05-11T08:07:07.246Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="下载软件"><a href="#下载软件" class="headerlink" title="下载软件"></a>下载软件</h3><ul><li>下载相应的触摸屏库<code>tslib</code></li><li>下载<code>linaro</code>交叉编译工具链:<a href="http://releases.linaro.org/components/toolchain/binaries/" target="_blank" rel="noopener">Linaro Releases</a></li><li>下载QT源码：<a href="https://download.qt.io/archive/qt/5.9/5.9.6/single/" target="_blank" rel="noopener">Index of /archive/qt/5.9/5.9.6/single</a></li></ul><table><thead><tr><th>文件名</th><th>说明</th></tr></thead><tbody><tr><td>gcc-linaro-arm-linux-gnueabihf-4.9-2014.09_linux.tar.bz2</td><td>交叉编译工具链</td></tr><tr><td>tslib.tar.bz2</td><td>触摸屏库</td></tr><tr><td>qt-everywhere-opensource-src-5.9.6.tar.xz</td><td>qt5.9.6源码</td></tr></tbody></table><a id="more"></a><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><ol><li><p>将<code>gcc-linaro-arm-linux-gnueabihf-4.9-2014.09_linux.tar.bz2</code>和<code>tslib.tar.bz2</code>移动到<code>/opt</code>目录下</p></li><li><p>解压 <code>gcc-linaro-arm-linux-gnueabihf-4.9-2014.09_linux.tar.bz2</code>到opt目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">sudo tar -xvjf gcc-linaro-arm-linux-gnueabihf-4.9-2014.09_linux.tar.bz2</span><br></pre></td></tr></table></figure></li><li><p>解压 <code>tslib.tar.bz2</code>到opt目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">sudo tar -xvjf tslib.tar.bz2</span><br></pre></td></tr></table></figure></li><li><p>测试交叉编译链</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/gcc-linaro-arm-linux-gnueabihf-4.9-2014.09_linux/bin</span><br><span class="line">./arm-linux-gnueabihf-g++ -v</span><br></pre></td></tr></table></figure><p>如果不能运行，可能是系统版本64位与交叉编译链32位不符导致，可以安装32位支持：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg --add-architecture i386</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install libc6:i386 libncurses5:i386 libstdc++6:i386 zlib1g:i386 -y</span><br></pre></td></tr></table></figure></li></ol><h2 id="配置与编译QT"><a href="#配置与编译QT" class="headerlink" title="配置与编译QT"></a>配置与编译QT</h2><ol><li><p>将<code>qt-everywhere-opensource-src-5.9.6.tar.xz</code>移动到用户目录下，创建<code>qt-5.9.6-source</code>目录用于放源码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">mkdir qt-5.9.6-source</span><br></pre></td></tr></table></figure></li><li><p>解压 <code>qt-everywhere-opensource-src-5.9.6.tar.xz</code>到用户目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvjf qt-everywhere-opensource-src-5.9.6.tar.xz ./qt-5.9.6-source</span><br></pre></td></tr></table></figure></li><li><p>配置交叉编译链</p><ul><li>打开配置文件</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/qt-5.9.6-source/qt-everywhere-opensource-src-5.9.6</span><br><span class="line">vi ./qtbase/mkspecs/linux-arm-gnueabi-g++/qmake.conf</span><br></pre></td></tr></table></figure><ul><li>修改内容，并指定交叉编译链地址</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># qmake configuration for building with arm-linux-gnueabi-g++</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="attr">MAKEFILE_GENERATOR</span>      = UNIX</span><br><span class="line">CONFIG                 += incremental</span><br><span class="line"><span class="attr">QMAKE_INCREMENTAL_STYLE</span> = sublib</span><br><span class="line"></span><br><span class="line">include(../common/linux.conf)</span><br><span class="line">include(../common/gcc-base-unix.conf)</span><br><span class="line">include(../common/g++-unix.conf)</span><br><span class="line"></span><br><span class="line"><span class="attr">QT_QPA_DEFAULT_PLATFORM</span> = linuxfb</span><br><span class="line">QMAKE_CFLAGS           += -march=armv7-a -mtune=cortex-a7</span><br><span class="line">QMAKE_CXXFLAGS         += -march=armv7-a -mtune=cortex-a7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">QMAKE_INCDIR</span> = /opt/tslib/include</span><br><span class="line"><span class="attr">QMAKE_LIBDIR</span> = /opt/tslib/lib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># modifications to g++.conf</span></span><br><span class="line"><span class="attr">QMAKE_CC</span>         = /opt/gcc-linaro-arm-linux-gnueabihf-<span class="number">4.9</span>-<span class="number">2014.09</span>_linux/bin/arm-linux-gnueabihf-gcc -lts</span><br><span class="line"><span class="attr">QMAKE_CXX</span>        = /opt/gcc-linaro-arm-linux-gnueabihf-<span class="number">4.9</span>-<span class="number">2014.09</span>_linux/bin/arm-linux-gnueabihf-g++ -lts</span><br><span class="line"><span class="attr">QMAKE_LINK</span>       = /opt/gcc-linaro-arm-linux-gnueabihf-<span class="number">4.9</span>-<span class="number">2014.09</span>_linux/bin/arm-linux-gnueabihf-g++ -lts</span><br><span class="line"><span class="attr">QMAKE_LINK_SHLIB</span> = /opt/gcc-linaro-arm-linux-gnueabihf-<span class="number">4.9</span>-<span class="number">2014.09</span>_linux/bin/arm-linux-gnueabihf-g++ -lts</span><br><span class="line"></span><br><span class="line"><span class="comment"># modifications to linux.conf</span></span><br><span class="line"><span class="attr">QMAKE_AR</span>      = /opt/gcc-linaro-arm-linux-gnueabihf-<span class="number">4.9</span>-<span class="number">2014.09</span>_linux/bin/arm-linux-gnueabihf-ar cqs</span><br><span class="line"><span class="attr">QMAKE_OBJCOPY</span> = /opt/gcc-linaro-arm-linux-gnueabihf-<span class="number">4.9</span>-<span class="number">2014.09</span>_linux/bin/arm-linux-gnueabihf-objcopy</span><br><span class="line"><span class="attr">QMAKE_NM</span>      = /opt/gcc-linaro-arm-linux-gnueabihf-<span class="number">4.9</span>-<span class="number">2014.09</span>_linux/bin/arm-linux-gnueabihf-nm -P</span><br><span class="line"><span class="attr">QMAKE_STRIP</span>   = /opt/gcc-linaro-arm-linux-gnueabihf-<span class="number">4.9</span>-<span class="number">2014.09</span>_linux/bin/arm-linux-gnueabihf-strip</span><br><span class="line">load(qt_config)</span><br></pre></td></tr></table></figure></li><li><p>创建<code>autoConfig.sh</code>文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi ~/qt-5.9.6-source/qt-everywhere-opensource-src-5.9.6/autoConfig.sh</span><br></pre></td></tr></table></figure><p><code>autoConfig.sh</code>内容：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">./configure \</span><br><span class="line">    -prefix /opt/qt-5.9.6 \</span><br><span class="line">    -v \</span><br><span class="line">    -confirm-license \</span><br><span class="line">    -opensource \</span><br><span class="line">    -release \</span><br><span class="line">    -make libs \</span><br><span class="line">    -xplatform linux-arm-gnueabi-g++ \</span><br><span class="line">    -optimized-qmake \</span><br><span class="line">    -qt-libjpeg \</span><br><span class="line">    -qt-libpng \</span><br><span class="line">    -qt-zlib -tslib \</span><br><span class="line">    -no-opengl -no-sse2 -no-openssl -no-cups -no-glib -no-xcb \</span><br><span class="line">    -no-separate-debug-info -nomake examples \</span><br><span class="line">    -nomake tools -nomake tests -no-iconv -no-dbus \</span><br><span class="line">    -I /opt/tslib/include \</span><br><span class="line">    -L /opt/tslib/lib \</span><br><span class="line">    -recheck-all</span><br></pre></td></tr></table></figure></li><li><p>编译QT</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./autoConfig.sh &amp;&amp; make -j4 &amp;&amp; make install</span><br></pre></td></tr></table></figure><p><em>编译后的qt库放置与/opt目录下</em></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;h3 id=&quot;下载软件&quot;&gt;&lt;a href=&quot;#下载软件&quot; class=&quot;headerlink&quot; title=&quot;下载软件&quot;&gt;&lt;/a&gt;下载软件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;下载相应的触摸屏库&lt;code&gt;tslib&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;下载&lt;code&gt;linaro&lt;/code&gt;交叉编译工具链:&lt;a href=&quot;http://releases.linaro.org/components/toolchain/binaries/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Linaro Releases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;下载QT源码：&lt;a href=&quot;https://download.qt.io/archive/qt/5.9/5.9.6/single/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Index of /archive/qt/5.9/5.9.6/single&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件名&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;gcc-linaro-arm-linux-gnueabihf-4.9-2014.09_linux.tar.bz2&lt;/td&gt;
&lt;td&gt;交叉编译工具链&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tslib.tar.bz2&lt;/td&gt;
&lt;td&gt;触摸屏库&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;qt-everywhere-opensource-src-5.9.6.tar.xz&lt;/td&gt;
&lt;td&gt;qt5.9.6源码&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.yaronzz.com/categories/code/"/>
    
    
      <category term="qt" scheme="https://www.yaronzz.com/tags/qt/"/>
    
      <category term="arm" scheme="https://www.yaronzz.com/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>Qt-Vnc远程</title>
    <link href="https://www.yaronzz.com/post/qt_vnc/"/>
    <id>https://www.yaronzz.com/post/qt_vnc/</id>
    <published>2021-12-23T01:03:30.000Z</published>
    <updated>2022-05-11T08:07:07.245Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="VNC简介"><a href="#VNC简介" class="headerlink" title="VNC简介"></a>VNC简介</h2><p>VNC(Virtual Network Computing)是基于RFB（Remote Frame Buffer）协议的远程系统，C/S端口默认为5900，B/S端口默认为5800。</p><p>RFB (远程帧缓存) 是一个远程图形用户的简单协议，工作在帧缓存级别上，其传输的是像素数据是以XY为起点的方框数据，通过矩形图形数据组进行帧缓存的更新。另外更新是由客户端通过命令驱动的，也就是说更新只是服务器在响应客户端的请求时发生的，如果网络较差时，有些帧的缓存会忽略，这样能减少客户端对网络和绘制速度的要求。</p><a id="more"></a><p>远程桌面协议对比：</p><table><thead><tr><th></th><th>SPICE</th><th>VNC</th><th>RDP</th></tr></thead><tbody><tr><td>BIOS屏幕显示</td><td>能</td><td>能</td><td>不能</td></tr><tr><td>全彩支持</td><td>能</td><td>能</td><td>能</td></tr><tr><td>更改分辨率</td><td>能</td><td>能</td><td>能</td></tr><tr><td>多显示器</td><td>多显示器支持（高达4画面）</td><td>只有一个屏幕</td><td>多显示器支持</td></tr><tr><td>图像传输</td><td>图像和图形传输</td><td>图像传输</td><td>图像和图形传输</td></tr><tr><td>视频播放支持</td><td>GPU加速支持</td><td>不能</td><td>GPU加速支持</td></tr><tr><td>音频传输</td><td>双向语音可以控制</td><td>不能</td><td>双向语音可以控制</td></tr><tr><td>鼠标控制</td><td>客户端服务器都可以控制</td><td>服务器端控制</td><td>服务器端控制</td></tr></tbody></table><p>VNC作为一种远程桌面协议，常常用在嵌入式开发中，在嵌入式设备上运行vnc服务程序，即可在PC端远程控制。</p><h2 id="QT环境要求"><a href="#QT环境要求" class="headerlink" title="QT环境要求"></a>QT环境要求</h2><ol><li>QT版本需要<code>5.8</code>以上，可以下载相应版本的源码包，比如<a href="https://download.qt.io/archive/qt/5.9/5.9.6/single/" target="_blank" rel="noopener">5.9.6.zip</a>，解压之后，在<code>qtbase/src/plugins/platforms</code>下可以看见有<code>vnc</code>的源码</li></ol><p><img src="https://i.loli.net/2021/11/18/J6a4LokphVfqA9U.png" alt="image-20211118090352762"></p><ol start="2"><li>检查qt库安装目录下插件<code>plugins</code>文件夹中<code>platforms</code>目录是否有vnc动态库<code>libqvnc.so</code></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ls /usr/lib/qt5.8/plugins/platforms/</span></span><br><span class="line">libqeglfs.so       libqminimal.so     libqoffscreen.so</span><br><span class="line">libqlinuxfb.so     libqminimalegl.so  libqvnc.so</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>QT提供的VNC服务比较简单，只支持一些基本的功能，另外老版本的VNC中也有一些BUG可能会造成崩溃，所以最好还是尽量使用新版本。</p><h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><h3 id="QT程序启动vnc服务"><a href="#QT程序启动vnc服务" class="headerlink" title="QT程序启动vnc服务"></a>QT程序启动vnc服务</h3><ol><li><p>方式1：通过设置环境变量，改变程序的启动方式</p><p>配置QT程序的启动的方式 <code>export QT_QPA_PLATFORM=vnc</code></p></li><li><p>方式2：启动程序时指定启动方式</p><p>启动参数<code>./test -platform vnc:size=800x600,port=12345</code></p><ul><li>size 分辨率</li><li>port 服务端口号（不加则默认为5900）</li></ul></li></ol><h3 id="使用VNC客户端"><a href="#使用VNC客户端" class="headerlink" title="使用VNC客户端"></a>使用VNC客户端</h3><p>市面上的VNC客户端有很多，常用的比如<a href="https://www.realvnc.com/en/connect/download/viewer/" target="_blank" rel="noopener">Realvnc</a>，另外也有很多开源的项目：</p><ul><li><a href="https://sourceforge.net/projects/tigervnc/files/stable/1.12.0/" target="_blank" rel="noopener">TigerVNC</a></li><li><a href="https://github.com/KangLin/RabbitRemoteControl" target="_blank" rel="noopener">RabbitRemoteControl</a></li></ul><p><strong>参考</strong></p><ul><li><a href="https://tools.ietf.org/html/rfc6143#section-7.7" target="_blank" rel="noopener">VNC PROTOCOL</a></li><li><a href="https://www.cnblogs.com/cnhk19/p/14948622.html" target="_blank" rel="noopener">远程桌面协议对比</a></li><li><a href="https://blog.csdn.net/tylz04/article/details/9181663" target="_blank" rel="noopener">RFB协议解析</a></li><li><a href="https://www.shuzhiduo.com/A/rV57QE6WzP/" target="_blank" rel="noopener">RFB协议具体通信说明</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;VNC简介&quot;&gt;&lt;a href=&quot;#VNC简介&quot; class=&quot;headerlink&quot; title=&quot;VNC简介&quot;&gt;&lt;/a&gt;VNC简介&lt;/h2&gt;&lt;p&gt;VNC(Virtual Network Computing)是基于RFB（Remote Frame Buffer）协议的远程系统，C/S端口默认为5900，B/S端口默认为5800。&lt;/p&gt;
&lt;p&gt;RFB (远程帧缓存) 是一个远程图形用户的简单协议，工作在帧缓存级别上，其传输的是像素数据是以XY为起点的方框数据，通过矩形图形数据组进行帧缓存的更新。另外更新是由客户端通过命令驱动的，也就是说更新只是服务器在响应客户端的请求时发生的，如果网络较差时，有些帧的缓存会忽略，这样能减少客户端对网络和绘制速度的要求。&lt;/p&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.yaronzz.com/categories/code/"/>
    
    
      <category term="qt" scheme="https://www.yaronzz.com/tags/qt/"/>
    
      <category term="vnc" scheme="https://www.yaronzz.com/tags/vnc/"/>
    
      <category term="arm" scheme="https://www.yaronzz.com/tags/arm/"/>
    
  </entry>
  
  <entry>
    <title>UDP组播的说明与使用</title>
    <link href="https://www.yaronzz.com/post/udp_membership/"/>
    <id>https://www.yaronzz.com/post/udp_membership/</id>
    <published>2021-12-21T04:00:33.000Z</published>
    <updated>2022-05-11T08:07:07.206Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>网络通讯中，数据传输方式有：单播，广播和组播。单播是一对一的通信，广播则是对网络中所有主机进行通信。在需要对网络中某些主机进行通信时，单播会多次重复发送数据，广播则会造成资源浪费与安全问题。而组播是将信息发送到某个组播组，只有加入组播组的主机才能接收到消息，这种方式解决了单播情况下数据的重复拷贝及带宽的重复占用，也解决了广播方式下带宽资源的浪费。</p><p>组播中数据发送者和接收者之间是一对多点的连接方式，多个接收者加入同一个组播组，共享同一个IP地址，同时组播组中的成员是动态的，某个成员的加入和退出并不影响原有的组播组。当网络中的某些用户需要特定数据时，组播数据发送者（即组播源）仅发送一次数据，借助组播路由协议为组播数据包建立组播分发树，被传递的数据到达距离用户端尽可能近的节点后才开始复制和分发。</p><a id="more"></a><h3 id="组播地址"><a href="#组播地址" class="headerlink" title="组播地址"></a>组播地址</h3><p>组播组可以是永久的也可以是临时的。组播组地址中，有一部分由官方分配的，称为永久组播组。永久组播组保持不变的是它的ip地址，组中的成员构成可以发生变化。永久组播组中成员的数量都可以是任意的，甚至可以为零。那些没有保留下来供永久组播组使用的ip组播地址，可以被临时组播组利用。</p><p><code>224.0.0.0～224.0.0.255</code>为预留的组播地址（永久组地址），地址224.0.0.0保留不做分配，其它地址供路由协议使用；<br><code>224.0.1.0～224.0.1.255</code>是公用组播地址，可以用于Internet；<br><code>224.0.2.0～238.255.255.255</code>为用户可用的组播地址（临时组地址），全网范围内有效；<br><code>239.0.0.0～239.255.255.255</code>为本地管理组播地址，仅在特定的本地范围内有效。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="配置流程"><a href="#配置流程" class="headerlink" title="配置流程"></a>配置流程</h3><ol><li><p>创建套接字</p><p>  由于UDP与TCP都是全双工的，所以可以使用同一个套接字进行同时收发操作。</p>  <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UDP_MCAST_PORT 37102        <span class="comment">//组播端口</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UDP_MCAST_ADDR <span class="meta-string">"224.0.1.88"</span> <span class="comment">//组播地址</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> socket = socket(AF_INET,SOCK_DGRAM,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (socket &lt;= <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>设置端口复用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> opt = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (setsockopt(socket, SOL_SOCKET, SO_REUSEADDR ,(<span class="keyword">char</span>*)&amp;opt, <span class="keyword">sizeof</span>(opt)) &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure></li><li><p>绑定组播端口</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addr</span>;</span></span><br><span class="line">addr.sin_family = AF_INET;</span><br><span class="line">addr.sin_port = htons(UDP_MCAST_PORT);</span><br><span class="line">addr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (bind(socket, (struct sockaddr*)&amp;addr, <span class="keyword">sizeof</span>(addr)) &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure></li><li><p>加入组播</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ip_mreq</span> <span class="title">mreq</span>;</span></span><br><span class="line">mreq.imr_multiaddr.s_addr = inet_addr(UDP_MCAST_ADDR);</span><br><span class="line">mreq.imr_interface.s_addr = htonl(INADDR_ANY);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (setsockopt(socket, IPPROTO_IP, IP_ADD_MEMBERSHIP, (<span class="keyword">char</span>*)&amp;mreq, <span class="keyword">sizeof</span>(mreq)) &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure></li><li><p>发送与接收</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发送</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">addrSrv</span>;</span></span><br><span class="line">addrSrv.sin_family=AF_INET;</span><br><span class="line">addrSrv.sin_addr.s_addr = inet_addr(UDP_MCAST_ADDR);</span><br><span class="line">addrSrv.sin_port=htons(UDP_MCAST_PORT);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sendto(socket, data, dataLen, <span class="number">0</span>, (struct sockaddr *)&amp;addrSrv,<span class="keyword">sizeof</span>(addrSrv)) &gt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">group_addr</span>;</span></span><br><span class="line"><span class="keyword">socklen_t</span> addr_len = <span class="keyword">sizeof</span>(group_addr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> len = recvfrom(socket, buff, buffLen, <span class="number">0</span>, (struct sockaddr *) &amp;group_addr, (<span class="keyword">int</span> *)&amp;addr_len);</span><br><span class="line">recvIP = inet_ntoa(group_addr.sin_addr);</span><br><span class="line">recvPort = group_addr.sin_port;</span><br></pre></td></tr></table></figure></li></ol><h3 id="多网卡配置流程"><a href="#多网卡配置流程" class="headerlink" title="多网卡配置流程"></a>多网卡配置流程</h3><p>多网卡组播需要在加入组播时指定本地IP地址，并且需要在最后多加一步指定组播的出口网卡：</p><ol><li><p>加入组播</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ip_mreq</span> <span class="title">mreq</span>;</span></span><br><span class="line">mreq.imr_multiaddr.s_addr = inet_addr(UDP_MCAST_ADDR);</span><br><span class="line">mreq.imr_interface.s_addr = htonl(INADDR_ANY);</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定接口接收组播信息</span></span><br><span class="line">mreq.imr_interface.s_addr = inet_addr(<span class="built_in">localIP</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (setsockopt(socket, IPPROTO_IP, IP_ADD_MEMBERSHIP, (<span class="keyword">char</span>*)&amp;mreq, <span class="keyword">sizeof</span>(mreq)) &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure></li><li><p>指定组播出口网卡</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">addr</span>;</span></span><br><span class="line"><span class="built_in">memset</span>(&amp;addr, <span class="number">0</span>, <span class="keyword">sizeof</span>(struct in_addr));</span><br><span class="line"></span><br><span class="line">addr.s_addr=inet_addr(<span class="built_in">localIP</span>);</span><br><span class="line"><span class="keyword">if</span> (setsockopt(socket, IPPROTO_IP, IP_MULTICAST_IF, (<span class="keyword">char</span>*)&amp;addr, <span class="keyword">sizeof</span>(addr)) &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://blog.csdn.net/wangzhen_csdn/article/details/76467811" target="_blank" rel="noopener">IP地址划分、组播地址、公有IP、私有IP</a></p></li><li><p><a href="https://blog.csdn.net/weixin_41482303/article/details/88132412" target="_blank" rel="noopener">组播基础</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;h3 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h3&gt;&lt;p&gt;网络通讯中，数据传输方式有：单播，广播和组播。单播是一对一的通信，广播则是对网络中所有主机进行通信。在需要对网络中某些主机进行通信时，单播会多次重复发送数据，广播则会造成资源浪费与安全问题。而组播是将信息发送到某个组播组，只有加入组播组的主机才能接收到消息，这种方式解决了单播情况下数据的重复拷贝及带宽的重复占用，也解决了广播方式下带宽资源的浪费。&lt;/p&gt;
&lt;p&gt;组播中数据发送者和接收者之间是一对多点的连接方式，多个接收者加入同一个组播组，共享同一个IP地址，同时组播组中的成员是动态的，某个成员的加入和退出并不影响原有的组播组。当网络中的某些用户需要特定数据时，组播数据发送者（即组播源）仅发送一次数据，借助组播路由协议为组播数据包建立组播分发树，被传递的数据到达距离用户端尽可能近的节点后才开始复制和分发。&lt;/p&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.yaronzz.com/categories/code/"/>
    
    
      <category term="cpp" scheme="https://www.yaronzz.com/tags/cpp/"/>
    
      <category term="udp" scheme="https://www.yaronzz.com/tags/udp/"/>
    
  </entry>
  
  <entry>
    <title>WSL系统安装与使用</title>
    <link href="https://www.yaronzz.com/post/wsl_system_install/"/>
    <id>https://www.yaronzz.com/post/wsl_system_install/</id>
    <published>2021-12-08T02:47:20.000Z</published>
    <updated>2022-06-07T01:58:06.971Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>WSL是适用于 Linux 的 Windows 子系统，可让开发人员按原样运行 GNU/Linux 环境 - 包括大多数命令行工具、实用工具和应用程序 - 且不会产生传统虚拟机或双启动设置开销。</p><p><a href="https://docs.microsoft.com/zh-cn/windows/wsl/" target="_blank" rel="noopener">官方教程</a></p><a id="more"></a><h2 id="启用子系统"><a href="#启用子系统" class="headerlink" title="启用子系统"></a>启用子系统</h2><ul><li><p>控制面板 -&gt; 程序和功能 -&gt; 启用或关闭Windows功能 -&gt; 勾选 <code>适用于Linux的Windows子系统</code></p></li><li><p>控制面板 -&gt; 程序和功能 -&gt; 启用或关闭Windows功能 -&gt; 勾选 <code>虚拟机平台</code></p></li></ul><p><img src="https://s2.loli.net/2021/12/08/p3jtFmLgwvfnshu.png" alt="image-20211208114609489"></p><h2 id="安装Ubuntu"><a href="#安装Ubuntu" class="headerlink" title="安装Ubuntu"></a>安装Ubuntu</h2><ol><li><p>下载<a href="https://wsldownload.azureedge.net/Ubuntu_2004.2020.424.0_x64.appx" target="_blank" rel="noopener">Ubuntu20.04系统</a>，可以将系统下载到其他盘上</p></li><li><p>修改文件后缀名：<code>Ubuntu20.04.appx --&gt; Ubuntu.zip</code>，并解压</p></li><li><p>双击exe文件，输入用户名与密码即可</p><p><img src="https://s2.loli.net/2021/12/08/AUDceGguX1ZH7bs.png" alt="image-20211208114959128"></p></li><li><p>使用默认登录用户为root</p><ul><li>打开管理员模式下的cmd，输入<code>./ubuntu2004.exe config --default-user root</code></li><li>输入 <code>net stop lxssmanager</code>重启wsl即可</li></ul></li></ol><h2 id="WSL配置与使用"><a href="#WSL配置与使用" class="headerlink" title="WSL配置与使用"></a>WSL配置与使用</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#更新</span></span><br><span class="line">wsl --update</span><br><span class="line"><span class="comment">#查询已安装的子系统</span></span><br><span class="line">wsl -l -v</span><br><span class="line"><span class="comment">#设置默认系统为wsl2</span></span><br><span class="line">wsl --<span class="built_in">set</span>-default-version 2</span><br><span class="line"><span class="comment">#将已安装的子系统升级到wsl2</span></span><br><span class="line">wsl --<span class="built_in">set</span>-version Ubuntu 2</span><br><span class="line"><span class="comment">#删除子系统</span></span><br><span class="line">wslconfig /unregister xxx</span><br></pre></td></tr></table></figure><ul><li>WSL2需要保证Winows版本不低于<code>19041</code></li><li>windwos下访问子系统目录，在文件夹路径栏上输入：<code>\\wsl$</code></li><li>WSL1和WSL2的区别</li></ul><p><img src="https://s2.loli.net/2021/12/09/QNCXqZuv8siFmRV.png" alt="image-20211209090047432"></p><ul><li>WSL2与VMware和VirtualBox的共存：需要VMware15.5.5+，VirtualBox 6+才能打开</li></ul><h2 id="32位交叉编译环境配置"><a href="#32位交叉编译环境配置" class="headerlink" title="32位交叉编译环境配置"></a>32位交叉编译环境配置</h2><ul><li>只支持WSL2版本</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg --add-architecture i386</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install libc6:i386 libncurses5:i386 libstdc++6:i386 zlib1g:i386 -y</span><br><span class="line">sudo apt-get install g++ -y</span><br></pre></td></tr></table></figure><h2 id="运行图形界面"><a href="#运行图形界面" class="headerlink" title="运行图形界面"></a>运行图形界面</h2><h3 id="window内核版本为21"><a href="#window内核版本为21" class="headerlink" title="window内核版本为21+"></a>window内核版本为21+</h3><p>先在windows更新WSL：<code>wsl --update</code>， 再在linux安装界面程序：<code>apt-get install gedit</code>，win10 21+系统内置了WSLG（GUI）功能，可以在Window菜单发现多了一个Ubuntu目录，其中显示了已经安装的界面程序，直接点击即可运行：</p><p><img src="https://s2.loli.net/2021/12/16/cmMN4Rrv3qiQ2y5.png" alt="image-20211216103137449"></p><h3 id="内核版本不支持"><a href="#内核版本不支持" class="headerlink" title="内核版本不支持"></a>内核版本不支持</h3><ol><li><p>安装<a href="https://sourceforge.net/projects/vcxsrv/" target="_blank" rel="noopener">VcXsrv Windows X Server download | SourceForge.net</a></p></li><li><p>打开并配置VcXsrv</p><p><img src="https://s2.loli.net/2021/12/16/YxVTGItse5mULNA.png" alt="image-20211216103507780"></p><p><img src="https://s2.loli.net/2021/12/16/DyLqijtZauOf2C7.png" alt="image-20211216103527258"></p><p><img src="https://s2.loli.net/2021/12/16/wZUgAy9H452sRbo.png" alt="image-20211216103540971"></p><ol start="3"><li><p>linux设置显示的服务端</p><ul><li>打开bashrc文件：<code>vi ~/.bashrc</code></li><li>在文件最后添加两行并保存：</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#下面的IP地址为window的ip</span></span><br><span class="line"><span class="built_in">export</span> DISPLAY=192.168.0.218:0</span><br><span class="line"><span class="built_in">export</span> LIBGL_ALWAYS_INDIRECT=1</span><br></pre></td></tr></table></figure><ul><li>刷新配置：<code>source .bashrc</code></li><li>测试界面软件：<code>gedit test.ini</code></li></ul></li></ol></li></ol><h2 id="开启桥接网络"><a href="#开启桥接网络" class="headerlink" title="开启桥接网络"></a>开启桥接网络</h2><h3 id="配置Hyper-V"><a href="#配置Hyper-V" class="headerlink" title="配置Hyper-V"></a>配置Hyper-V</h3><ol><li>打开<code>Hyper-V</code>管理器，点击虚拟交换机管理器</li><li>选择<code>WSL</code>，连接类型选择外部网络，然后点击应用即可</li></ol><p><img src="https://s2.loli.net/2022/05/26/huKEUvwn9oNAGcZ.png" alt="image-20220526101518816"></p><p><img src="https://s2.loli.net/2022/05/26/lEPFXjNt8RsMLBv.png" alt="image-20220526101931101"></p><h3 id="WLS配置"><a href="#WLS配置" class="headerlink" title="WLS配置"></a>WLS配置</h3><ol><li><p>设置IP</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">静态IP</span></span><br><span class="line">ip addr flush dev eth0</span><br><span class="line">ip addr add 192.168.0.155/23 broadcast 192.168.1.255 dev eth0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">动态IP</span></span><br><span class="line">apt-get install udhcpc</span><br><span class="line">udhcpc</span><br></pre></td></tr></table></figure></li><li><p>设置路由</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip route add 0.0.0.0/0 via 192.168.1.1 dev eth0</span><br></pre></td></tr></table></figure></li><li><p>设置DNS解析</p><ul><li>打开wsl配置 <code>vi /etc/wsl.conf</code>，输入</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[network]</span></span><br><span class="line"><span class="attr">generateResolvConf</span> = <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li>打开dns配置 <code>/etc/resolv.conf</code>，输入</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nameserver 192.168.1.1</span><br><span class="line">nameserver 114.114.114.114</span><br><span class="line">nameserver 223.5.5.5</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;WSL是适用于 Linux 的 Windows 子系统，可让开发人员按原样运行 GNU/Linux 环境 - 包括大多数命令行工具、实用工具和应用程序 - 且不会产生传统虚拟机或双启动设置开销。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/windows/wsl/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方教程&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="软件" scheme="https://www.yaronzz.com/categories/%E8%BD%AF%E4%BB%B6/"/>
    
    
      <category term="windows" scheme="https://www.yaronzz.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>Qt配置与常见问题</title>
    <link href="https://www.yaronzz.com/post/qt_note/"/>
    <id>https://www.yaronzz.com/post/qt_note/</id>
    <published>2021-10-22T02:40:33.000Z</published>
    <updated>2022-05-11T08:07:07.251Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>Qt是一个1991年由Qt Company开发的跨平台C++图形用户界面应用程序开发框架。它既可以开发GUI程序，也可用于开发非GUI程序，比如控制台工具和服务器。Qt是面向对象的框架，使用特殊的代码生成扩展（称为元对象编译器(Meta Object Compiler, moc)）以及一些宏，Qt很容易扩展，并且允许真正地组件编程。</p></blockquote><a id="more"></a><h2 id="QT配置"><a href="#QT配置" class="headerlink" title="QT配置"></a>QT配置</h2><h3 id="设置代码片段"><a href="#设置代码片段" class="headerlink" title="设置代码片段"></a>设置代码片段</h3><p>配置路径：<code>工具-&gt;选项-&gt;文本编辑器-&gt;片段</code> </p><ul><li><p>文件头说明</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @brief $$</span><br><span class="line"> * @author yaronhuang@foxmail.com</span><br><span class="line"> * @date %&#123;CurrentDate:yyyy/MM/dd&#125;</span><br><span class="line"> * @note </span><br><span class="line"> */</span><br></pre></td></tr></table></figure></li><li><p>函数注释</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @brief $$</span><br><span class="line"> * @param string</span><br><span class="line"> * @return void</span><br><span class="line"> */</span><br></pre></td></tr></table></figure></li></ul><h3 id="多个pro项目管理"><a href="#多个pro项目管理" class="headerlink" title="多个pro项目管理"></a>多个pro项目管理</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATE = subdirs</span><br><span class="line">CONFIG += ordered  #顺序编译</span><br><span class="line">SUBDIRS += pro0\</span><br><span class="line">pro1\</span><br><span class="line">app</span><br></pre></td></tr></table></figure><h3 id="VS打开QT项目"><a href="#VS打开QT项目" class="headerlink" title="VS打开QT项目"></a>VS打开QT项目</h3><p>在<code>C/C++</code>中添加<code>/utf-8</code>支持 </p><p><img src="https://s2.loli.net/2022/04/29/TrkqspylI5dVfnQ.png" alt="image-20220429142221837"></p><h3 id="库编译与引用"><a href="#库编译与引用" class="headerlink" title="库编译与引用"></a>库编译与引用</h3><p>库分为动态库和静态库，通过文件名后缀可以知道库的类型：<code>so、dll(动态库)</code>;<code>a、lib(静态库)</code>。</p><p>在windows平台下使用QT编译，库的后缀为dll和a。</p><h4 id="编译库"><a href="#编译库" class="headerlink" title="编译库"></a>编译库</h4><ol><li><p>静态库配置：</p><p>在pro文件中加入以下语句即可：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATE = lib      #生成库</span><br><span class="line">CONFIG += staticlib #类型为静态库</span><br></pre></td></tr></table></figure></li><li><p>动态库配置：</p><p>在pro文件中加入以下语句：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TEMPLATE = lib      #生成库</span><br><span class="line">DEFINES += BIL_EXPORT</span><br></pre></td></tr></table></figure><p>提供给外部使用的类需要增加导出前缀：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtCore/qglobal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> BIL_EXPORT</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> LUIP_SHARE Q_DECL_EXPORT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> LUIP_SHARE Q_DECL_IMPORT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LUIP_SHARE</span> <span class="title">SumObj</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    SumObj();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">run</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>生成的动态库目录下会出现dll和a文件，其中a文件是没用的，它并不能用于静态库，因为它是不完整的，可以看出a文件的体积也很小。</p></li></ol><h4 id="引用库"><a href="#引用库" class="headerlink" title="引用库"></a>引用库</h4><p>正常的库名格式为<code>libxxxx.a</code>指定时只需要xxxx即可，如<code>libtest.a</code>,则为 <code>-ltest</code>。</p><p>同时有动态库和静态库，那么优先链接<code>.so</code>，如果想要强制使用静态库，那么写成<code>-static -lxxxx</code>即可。不过QT编译器好像也会通过类名是否添加导入关键字<code>Q_DECL_IMPORT</code>来确定是链接动态库还是静态库。</p><p>在pro文件中加入以下语句：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LIBS   += -L$$PWD/../bin/ -ltest #引用bin目录下的test库</span><br></pre></td></tr></table></figure><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="调用SetObjectName无效"><a href="#调用SetObjectName无效" class="headerlink" title="调用SetObjectName无效"></a>调用<code>SetObjectName</code>无效</h3><p>自定义界面时，界面类继承QWidget，然后调用<code>setObjectName()</code>设置样式，但并没有起作用，解决方法如下：</p><ul><li><p>方法1：设置<code>WA_StyledBackground</code>属性<code>this-&gt;setAttribute(Qt::WA_StyledBackground);</code></p></li><li><p>方法2：将<code>QWidget</code>改成<code>QFrame</code></p></li><li><p>方法3：重写<code>paintEvent</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ClassName::paintEvent</span><span class="params">(QPaintEvent *)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  QStyleOption opt;</span><br><span class="line">  opt.init(<span class="keyword">this</span>);</span><br><span class="line">  <span class="function">QPainter <span class="title">p</span><span class="params">(<span class="keyword">this</span>)</span></span>;</span><br><span class="line">  style()-&gt;drawPrimitive(QStyle::PE_Widget, &amp;opt, &amp;p, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="编译异常multiple-definition-of-qMain-int-char"><a href="#编译异常multiple-definition-of-qMain-int-char" class="headerlink" title="编译异常multiple definition of qMain(int, char**)"></a>编译异常<code>multiple definition of qMain(int, char**)</code></h3><p>一般是重复定义main函数了，可以全局搜索<code>main()</code>，或者检查pro文件中是否有重复添加的cpp和h，有时给工程中乱添加文件时会导致这种情况。</p><h3 id="release版本编译，执行文件很大"><a href="#release版本编译，执行文件很大" class="headerlink" title="release版本编译，执行文件很大"></a>release版本编译，执行文件很大</h3><ol><li><p>检查qamke构建配置是否为debug</p><p><img src="https://s2.loli.net/2022/05/10/ELzKwceIYdpxouZ.png" alt="image-20220510100621460"></p></li><li><p>检查pro文件是否有添加调试宏</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QMAKE_CXXFLAGS_RELEASE = $$QMAKE_CFLAGS_RELEASE_WITH_DEBUGINFO</span><br><span class="line">QMAKE_LFLAGS_RELEASE = $$QMAKE_LFLAGS_RELEASE_WITH_DEBUGINFO</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Qt是一个1991年由Qt Company开发的跨平台C++图形用户界面应用程序开发框架。它既可以开发GUI程序，也可用于开发非GUI程序，比如控制台工具和服务器。Qt是面向对象的框架，使用特殊的代码生成扩展（称为元对象编译器(Meta Object Compiler, moc)）以及一些宏，Qt很容易扩展，并且允许真正地组件编程。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.yaronzz.com/categories/code/"/>
    
    
      <category term="qt" scheme="https://www.yaronzz.com/tags/qt/"/>
    
  </entry>
  
  <entry>
    <title>Python笔记</title>
    <link href="https://www.yaronzz.com/post/python_note/"/>
    <id>https://www.yaronzz.com/post/python_note/</id>
    <published>2021-10-20T02:06:33.000Z</published>
    <updated>2022-05-27T02:59:44.479Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h2><ol><li>pip提速，使用国内源</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">清华源</span></span><br><span class="line">pip install xxx --upgrade -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line"><span class="meta">#</span><span class="bash">阿里云</span></span><br><span class="line">pip install xxx --upgrade -i http://mirrors.aliyun.com/pypi/simple/</span><br></pre></td></tr></table></figure><p>   永久修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">打开配置,windows下C:/Users/xxxx/pip/pip.ini</span></span><br><span class="line">vi ~/.pip/pip.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">输入以下内容</span></span><br><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">[install]</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure><ol start="2"><li>pip搜索</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install pip_search</span><br><span class="line">pip_search xxxx</span><br></pre></td></tr></table></figure><ol start="3"><li>文件服务器</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> python3</span></span><br><span class="line">python3 -m http.server</span><br><span class="line"><span class="meta">#</span><span class="bash"> python2</span></span><br><span class="line">python -m SimpleHTTPServer</span><br></pre></td></tr></table></figure><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><ol><li>判断类型</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用isinstance或type判断变量类型</span></span><br><span class="line"><span class="comment">#isinstance可判断父类，type不支持判断父类</span></span><br><span class="line">test = A()</span><br><span class="line">check = isinstance(test, A) <span class="comment">#True</span></span><br><span class="line">check = (type(test) == A)   <span class="comment">#True</span></span><br></pre></td></tr></table></figure><ol start="2"><li>运算</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数值的除法包含两个运算符：/ 返回一个浮点数，// 返回一个整数。</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">6</span></span><br><span class="line">c = a / b<span class="comment">#除法 1.66</span></span><br><span class="line">d = a // b<span class="comment">#整除 1</span></span><br><span class="line">e = a % b<span class="comment">#求模 4</span></span><br><span class="line">f = <span class="number">2</span> ** <span class="number">3</span>  <span class="comment">#求幂 8</span></span><br></pre></td></tr></table></figure><a id="more"></a><ol start="3"><li>取反</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; False</span><br><span class="line">b &#x3D; bool(1 - a)</span><br></pre></td></tr></table></figure><ol start="4"><li>整型int</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0b100</span> = <span class="number">4</span>   <span class="comment">#二进制</span></span><br><span class="line"><span class="number">0o100</span> = <span class="number">64</span>  <span class="comment">#八进制</span></span><br><span class="line"><span class="number">0x100</span> = <span class="number">256</span> <span class="comment">#十六进制</span></span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个由1到9的数字构成的列表</span></span><br><span class="line">items1 = [x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>)]</span><br><span class="line">print(items1)    <span class="comment"># [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个由'hello world'中除空格和元音字母外的字符构成的列表</span></span><br><span class="line">items2 = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">'hello world'</span> <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">' aeiou'</span>]</span><br><span class="line">print(items2)    <span class="comment"># ['h', 'l', 'l', 'w', 'r', 'l', 'd']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个由个两个字符串中字符的笛卡尔积构成的列表</span></span><br><span class="line">items3 = [x + y <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">'ABC'</span> <span class="keyword">for</span> y <span class="keyword">in</span> <span class="string">'12'</span>]</span><br><span class="line">print(items3)    <span class="comment"># ['A1', 'A2', 'B1', 'B2', 'C1', 'C2']</span></span><br></pre></td></tr></table></figure><h2 id="元祖tuple"><a href="#元祖tuple" class="headerlink" title="元祖tuple"></a>元祖tuple</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">1000</span></span><br><span class="line">i, j, *k = a</span><br><span class="line">print(i, j, k)          <span class="comment"># 1 10 [100, 1000]</span></span><br><span class="line">i, *j, k = a</span><br><span class="line">print(i, j, k)          <span class="comment"># 1 [10, 100] 1000</span></span><br><span class="line">*i, j, k = a</span><br><span class="line">print(i, j, k)          <span class="comment"># [1, 10] 100 1000</span></span><br><span class="line">*i, j = a</span><br><span class="line">print(i, j)             <span class="comment"># [1, 10, 100] 1000</span></span><br><span class="line">i, *j = a</span><br><span class="line">print(i, j)             <span class="comment"># 1 [10, 100, 1000]</span></span><br><span class="line">i, j, k, *l = a</span><br><span class="line">print(i, j, k, l)       <span class="comment"># 1 10 100 [1000]</span></span><br><span class="line">i, j, k, l, *m = a</span><br><span class="line">print(i, j, k, l, m)    <span class="comment"># 1 10 100 1000 []</span></span><br></pre></td></tr></table></figure><h2 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h2><p>Lambda匿名函数的格式为：<code>lambda 参数:表达式</code></p><ul><li>参数可以多个，中间以逗号隔开</li><li>表达式只有一个，省略return</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"><span class="comment">#使用lambda的形式为</span></span><br><span class="line">sum = <span class="keyword">lambda</span> x,y:x+y</span><br></pre></td></tr></table></figure><p>Lambda经常与map函数同时使用，用于处理列表数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#计算数组内元素平方，[1,9,36]</span></span><br><span class="line">list(map(<span class="keyword">lambda</span> x:x**<span class="number">2</span>, [<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>]))</span><br><span class="line"><span class="comment">#计算两组数组内元素之和，[3,7,11,15,19]</span></span><br><span class="line">list(map(<span class="keyword">lambda</span> x, y: x + y, [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>]))</span><br></pre></td></tr></table></figure><h2 id="函数装饰"><a href="#函数装饰" class="headerlink" title="函数装饰"></a>函数装饰</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">record_time</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        start = time.time()</span><br><span class="line">        result = func(*args, **kwargs)</span><br><span class="line">        end = time.time()</span><br><span class="line">        print(<span class="string">f'<span class="subst">&#123;func.__name__&#125;</span>执行时间: <span class="subst">&#123;end - start:<span class="number">.3</span>f&#125;</span>秒'</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@record_time</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(filename)</span>:</span></span><br><span class="line">    print(<span class="string">f'开始下载<span class="subst">&#123;filename&#125;</span>.'</span>)</span><br><span class="line">    time.sleep(random.randint(<span class="number">2</span>, <span class="number">6</span>))</span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;filename&#125;</span>下载完成.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@record_time</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload</span><span class="params">(filename)</span>:</span></span><br><span class="line">    print(<span class="string">f'开始上传<span class="subst">&#123;filename&#125;</span>.'</span>)</span><br><span class="line">    time.sleep(random.randint(<span class="number">4</span>, <span class="number">8</span>))</span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;filename&#125;</span>上传完成.'</span>)</span><br><span class="line"></span><br><span class="line">download(<span class="string">'MySQL从删库到跑路.avi'</span>)</span><br><span class="line">upload(<span class="string">'Python从入门到住院.pdf'</span>)</span><br></pre></td></tr></table></figure><h2 id="打包工具"><a href="#打包工具" class="headerlink" title="打包工具"></a>打包工具</h2><p><strong>pyinstaller</strong> 参数说明：</p><table><thead><tr><th>参数名</th><th>描述</th><th>说明</th></tr></thead><tbody><tr><td>–distpath</td><td>生成文件放在哪里</td><td>默认：当前目录的dist文件夹内</td></tr><tr><td>–workpath</td><td>生成过程中的中间文件放在哪里</td><td>默认：当前目录的build文件夹内</td></tr><tr><td>-y</td><td>如果dist文件夹内已经存在生成文件，则不询问用户，直接覆盖</td><td>默认：询问是否覆盖</td></tr><tr><td>-a</td><td>不包含unicode支持</td><td>默认：尽可能支持unicode</td></tr><tr><td>–clean</td><td>在本次编译开始时，清空上一次编译生成的各种文件</td><td>默认：不清除</td></tr><tr><td>-D</td><td>生成one-folder的程序（默认）</td><td>结果是一个目录，各种第三方依赖、资源和exe同时存储在该目录</td></tr><tr><td>-F</td><td>生成one-file的程序</td><td>结果是一个exe文件，所有的第三方依赖、资源和代码均被打包进该exe内</td></tr><tr><td>-specpath</td><td>指定.spec文件的存储路径</td><td>默认：当前目录</td></tr><tr><td>-n</td><td>生成的.exe文件和.spec的文件名</td><td></td></tr><tr><td>–add-data</td><td>打包额外资源</td><td>用法：pyinstaller main.py –add-data=src;dest。<br />windows以;分割，linux以:分割</td></tr><tr><td>–add-binary</td><td>打包额外的代码</td><td>用法：同–add-data。<br />用binary添加的文件，pyi会分析它引用的文件并把它们一同添加进来</td></tr><tr><td>-c</td><td>显示命令行窗口</td><td></td></tr><tr><td>-w</td><td>不显示命令行窗口</td><td></td></tr><tr><td>-i</td><td>为main.exe指定图标</td><td>pyinstaller -i beauty.ico main.py</td></tr><tr><td>–version-file</td><td>添加版本信息文件 (Windows特有的参数)</td><td>pyinstaller –version-file ver.txt</td></tr></tbody></table><h2 id="文件服务器"><a href="#文件服务器" class="headerlink" title="文件服务器"></a>文件服务器</h2><ul><li><p>python3 -m http.server</p></li><li><p>python -m SimpleHTTPServer</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装与使用&quot;&gt;&lt;a href=&quot;#安装与使用&quot; class=&quot;headerlink&quot; title=&quot;安装与使用&quot;&gt;&lt;/a&gt;安装与使用&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;pip提速，使用国内源&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;清华源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip install xxx --upgrade -i https://pypi.tuna.tsinghua.edu.cn/simple&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;阿里云&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip install xxx --upgrade -i http://mirrors.aliyun.com/pypi/simple/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;   永久修改：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;打开配置,windows下C:/Users/xxxx/pip/pip.ini&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vi ~/.pip/pip.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;输入以下内容&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[global]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;index-url = https://pypi.tuna.tsinghua.edu.cn/simple&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[install]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;trusted-host=mirrors.aliyun.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;pip搜索&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install pip_search&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pip_search xxxx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;文件服务器&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; python3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;python3 -m http.server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; python2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;python -m SimpleHTTPServer&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&quot;基本语法&quot;&gt;&lt;a href=&quot;#基本语法&quot; class=&quot;headerlink&quot; title=&quot;基本语法&quot;&gt;&lt;/a&gt;基本语法&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;判断类型&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#使用isinstance或type判断变量类型&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#isinstance可判断父类，type不支持判断父类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;test = A()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;check = isinstance(test, A) &lt;span class=&quot;comment&quot;&gt;#True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;check = (type(test) == A)   &lt;span class=&quot;comment&quot;&gt;#True&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;运算&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#数值的除法包含两个运算符：/ 返回一个浮点数，// 返回一个整数。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b = &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c = a / b	&lt;span class=&quot;comment&quot;&gt;#除法 1.66&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;d = a // b	&lt;span class=&quot;comment&quot;&gt;#整除 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;e = a % b	&lt;span class=&quot;comment&quot;&gt;#求模 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; ** &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;comment&quot;&gt;#求幂 8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.yaronzz.com/categories/code/"/>
    
    
      <category term="python" scheme="https://www.yaronzz.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>SQLite笔记</title>
    <link href="https://www.yaronzz.com/post/sqlite_note/"/>
    <id>https://www.yaronzz.com/post/sqlite_note/</id>
    <published>2021-10-18T03:06:33.000Z</published>
    <updated>2022-05-11T08:07:07.204Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code>SQLite</code> 是一款轻型的数据库，在嵌入式设备中应用十分广泛，它支持<code>Windows/Linux/Unix</code>等等主流的操作系统，其源代码不受版权限制。</p><p>优点：</p><ul><li>不需要安装与配置，以文件的形式作为数据库</li><li>轻量、小型，对嵌入式设备十分友好</li><li>事务是完全兼容 ACID 的，允许从多个进程或线程安全访问</li><li>支持 SQL92（SQL2）标准的大多数查询语言的功能</li></ul><p><code>SQLite</code>的命令包括：</p><table><thead><tr><th>分类</th><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>表操作</td><td>CREATE</td><td>创建表</td></tr><tr><td>表操作</td><td>ALTER</td><td>修改表</td></tr><tr><td>表操作</td><td>DROP</td><td>删除表</td></tr><tr><td>记录操作</td><td>INSERT</td><td>插入记录</td></tr><tr><td>记录操作</td><td>UPDATE</td><td>修改更新表记录</td></tr><tr><td>记录操作</td><td>DELETE</td><td>删除记录</td></tr><tr><td>检索</td><td>SELECT</td><td>查询记录</td></tr></tbody></table><a id="more"></a><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><h3 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h3><h4 id="创建和删除表"><a href="#创建和删除表" class="headerlink" title="创建和删除表"></a>创建和删除表</h4><p>创建格式：<code>CREATE TABLE IF NOT EXISTS 表名 (列名 类型)</code><br>删除格式：<code>DROP 表名</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS &quot;student&quot; (</span><br><span class="line">    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,</span><br><span class="line">    name VARCHAR(30) NOT NULL,</span><br><span class="line">    age FLOAT);</span><br></pre></td></tr></table></figure><h4 id="更新sqlite-sequence"><a href="#更新sqlite-sequence" class="headerlink" title="更新sqlite_sequence"></a>更新sqlite_sequence</h4><p>由于在Sqlite中使用自增长字段，引擎会自动产生一个<code>sqlite_sequence</code>表，用于记录每个表的自增长字段的已使用的最大值，所以要一起更新下。如果有没有设置自增长，则跳过此步骤。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE &quot;sqlite_sequence&quot; SET seq &#x3D; 3 WHERE name &#x3D; &#39;Student&#39;;</span><br></pre></td></tr></table></figure><h4 id="修改表名称"><a href="#修改表名称" class="headerlink" title="修改表名称"></a>修改表名称</h4><p>格式：<code>ALTER TABLE 旧表名 RENAME TO 新表名</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE or_sql_table RENAME TO new_table;</span><br></pre></td></tr></table></figure><h4 id="增加表字段"><a href="#增加表字段" class="headerlink" title="增加表字段"></a>增加表字段</h4><p>格式：<code>ALTER TABLE 表名 ADD COLUMN 列名 数据类型</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE new_table ADD COLUMN sex Text;</span><br></pre></td></tr></table></figure><h4 id="查询表结构"><a href="#查询表结构" class="headerlink" title="查询表结构"></a>查询表结构</h4><p>格式：<code>RAGMA TABLE_INFO (表名)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PRAGMA TABLE_INFO (new_table);</span><br></pre></td></tr></table></figure><h3 id="记录操作"><a href="#记录操作" class="headerlink" title="记录操作"></a>记录操作</h3><h4 id="插入和删除记录"><a href="#插入和删除记录" class="headerlink" title="插入和删除记录"></a>插入和删除记录</h4><p>插入格式：<code>INSERT INTO 表名 (列名1,列名2,...) VALUES (值1,值2,...)</code></p><p>删除格式：<code>DELETE FROM 表名</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO sutdent (name,age) VALUES (&#39;xiaoming&#39;,18);</span><br><span class="line">DELETE FROM student WHERE name &#x3D; &#39;xiaoming&#39;;</span><br></pre></td></tr></table></figure><h4 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h4><p>格式：<code>UPDATE 表名 SET 列名 = 列值 WHERE 条件</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE student SET age &#x3D; 18 WHERE name &#x3D; &#39;xiaoming&#39;;</span><br></pre></td></tr></table></figure><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><h3 id="LIKE与GLOB搜索"><a href="#LIKE与GLOB搜索" class="headerlink" title="LIKE与GLOB搜索"></a>LIKE与GLOB搜索</h3><p>格式：<code>SELECT 列名 FROM 表名 WHERE 列名 LIKE &quot;XXX&quot;</code>或<code>SELECT 列名 FROM 表名 WHERE 列名 GLOB &quot;XXX&quot;</code></p><ul><li><p>LIKE关键字通配符包括：<code>%：表示有N个字符</code>和 <code>_：表示有1个字符</code>，不区分大小写</p></li><li><p>GLOB关键字通配符包括：<code>*：表示有N个字符</code>和 <code>?：表示有1个字符</code>，区分大小写</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM student WHERE name LINK  &#39;%ming&#39;</span><br><span class="line">SELECT * FROM student WHERE name LINK  &#39;%min_&#39;</span><br></pre></td></tr></table></figure><h3 id="LIMIT和OFFSET翻页"><a href="#LIMIT和OFFSET翻页" class="headerlink" title="LIMIT和OFFSET翻页"></a>LIMIT和OFFSET翻页</h3><p>格式：<code>SELECT 列名 FROM 表名 LIMIT 数量 OFFSET 偏移;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 显示1到4的行</span><br><span class="line">SELECT * FROM student LIMIT 3 OFFSET 1</span><br></pre></td></tr></table></figure><h3 id="分组与排序"><a href="#分组与排序" class="headerlink" title="分组与排序"></a>分组与排序</h3><p>分组格式：<code>SELECT 列名 FROM 表名 WHERE 条件 GROUP BY 列名</code></p><p>排序格式：<code>SELECT 列名 FROM 表名 WHERE 条件 ORDER BY 列名 关键字;</code></p><p>关键字包括：</p><ul><li><code>ASC</code>：升序</li><li><code>DESC</code>：降序</li></ul><h3 id="唯一值"><a href="#唯一值" class="headerlink" title="唯一值"></a>唯一值</h3><p>格式：<code>SELECT DISTINCT 列名 FROM 表名</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 查询所有学生名</span><br><span class="line">SELECT DISTINCT name FROM student</span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ol><li><p>计数<code>COUNT</code></p></li><li><p>最大最小值<code>MAX\MIN</code></p></li><li><p>平均值<code>AVG</code></p></li><li><p>和<code>SUM</code></p></li><li><p>绝对值<code>ABS</code></p></li><li><p>获取字符串长度<code>LENGTH</code></p></li><li><p>转换大小写<code>UPPER\LOWER</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;SQLite&lt;/code&gt; 是一款轻型的数据库，在嵌入式设备中应用十分广泛，它支持&lt;code&gt;Windows/Linux/Unix&lt;/code&gt;等等主流的操作系统，其源代码不受版权限制。&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不需要安装与配置，以文件的形式作为数据库&lt;/li&gt;
&lt;li&gt;轻量、小型，对嵌入式设备十分友好&lt;/li&gt;
&lt;li&gt;事务是完全兼容 ACID 的，允许从多个进程或线程安全访问&lt;/li&gt;
&lt;li&gt;支持 SQL92（SQL2）标准的大多数查询语言的功能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;SQLite&lt;/code&gt;的命令包括：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;分类&lt;/th&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;表操作&lt;/td&gt;
&lt;td&gt;CREATE&lt;/td&gt;
&lt;td&gt;创建表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;表操作&lt;/td&gt;
&lt;td&gt;ALTER&lt;/td&gt;
&lt;td&gt;修改表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;表操作&lt;/td&gt;
&lt;td&gt;DROP&lt;/td&gt;
&lt;td&gt;删除表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;记录操作&lt;/td&gt;
&lt;td&gt;INSERT&lt;/td&gt;
&lt;td&gt;插入记录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;记录操作&lt;/td&gt;
&lt;td&gt;UPDATE&lt;/td&gt;
&lt;td&gt;修改更新表记录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;记录操作&lt;/td&gt;
&lt;td&gt;DELETE&lt;/td&gt;
&lt;td&gt;删除记录&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;检索&lt;/td&gt;
&lt;td&gt;SELECT&lt;/td&gt;
&lt;td&gt;查询记录&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.yaronzz.com/categories/code/"/>
    
    
      <category term="sqlite" scheme="https://www.yaronzz.com/tags/sqlite/"/>
    
  </entry>
  
  <entry>
    <title>Python字符串</title>
    <link href="https://www.yaronzz.com/post/python_string/"/>
    <id>https://www.yaronzz.com/post/python_string/</id>
    <published>2021-10-15T00:40:33.000Z</published>
    <updated>2022-05-11T08:07:07.275Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>字符串的索引是只读，不能修改，从左到右的索引以<code>0</code>开始，从右到左的索引以<code>-1</code>开始（因为<code>-0=0</code>程序无法识别左右）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test = <span class="string">'name'</span></span><br><span class="line">c1 = test[<span class="number">0</span>]  <span class="comment">#n</span></span><br><span class="line">c2 = test[<span class="number">-1</span>] <span class="comment">#e</span></span><br><span class="line">c3 = test[<span class="number">-2</span>] <span class="comment">#m</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="截取"><a href="#截取" class="headerlink" title="截取"></a>截取</h2><p>从字符串中获取子串，类似<code>substring</code>之类的功能，也是以索引来获取。</p><p>格式为：<code>字符串[头下标，尾下标]</code>，采用前闭后开的规则，表示截取到<code>尾下标</code>前一个字符，示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">test = <span class="string">'name'</span></span><br><span class="line">c1 = test[<span class="number">0</span>:<span class="number">-1</span>] <span class="comment">#nam</span></span><br><span class="line">c2 = test[<span class="number">0</span>:<span class="number">3</span>]  <span class="comment">#nam</span></span><br><span class="line">c3 = test[<span class="number">0</span>:]   <span class="comment">#name</span></span><br><span class="line">c4 = test[:<span class="number">3</span>]   <span class="comment">#nam</span></span><br></pre></td></tr></table></figure><h2 id="忽略转义字符"><a href="#忽略转义字符" class="headerlink" title="忽略转义字符"></a>忽略转义字符</h2><p>此用法最适合对<code>windows</code>的路径做处理，路径格式一般为<code>C:\user\file.txt</code>，在代码中需要对转义字符<code>\</code>做处理，操作起来比较繁琐。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#反斜杠可以用来转义，使用r可以让反斜杠不发生转义</span></span><br><span class="line">path = <span class="string">"C:\\user\\file.txt"</span></span><br><span class="line">path2 = <span class="string">r"C:\user\file.txt"</span></span><br><span class="line">test = <span class="string">r"this is a line with \n"</span></span><br></pre></td></tr></table></figure><h2 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h2><p>python提供多种拼接方式，常见如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#最终组成this is my name</span></span><br><span class="line">s1 = <span class="string">'my'</span></span><br><span class="line">s2 = <span class="string">'name'</span></span><br><span class="line"><span class="comment">#普通拼接</span></span><br><span class="line">s3 = <span class="string">"this is "</span> + s1 + <span class="string">" "</span> + s2</span><br><span class="line"><span class="comment">#format</span></span><br><span class="line">s3 = <span class="string">'this is &#123;&#125; &#123;&#125;'</span>.format(s1, s2)</span><br><span class="line">s3 = <span class="string">'this is &#123;1&#125; &#123;0&#125;'</span>.format(s2, s1)</span><br><span class="line"><span class="comment">#f关键字</span></span><br><span class="line">s3 = <span class="string">f'this is <span class="subst">&#123;s1&#125;</span> <span class="subst">&#123;s2&#125;</span>'</span></span><br><span class="line"><span class="comment">#占位符，保留1位小数点</span></span><br><span class="line">n1 = <span class="number">30.56</span></span><br><span class="line">s3 = <span class="string">f'<span class="subst">&#123;n1:<span class="number">.1</span>f&#125;</span>摄氏度'</span></span><br></pre></td></tr></table></figure><h2 id="打印"><a href="#打印" class="headerlink" title="打印"></a>打印</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test = <span class="string">'name'</span></span><br><span class="line">print(test)</span><br><span class="line">print(test, end=<span class="string">''</span>)<span class="comment">#不换行</span></span><br></pre></td></tr></table></figure><h2 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">'hello, world'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># center方法以宽度20将字符串居中并在两侧填充*</span></span><br><span class="line">print(s.center(<span class="number">20</span>, <span class="string">'*'</span>))  <span class="comment"># ****hello, world****</span></span><br><span class="line"><span class="comment"># rjust方法以宽度20将字符串右对齐并在左侧填充空格</span></span><br><span class="line">print(s.rjust(<span class="number">20</span>))        <span class="comment">#         hello, world</span></span><br><span class="line"><span class="comment"># ljust方法以宽度20将字符串左对齐并在右侧填充~</span></span><br><span class="line">print(s.ljust(<span class="number">20</span>, <span class="string">'~'</span>))   <span class="comment"># hello, world~~~~~~~~</span></span><br><span class="line"><span class="comment"># 在字符串的左侧补零</span></span><br><span class="line">print(<span class="string">'33'</span>.zfill(<span class="number">5</span>))      <span class="comment"># 00033</span></span><br><span class="line">print(<span class="string">'-33'</span>.zfill(<span class="number">5</span>))     <span class="comment"># -0033</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;索引&quot;&gt;&lt;a href=&quot;#索引&quot; class=&quot;headerlink&quot; title=&quot;索引&quot;&gt;&lt;/a&gt;索引&lt;/h2&gt;&lt;p&gt;字符串的索引是只读，不能修改，从左到右的索引以&lt;code&gt;0&lt;/code&gt;开始，从右到左的索引以&lt;code&gt;-1&lt;/code&gt;开始（因为&lt;code&gt;-0=0&lt;/code&gt;程序无法识别左右）&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;test = &lt;span class=&quot;string&quot;&gt;&#39;name&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c1 = test[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]  &lt;span class=&quot;comment&quot;&gt;#n&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c2 = test[&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;#e&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c3 = test[&lt;span class=&quot;number&quot;&gt;-2&lt;/span&gt;] &lt;span class=&quot;comment&quot;&gt;#m&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="code" scheme="https://www.yaronzz.com/categories/code/"/>
    
    
      <category term="python" scheme="https://www.yaronzz.com/tags/python/"/>
    
  </entry>
  
</feed>
