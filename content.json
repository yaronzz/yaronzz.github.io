{"meta":{"title":"YaornzZ","subtitle":null,"description":null,"author":"YaornzZ","url":"https://www.yaronzz.com","root":"/"},"pages":[{"title":"categories","date":"2020-03-11T03:31:54.000Z","updated":"2021-05-06T02:33:33.000Z","comments":true,"path":"categories/index.html","permalink":"https://www.yaronzz.com/categories/index.html","excerpt":"","text":""},{"title":"留言板","date":"2020-03-28T04:46:41.000Z","updated":"2021-05-06T02:33:33.000Z","comments":true,"path":"comment/index.html","permalink":"https://www.yaronzz.com/comment/index.html","excerpt":"","text":"var options = {\"narrow\":false,\"autoplay\":true,\"showlrc\":3,\"mode\":\"order\",\"mutex\":true,\"theme\":\"#e6d0b2\",\"preload\":\"metadata\",\"listmaxheight\":\"513px\",\"music\":[{\"title\":\"惠化洞/双门洞\",\"author\":\"口琴\",\"url\":\"http://music.163.com/song/media/outer/url?id=1299063318.mp3\",\"pic\":\"http://p4.music.126.net/nozXZuW3-EF61hgAYYy3IQ==/109951163633314108.jpg?param=200y200\"},{\"title\":\"没有理想的人不伤心\",\"author\":\"新裤子\",\"url\":\"http://music.163.com/song/media/outer/url?id=1305364671.mp3\",\"pic\":\"http://p1.music.126.net/GW7sRVT4sfm8P0kwkMlQlg==/109951163522768092.jpg?param=130y130\"},{\"title\":\"I Hate Myself For Loving You\",\"author\":\"Joan Jett & the Blackhearts\",\"url\":\"http://music.163.com/song/media/outer/url?id=4132379.mp3\",\"pic\":\"http://p2.music.126.net/rde3fYhAf7xUId0TDFSyBA==/2593747929926872.jpg?param=130y130\"}]}; options.element = document.getElementById(\"aplayer-JKBwEfQy\"); var ap = new APlayer(options); window.aplayers || (window.aplayers = []); window.aplayers.push(ap);"},{"title":"About","date":"2020-06-17T09:35:03.000Z","updated":"2022-03-24T06:31:33.425Z","comments":true,"path":"about/index.html","permalink":"https://www.yaronzz.com/about/index.html","excerpt":"","text":"🍀HELLO！𝗜’𝗺 𝗬𝗮𝗿𝗼𝗻𝘇𝘇！𝗜’𝗺 𝗮 𝘀𝗼𝗳𝘁𝘄𝗮𝗿𝗲 𝗲𝗻𝗴𝗶𝗻𝗲𝗲𝗿 👨‍💻 𝘄𝗵𝗼 𝗶𝘀 𝗽𝗮𝘀𝘀𝗶𝗼𝗻𝗮𝘁𝗲 𝗮𝗯𝗼𝘂𝘁 𝗺𝘂𝘀𝗶𝗰 𝗮𝗻𝗱 𝗼𝗽𝗲𝗻 𝘀𝗼𝘂𝗿𝗰𝗲. 🎨PROJECT！Tidal : It is an application that lets you download videos and tracks from Tidal.Tidal-PRO : It is an gui-application that lets you download videos and tracks from Tidal.AIGCJson : Only need two lines of code to convert between class and json.Suda : Import and export your playlist, support Spotify\\Tidal\\QQ Music\\Cloud Music. 📖LEARN!正则表达式30分钟入门教程Python-50-CorePython-100-Day"},{"title":"Link","date":"2020-03-28T03:15:57.000Z","updated":"2021-09-30T02:55:10.000Z","comments":true,"path":"link/index.html","permalink":"https://www.yaronzz.com/link/index.html","excerpt":"","text":"我的信息1234name: Yaronzzlink: https:&#x2F;&#x2F;yaronzz.com&#x2F;avatar: https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;yaronzz&#x2F;CDN@latest&#x2F;my&#x2F;avatar.jpgdescr: 生命不止，折腾不息 申请友链需知 申请前请先添加本站链接。 在下方留言，格式如上“我的信息”。 对于政治、涉黄、犯法相关的将不会通过。 本站会定期清理一些失效的网站或移除本人友链的网站。 留言之后可能不能第一时间回复，请多等一两天。"},{"title":"tags","date":"2020-03-11T03:19:48.000Z","updated":"2021-05-06T02:33:33.000Z","comments":false,"path":"tags/index.html","permalink":"https://www.yaronzz.com/tags/index.html","excerpt":"","text":""},{"title":"","date":"2022-06-20T03:21:11.691Z","updated":"2022-06-20T03:21:11.691Z","comments":true,"path":"google532a034159549e62.html","permalink":"https://www.yaronzz.com/google532a034159549e62.html","excerpt":"","text":"google-site-verification: google532a034159549e62.html"}],"posts":[{"title":"设计模式-工厂模式","slug":"3.工厂模式","date":"2022-06-09T02:55:33.000Z","updated":"2022-06-20T03:22:47.442Z","comments":true,"path":"post/design_patterns_factory/","link":"","permalink":"https://www.yaronzz.com/post/design_patterns_factory/","excerpt":"为了提高内聚和降低耦合，我们经常会定义一些抽象基类或接口，然后声明一个基类指针指向实际子类，来达到多态的目的。外部使用时，需要知道子类的具体名称才能创建相应的对象。 但这样的话，当子类的种类变多时，就会变得凌乱，于是就需要一个工厂类来进行管理，使用枚举等方式来选择要创建的子类。","text":"为了提高内聚和降低耦合，我们经常会定义一些抽象基类或接口，然后声明一个基类指针指向实际子类，来达到多态的目的。外部使用时，需要知道子类的具体名称才能创建相应的对象。 但这样的话，当子类的种类变多时，就会变得凌乱，于是就需要一个工厂类来进行管理，使用枚举等方式来选择要创建的子类。 说明工厂模式包含：简单工厂模式、工厂方法模式、抽象工厂模式。 简单工厂：定义对象创建接口，将其封到工厂类中，外部不需要知道具体的子类对象。 工厂方法：简单工厂升级，抽象工厂类的创建对象接口，让工厂子类决定如何创建对象。 抽象工厂： 工厂方法升级，工厂类中定义多个创建不同对象的接口，减少工厂类。 实现定义抽象基类Protocol，延伸子类TcpProtocol和UdpProtocol: 123456789101112class Protocol &#123; virtual string name() = 0;&#125;class TcpProtocol : public Protocol&#123; string name() &#123;return \"Tcp\"&#125;;&#125;class UdpProtocol : public Protocol&#123; string name() &#123;return \"Udp\"&#125;;&#125; 简单工厂唯一工厂类，一个产品抽象类，工厂类的创建方法依据入参判断并创建具体产品对象。 12345678910class Factory &#123; Protocol* createProtocol(ProtocolType type) &#123; if (type == ProtocolType::Tcp) return new TcpProtocol(); else if (type == ProtocolType::Udp) return new UdpProtocol(); &#125;&#125; 工厂方法多个工厂类，一个产品抽象类，利用多态创建不同的产品对象，避免了大量的if-else判断。 123456789101112class Factory &#123; virtual Protocol* createProtocol() = 0;&#125;class TcpFactory : public Factory&#123; Protocol* createProtocol(ProtocolType type) &#123; return new TcpProtocol(); &#125;&#125; 抽象工厂多个工厂类，多个产品抽象类，产品子类分组，同一个工厂实现类创建同组中的不同产品，减少了工厂子类的数量。 123456789101112131415161718192021222324252627282930class Modbus &#123; virtual string device() = 0;&#125;class NetModbus : public Modbus&#123; string device() &#123;return \"net\"&#125;;&#125;class SerialModbus : public Modbus&#123; string device() &#123;return \"serial\"&#125;;&#125;class Factory &#123; virtual Protocol* createProtocol() = 0; virtual Modbus* createModbus() = 0;&#125;class TcpFactory : public Factory&#123; Protocol* createProtocol() &#123; return new TcpProtocol(); &#125; Modbus* createModbus() &#123; return new NetProtocol(); &#125;&#125; 参考： 简单工厂模式、工厂方法模式和抽象工厂模式有何区别？ GoF 23 种设计模式 设计模式简介 | 菜鸟教程","categories":[{"name":"design_patterns","slug":"design-patterns","permalink":"https://www.yaronzz.com/categories/design-patterns/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"https://www.yaronzz.com/tags/cpp/"}]},{"title":"设计模式简介","slug":"1.设计模式简介","date":"2022-06-08T01:55:33.000Z","updated":"2022-06-20T03:22:47.405Z","comments":true,"path":"post/design_patterns/","link":"","permalink":"https://www.yaronzz.com/post/design_patterns/","excerpt":"","text":"设计模式常用于面向对象的开发语言，主要是为了重用代码、让代码更容易被他人理解、保证代码可靠性。 设计模式最早于1994年被GOF(GANG OF FOUR四人班)提出，他们合著了一本名为 《Design Patterns - Elements of Reusable Object-Oriented Software》（设计模式 - 可复用的面向对象软件元素）的书，书中总共提到了23种设计模式，可以分为三大类：创造型（Creational Patterns）、结构型（Structural Patterns）和行为模式型（Behavioral Patterns）。 创建型模式提供了一种在创建对象的同时隐藏创建逻辑的方式，使某个给定实例需要创建哪些对象时更加灵活。 模式 描述 单例模式（Singleton Pattern） 保证一个类仅有一个实例，并提供一个访问它的全局访问点。 简单工厂（Simple Factory Pattern） 提供一个工厂类，定义一个用于创建对象的接口 工厂方法（Factory Method Pattern） 简单工厂升级，抽象工厂类的创建对象接口，让工厂子类决定如何创建对象。 抽象工厂（Abstract Factory Pattern） 工厂方法升级，工厂类中定义多个创建不同对象的接口，减少工厂类。 建造者模式（Builder Pattern） 将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。 原型模式（Prototype Pattern） 用原型实例指定创建对象的种类，并且通过拷贝这个原型来创建新的对象。 结构型模式 模式 描述 适配器模式（Adapter Pattern） 将一个类的接口转换成客户希望的另外一个接口。使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。 桥接模式（Bridge Pattern） 将抽象部分与它的实现部分分离，使它们都可以独立地变化。 装饰者模式（Decorator Pattern） 动态地给一个对象添加一些额外的职责。就扩展功能而言，它比生成子类方式更为灵活。 组合模式（Composite Pattern） 将对象组合成树形结构以表示“部分-整体”的层次结构。它使得客户对单个对象和复合对象的使用具有一致性。 外观模式（Facade Pattern） 为子系统中的一组接口提供一个一致的界面，定义了一个高层接口，这个接口使得这一子系统更加容易使用。 享元模式（Flyweight Pattern） 运用共享技术有效地支持大量细粒度的对象。 代理模式（Proxy Pattern） 为其他对象提供一个代理以控制对这个对象的访问。 行为型模式 模式 描述 模版方法（Template Method Pattern） 定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。Template Method 使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。 命令模式（Command Pattern） 将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可取消的操作。 迭代器模式（Iterator Pattern） 提供一种方法顺序访问一个聚合对象中各个元素，而又不需暴露该对象的内部表示。 观察者模式（Observer Pattern） 定义对象间的一种一对多的依赖关系，以便当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并自动刷新。 中介者模式（Mediator Pattern） 用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。 备忘录模式（Memento Pattern） 在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到保存的状态。 解释器模式（Interpreter Pattern） 给定一个语言，定义它的文法的一种表示，并定义一个解释器，该解释器使用该表示来解释语言中的句子。 状态模式（State Pattern） 允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它所属的类。 策略模式（Strategy Pattern） 定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。本模式使得算法的变化可独立于使用它的客户端。 职责链模式 （Chain of Responsibility Pattern） 为解除请求的发送者和接收者之间耦合，而使多个对象都有机会处理这个请求。将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它。 访问者模式（Visitor Pattern） 表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。 简单工厂模式和策略模式的区别 如果在适合用策略模式的情况下用简单工厂模式，如果新增加策略就要修改工厂类，而这个可能会导致其他错误和比较繁琐，而如果使用了策略模式，只要将新增加的策略当做参数传递到Context类中即可. 工厂模式是创建型设计模式，它主要关心如何去创建一个对象。策略模式是行为型设计模式，它不关注如何去创建一个对象，而是去挑选一个最符合当前应用场景的策略","categories":[{"name":"design_patterns","slug":"design-patterns","permalink":"https://www.yaronzz.com/categories/design-patterns/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"https://www.yaronzz.com/tags/cpp/"}]},{"title":"设计模式-单例模式","slug":"2.单例模式","date":"2022-06-07T01:55:33.000Z","updated":"2022-06-20T03:22:47.428Z","comments":true,"path":"post/design_patterns_singleton/","link":"","permalink":"https://www.yaronzz.com/post/design_patterns_singleton/","excerpt":"说明目的：为了保证一个类在程序中只有一个实例，并且能被全局访问 要点： 全局性：使用static关键字，变量需要存在于静态存储区 多线程：使用mutex进行保护 唯一性：构造函数私有，只生成一个实例，并且由自己创建","text":"说明目的：为了保证一个类在程序中只有一个实例，并且能被全局访问 要点： 全局性：使用static关键字，变量需要存在于静态存储区 多线程：使用mutex进行保护 唯一性：构造函数私有，只生成一个实例，并且由自己创建 实现单例类通过 Test::Instance()获取类指针 12345678910111213141516171819202122232425262728293031323334353637class Test&#123;public: static Test* Instance() &#123; if (m_instance == nullptr) &#123; std::lock_guard&lt;std::mutex&gt; lock(m_mutex); if (m_instance == nullptr) m_instance = new Test; &#125; return m_instance; &#125; static void DeleteInstance() &#123; if (m_instance) &#123; std::lock_guard&lt;std::mutex&gt; lock(m_mutex); if (m_instance) &#123; delete m_instance; m_instance = nullptr; &#125; &#125; &#125;private: Test() &#123;&#125;private: static Test *m_instance; static std::mutex m_mutex;&#125;;Test* Test::m_instance = NULL;std::mutex Test::m_mutex; 单例宏每个类想要实现单例模式，都要写一遍Instance的接口，有点麻烦，于是希望能用宏实现单例模式，最终使用效果为： 123456class Test&#123; SINGELTON(Test)private: Test() &#123;&#125;&#125;; 可以用类模板的方式来进行： 123456789101112131415161718192021222324252627282930313233template&lt;class T&gt;class Singleton&#123;public: static T *Instance() &#123; if (m_instance == nullptr) &#123; std::lock_guard&lt;std::mutex&gt; lock(m_instanceMutex); if (m_instance == nullptr) m_instance = std::unique_ptr&lt;T&gt;(new T); &#125; return m_instance.get(); &#125;private: static std::unique_ptr&lt;T&gt; m_instance; static std::mutex m_instanceMutex;&#125;;template&lt;class T&gt; std::mutex Singleton&lt;T&gt;::m_instanceMutex;template&lt;class T&gt; std::unique_ptr&lt;T&gt; Singleton&lt;T&gt;::m_instance(nullptr);//单例宏#define SINGELTON(OBJ_CLASS) \\ friend Singleton&lt;OBJ_CLASS&gt;; \\ \\public: \\ static OBJ_CLASS *Instance() \\ &#123; \\ return Singleton&lt;OBJ_CLASS&gt;::Instance(); \\ &#125;","categories":[{"name":"design_patterns","slug":"design-patterns","permalink":"https://www.yaronzz.com/categories/design-patterns/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"https://www.yaronzz.com/tags/cpp/"}]},{"title":"Qt嵌入式笔记","slug":"Qt嵌入式笔记","date":"2022-05-11T02:40:33.000Z","updated":"2022-05-21T07:56:36.761Z","comments":true,"path":"post/qt_arm/","link":"","permalink":"https://www.yaronzz.com/post/qt_arm/","excerpt":"","text":"触摸屏使用 查看触摸屏输入设备 12#event0或1等，点击触摸屏即可打印相应信息hexdump /dev/input/event1 触摸屏校准 1/usr/local/tslib/bin/ts_calibrate 触摸屏测试 1/usr/local/tslib/bin/ts_test lrzsz移植 下载并解压lrzsz源码 12wget https://www.ohse.de/uwe/releases/lrzsz-0.12.20.tar.gztar -xzvf lrzsz-0.12.20.tar.gz 修改交叉编译链并配置 123456#修改配置：CC（交叉编译链）、host、buildCC=arm-linux-gnueabihf-gcc ./configure \\--cache-file=./arm-linux.cache \\--prefix=$(pwd)/../output \\--host=arm-linux-gnueabihf \\--build=arm-linux-gnueabihf 编译生成 1make &amp;&amp; make install arm内核编译 准备工作 12345sudo apt-get update sudo apt-get install lzopsudo apt-get install libncurses5-dev libncursesw5-devsudo apt-get install libc6-dev-i386 lib32z1sudo apt-get install libgtk2.0-dev libglib2.0-dev libglade2-dev 功能命令 1234567891011121314151617#清除编译生成的文件，保留配置文件make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- clean #清除编译生成的文件和配置文件make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- mrproper #清除所有文件make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- distclean #使用epc_m6y2c_defconfig作为配置文件make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- epc_m6y2c_defconfig &amp;&amp;#基于文本模式的菜单型配置make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- menuconfig#图形化配置make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- gconfig#编译全部make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- all -j8 生成文件 arch/arm/boot/zImage linux-imx/arch/arm/boot/dts/imx6y2c-512m-nand.dtb","categories":[{"name":"code","slug":"code","permalink":"https://www.yaronzz.com/categories/code/"}],"tags":[{"name":"qt","slug":"qt","permalink":"https://www.yaronzz.com/tags/qt/"},{"name":"arm","slug":"arm","permalink":"https://www.yaronzz.com/tags/arm/"}]},{"title":"FRP内网穿透","slug":"FRP内网穿透","date":"2022-03-30T10:00:20.000Z","updated":"2022-06-08T02:15:06.775Z","comments":true,"path":"post/frp_use/","link":"","permalink":"https://www.yaronzz.com/post/frp_use/","excerpt":"frp 是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。frp提供跨平台的客户端与服务端，开源免费，地址：frp (github.com) 根据系统版本，下载不同的文件并解压如下：","text":"frp 是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。frp提供跨平台的客户端与服务端，开源免费，地址：frp (github.com) 根据系统版本，下载不同的文件并解压如下： 文件包括： 名称 说明 frpc 客户端执行程序 frpc.ini 客户端配置 frps 服务端执行程序 frps.ini 服务端配置 服务端使用手动安装与配置 修改配置文件，详细配置参数请参考服务端配置 | frp (gofrp.org) 1234567891011121314151617181920212223242526272829303132333435[common]# 绑定的IP与端口bind_addr = 0.0.0.0bind_port = 5000#用于接收采用 KCP 连接的 frpc#kcp_bind_port = 0#用于接收采用 HTTP\\HTTPS 连接的 frpc#vhost_http_port = 0#vhost_https_port = 0# http、https类型的二级域名后缀#subdomain_host = test.com# web仪表盘端口，可以查看服务详情与已连接的客户端dashboard_port = 5001# web仪表盘用户与密码dashboard_user = admindashboard_pwd = xxxxxx# 日志级别 debug, info, warn, error | 日志最大天数log_file = ./frps.loglog_level = infolog_max_days = 3#服务端返回详细错误信息给客户端detailed_errors_to_client = true# 验证码token = xxxxxxxxxxxxxxx# 客户端可以绑定的端口#allow_ports = 1-65535# if tcp stream multiplexing is used, default is truetcp_mux = true 启动程序 1./frps -c ./frps.ini 一键安装123wget https://code.aliyun.com/MvsCode/frps-onekey/raw/master/install-frps.sh -O ./install-frps.shchmod 700 ./install-frps.sh./install-frps.sh install 管理与配置： 1/etc/init.d/frps &#123;start|stop|restart|status|config|version&#125; 客户端使用 修改配置文件，详细配置参数请参考客户端配置 | frp (gofrp.org) 12345678910111213141516171819202122232425262728[common]#frps服务端地址与通讯端口server_addr = 192.168.0.1server_port = 5000# 验证码token = xxxxxxxxxxxxxxx#设置为false，frpc连接frps失败后重连，默认为true不重连login_fail_exit = false#KCP协议在弱网环境下传输效率提升明显，但是对frps会有一些额外的流量消耗。服务端须先设置kcp_bind_port = 7000，www.yourdomain.com服务端已设置支持#连接服务端的通信协议 tcp, kcp, websocketprotocol = tcp[SSH] #代理类型 tcp, udp, http, https, stcp, sudp, xtcp, tcpmuxtype = tcplocal_ip = 127.0.0.1local_port = 22#压缩传输 | 加密传输use_compression = trueuse_encryption = true#tcp\\udp绑定的服务端口remote_port = 6453 启动程序 1./frpc -c ./frpc.ini 直接访问 192.168.0.1:6453即可","categories":[{"name":"建站","slug":"建站","permalink":"https://www.yaronzz.com/categories/%E5%BB%BA%E7%AB%99/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://www.yaronzz.com/tags/linux/"}]},{"title":"Linux不同网段网络通信","slug":"Linux不同网段网络通信","date":"2022-02-28T09:26:17.000Z","updated":"2022-05-11T08:07:07.077Z","comments":true,"path":"post/linux_netmask/","link":"","permalink":"https://www.yaronzz.com/post/linux_netmask/","excerpt":"","text":"问题有两台机子，各自设置了静态 IP： A 机：ifconfig eth0 192.168.32.10 netmask 255.255.254.0 B 机：ifconfig eth0 192.168.1.15 netmask 255.255.254.0 A 机 Ping B 机时，显示异常： 123[root@test]# ping 192.168.1.15PING 192.168.1.15 (192.168.1.15): 56 data bytesping: sendto: Network is unreachable 需要在不改变 AB 机 IP 的情况下，让网络互通。 说明子网掩码是一个32位的2进制数，常见格式为255.255.255.255（即FF.FF.FF.FF）。子网掩码由1和0组成，且1和0分别连续。 其对应网络地址的所有位都置为1，对应于主机地址的所有位置都为0。用于告知路由器，地址的哪一部分是网络地址，哪一部分是主机地址，使路由器正确判断任意IP地址是否是本网段)的，从而正确地进行路由。 注意：只有网络标识相同的两台主机在无路由的情况下才能相互通信。 通过子网掩码判断两台设备是否属于同一网段的方法是，将IP地址和子网掩码转换为二进制，然后进行二进制“与”计算，如果得出的结果是相同的，那么这两台计算机就属于同一网段。 比如： 123456#子网掩码：255.255.254.0#设备1地址：192.168.0.55#设备2地址：192.168.1.45可知：设备1网段192.168.0，设备2网段192.168.0 使用子网掩码划分子网后，子网内可以通信，跨子网不能通信，子网间通信应该使用路由器，并正确配置静态路由信息。 解决方法 设置掩码为255.255.192.0，从而在二层打通 192.168.0.0 - 192.168.63.255 ，两个设备间可以走二层直接交付 1234# A机ifconfig eth0 192.168.32.10 netmask 255.255.192.0# B机ifconfig eth0 192.168.1.15 netmask 255.255.192.0 设置静态路由： 由于掩码是 23 位，A 机所在局域网 IP 地址范围是 192.168.32.1 ~ 192.168.33.254 (0 和 255 一般不分配给主机)，B 机所在局域网 IP 地址范围是 192.168.0.1 ~ 192.168.1.254。所以不是同一个 network ，网络不可达，无法 ping 通，只能在 A 机上添加一条到 B 机 network 的静态路由，并且在 B 机器上添加 A 机器的 static route 1234# A机ip route add 192.168.0.0/23 dev eth0# B机 ip route add 192.168.32.0/23 dev eth0 参考：请教大佬一个关于网络的问题 - V2EX","categories":[{"name":"code","slug":"code","permalink":"https://www.yaronzz.com/categories/code/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://www.yaronzz.com/tags/linux/"}]},{"title":"DHCP局域网协议使用教程","slug":"DHCP局域网协议使用教程","date":"2022-02-25T02:52:20.000Z","updated":"2022-05-11T08:07:07.070Z","comments":true,"path":"post/dhcp_use/","link":"","permalink":"https://www.yaronzz.com/post/dhcp_use/","excerpt":"DHCP（动态主机配置协议）是一个局域网的网络协议。指的是由服务器控制一段IP地址范围，客户机登录服务器时就可以自动获得服务器分配的IP地址和子网掩码。默认情况下，DHCP作为Windows Server的一个服务组件不会被系统自动安装，还需要管理员手动安装并进行必要的配置。","text":"DHCP（动态主机配置协议）是一个局域网的网络协议。指的是由服务器控制一段IP地址范围，客户机登录服务器时就可以自动获得服务器分配的IP地址和子网掩码。默认情况下，DHCP作为Windows Server的一个服务组件不会被系统自动安装，还需要管理员手动安装并进行必要的配置。 客户端模式作为客户端接入DHCP服务：连接路由器，使用自动IP搜索功能： 12345678910111213[root@test ~]#/sbin/udhcpcudhcpc (v1.22.1) startedSetting IP address 0.0.0.0 on eth0Sending discover...Sending select for 192.168.0.233...Lease of 192.168.0.233 obtained, lease time 7200Setting IP address 192.168.0.233 on eth0Deleting routersroute: SIOCDELRT: No such processAdding router 192.168.1.1Recreating /etc/resolv.conf Adding DNS server 114.114.114.114 Adding DNS server 223.5.5.5 服务端模式作为DHCP服务，可以与其他客户端通过网线直连： 关闭dhcpc自动IP搜索功能 1killall -9 udhcpc 设置本地静态IP地址 1ifconfig eth0 192.168.32.10 netmask 255.255.254.0 eth0: 本地使用的网卡 192.168.32.10: 本地使用的IP地址 配置DHCP服务：vi /etc/udhcpd.conf 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121# Sample udhcpd configuration file (/etc/udhcpd.conf)# The start and end of the IP lease blockstart 192.168.32.20 #客户端的起始地址end 192.168.32.254 #客户端的结束地址# The interface that udhcpd will useinterface eth0 #网卡# The maximim number of leases (includes addressesd reserved# by OFFER's, DECLINE's, and ARP conficts#max_leases 254 #default: 254# If remaining is true (default), udhcpd will store the time# remaining for each lease in the udhcpd leases file. This is# for embedded systems that cannot keep time between reboots.# If you set remaining to no, the absolute time that the lease# expires at will be stored in the dhcpd.leases file.#remaining yes #default: yes# The time period at which udhcpd will write out a dhcpd.leases# file. If this is 0, udhcpd will never automatically write a# lease file. (specified in seconds)#auto_time 7200 #default: 7200 (2 hours)# The amount of time that an IP will be reserved (leased) for if a# DHCP decline message is received (seconds).#decline_time 3600 #default: 3600 (1 hour)# The amount of time that an IP will be reserved (leased) for if an# ARP conflct occurs. (seconds#conflict_time 3600 #default: 3600 (1 hour)# How long an offered address is reserved (leased) in seconds#offer_time 60 #default: 60 (1 minute)# If a lease to be given is below this value, the full lease time is# instead used (seconds).#min_lease 60 #defult: 60# The location of the leases file#lease_file /var/lib/misc/udhcpd.leases #defualt: /var/lib/misc/udhcpd.leases# The location of the pid file#pidfile /var/run/udhcpd.pid #default: /var/run/udhcpd.pid# Everytime udhcpd writes a leases file, the below script will be called.# Useful for writing the lease file to flash every few hours.#notify_file #default: (no script)#notify_file dumpleases # &lt;--- useful for debugging# The following are bootp specific options, setable by udhcpd.#siaddr 192.168.0.22 #default: 0.0.0.0#sname zorak #default: (none)#boot_file /var/nfs_root #default: (none)# The remainer of options are DHCP options and can be specifed with the# keyword 'opt' or 'option'. If an option can take multiple items, such# as the dns option, they can be listed on the same line, or multiple# lines. The only option with a default is 'lease'.#Examlesopt dns 114.114.114.114 223.5.5.5 #192.168.10.2 192.168.10.10option subnet 255.255.255.0opt router 192.168.32.10#opt wins 192.168.10.10option dns 192.168.32.10 #129.219.13.81 # appened to above DNS servers for a total of 3option domain localoption lease 864000 # 10 days of seconds# Currently supported options, for more info, see options.c#opt subnet#opt timezone#opt router#opt timesrv#opt namesrv#opt dns#opt logsrv#opt cookiesrv#opt lprsrv#opt bootsize#opt domain#opt swapsrv#opt rootpath#opt ipttl#opt mtu#opt broadcast#opt wins#opt lease#opt ntpsrv#opt tftp#opt bootfile#opt wpad# Static leases map#static_lease 00:60:08:11:CE:4E 192.168.0.54#static_lease 00:60:08:11:CE:3E 192.168.0.44 启动DHCP服务 1udhcpd -fS -I 192.168.32.10 /etc/udhcpd.conf","categories":[{"name":"软件","slug":"软件","permalink":"https://www.yaronzz.com/categories/%E8%BD%AF%E4%BB%B6/"}],"tags":[{"name":"network","slug":"network","permalink":"https://www.yaronzz.com/tags/network/"}]},{"title":"Github配置仓库Git环境","slug":"[软件] Github配置仓库Git环境","date":"2022-02-25T02:00:20.000Z","updated":"2022-06-07T02:25:12.062Z","comments":true,"path":"post/github_git/","link":"","permalink":"https://www.yaronzz.com/post/github_git/","excerpt":"将代码提交到Github时，突然报错： 1234➜ RemoteWorking git:(master) git pushremote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.remote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.fatal: Authentication failed for 'https://github.com/yaronzz/xxxxx.git/' 这是由于Github提高了仓库的安全性，访问仓库时需要提供令牌token","text":"将代码提交到Github时，突然报错： 1234➜ RemoteWorking git:(master) git pushremote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.remote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.fatal: Authentication failed for 'https://github.com/yaronzz/xxxxx.git/' 这是由于Github提高了仓库的安全性，访问仓库时需要提供令牌token 生成token 访问Personal Access Tokens (github.com) ，点击生成新token 配置名称、有效期、访问权限 点击复制token，此token只能查看一次，最好自己保存到其他地方 使用token重新设置git的远程地址： 1git remote set-url origin https://&lt;你的token&gt;@github.com/&lt;你的github名称&gt;/&lt;你的仓库名&gt;.git","categories":[{"name":"软件","slug":"软件","permalink":"https://www.yaronzz.com/categories/%E8%BD%AF%E4%BB%B6/"}],"tags":[{"name":"github","slug":"github","permalink":"https://www.yaronzz.com/tags/github/"}]},{"title":"Linux安装ss客户端","slug":"Linux安装ss客户端","date":"2022-02-18T01:59:51.000Z","updated":"2022-06-07T01:58:06.813Z","comments":true,"path":"post/ss_install/","link":"","permalink":"https://www.yaronzz.com/post/ss_install/","excerpt":"安装ss12yum install python-pippip install shadowsocks 创建配置文件1234567891011121314151617vi /etc/shadowsocks.json#在文件中添加一下内容：&#123; \"server\":[\"101.101.101.101\"], \"server_port\":6666, \"password\":\"xxxxxxxx\", \"timeout\":300, \"method\":\"aes-256-cfb\", \"local_address\":\"127.0.0.1\", \"local_port\":1080, \"fast_open\":false, \"tunnel_remote\":\"8.8.8.8\", \"dns_server\":[\"8.8.8.8\", \"8.8.4.4\"], \"tunnel_remote_port\":53, \"tunnel_port\":53&#125; server : 服务器地址 server_port：服务器端口号 password：密码 method：加密方式","text":"安装ss12yum install python-pippip install shadowsocks 创建配置文件1234567891011121314151617vi /etc/shadowsocks.json#在文件中添加一下内容：&#123; \"server\":[\"101.101.101.101\"], \"server_port\":6666, \"password\":\"xxxxxxxx\", \"timeout\":300, \"method\":\"aes-256-cfb\", \"local_address\":\"127.0.0.1\", \"local_port\":1080, \"fast_open\":false, \"tunnel_remote\":\"8.8.8.8\", \"dns_server\":[\"8.8.8.8\", \"8.8.4.4\"], \"tunnel_remote_port\":53, \"tunnel_port\":53&#125; server : 服务器地址 server_port：服务器端口号 password：密码 method：加密方式 启动ss1sslocal -c /etc/shadowsocks.json 错误：ERROR method aes-256-gcm not supported ss版本太低，可以用sslocal --version，一般都是2.8.2，需要升级到3.0： 12345git clone https://github.com/shadowsocks/shadowsocks.git mastercd mastergit checkout masterpython setup.py installsslocal --version 也可以直接使用pip进行安装： 1pip install https://github.com/shadowsocks/shadowsocks/archive/master.zip -U 错误：libsodium not found，需要手动编译 libsodium 1.0.8 及以上版本 Debian 7/8、Ubuntu 14/15/16 及其衍生系列： 12sudo apt-get updatesudo apt-get install build-essential wget -y Centos 6/7、RHEL 7 及其衍生系列： 12yum groupinstall \"Development Tools\" -yyum install wget -y 安装libsodium: 12345wget https://download.libsodium.org/libsodium/releases/LATEST.tar.gztar xzvf LATEST.tar.gzcd libsodium*./configure --prefix=/usr/local/libsodiummake &amp;&amp; make install 添加运行库位置并加载运行库： 123456789101112#编辑文件vim /etc/ld.so.conf#输入以下内容include ld.so.conf.d/*.conf\"/lib/usr/lib64/usr/local/lib/usr/local/libsodium/lib#使配置生效ldconfig 配置服务12345678910111213141516#编辑文件vi /etc/systemd/system/shadowsocks.service#输入以下内容[Unit]Description=Shadowsocks[Service]TimeoutStartSec=0ExecStart=sslocal -c /etc/shadowsocks.json[Install]WantedBy=multi-user.target#启动systemctl enable shadowsocks.servicesystemctl start shadowsocks.servicesystemctl status shadowsocks 检查服务是否运行正常： 1curl --socks5 127.0.0.1:1080 http://httpbin.org/ip 使用ss代理安装privoxyprivoxy可以将ss提供的socket5代理转为http代理 12345678910111213#安装yum install privoxy#配置vi /etc/privoxy/config#确保文件中有以下两行listen-address 127.0.0.1:8118forward-socks5t / 127.0.0.1:1080 .#启动服务systemctl enable privoxysystemctl start privoxysystemctl status privoxy 使用临时启动http代理： 12export http_proxy=http://127.0.0.1:8118export https_proxy=http://127.0.0.1:8118 测试： 1curl www.google.com 永久启用http代理： 123456789#编辑配置文件vi /etc/profile#配置export http_proxy=http://127.0.0.1:8118export https_proxy=http://127.0.0.1:8118#生效source /etc/profile","categories":[{"name":"建站","slug":"建站","permalink":"https://www.yaronzz.com/categories/%E5%BB%BA%E7%AB%99/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://www.yaronzz.com/tags/linux/"},{"name":"ss","slug":"ss","permalink":"https://www.yaronzz.com/tags/ss/"}]},{"title":"Qt-QScrollArea使用","slug":"Qt-QScrollArea使用","date":"2022-01-20T03:12:30.000Z","updated":"2022-05-11T08:07:07.213Z","comments":true,"path":"post/qt_qscrollarea/","link":"","permalink":"https://www.yaronzz.com/post/qt_qscrollarea/","excerpt":"","text":"QScrollArea作为一个控件容器，主要用于提供横向和纵向的滚动条，常用在图片查看等场景。由于它只作为一个容器存在，所以需要为其设置一个控制：QScrollArea::setWidget(QWidget *)。 QScrollArea也可以用来设计复杂的列表： 123456789101112131415161718192021222324252627class MyScrollArea : public QScrollArea&#123;public: void MyScrollArea() &#123; m_numItem = 0; m_layout = new QVBoxLayout(); m_layout-&gt;addStretch(1); m_widget = new QWidget(); m_widget-&gt;setLayout(m_layout); this-&gt;setWidget(m_widget); this-&gt;setWidgetResizable(True); &#125; void addItem(QWidget* item) &#123; m_layout-&gt;insertWidget(m_numItem, item); m_numItem ++; &#125; void delItem(QWidget* item) &#123; m_layout-&gt;removeWidget(item); m_numItem --; &#125;&#125; 列表项一般只需要纵向的滚动条，横向宽度保持与外部窗口一致，所以需要重写QScrollArea的resizeEvent： 123456789void resizeEvent(QResizeEvent* e)&#123; QScrollArea::resizeEvent(e); auto width = e-&gt;size()-&gt;width(); if (width &gt; 0) &#123; m_widget-&gt;setMaximumWidth(width); &#125;&#125;","categories":[{"name":"code","slug":"code","permalink":"https://www.yaronzz.com/categories/code/"}],"tags":[{"name":"qt","slug":"qt","permalink":"https://www.yaronzz.com/tags/qt/"}]},{"title":"C++NFS挂载","slug":"C++NFS挂载","date":"2021-12-24T02:20:33.000Z","updated":"2022-05-11T08:07:07.270Z","comments":true,"path":"post/cpp_nfs/","link":"","permalink":"https://www.yaronzz.com/post/cpp_nfs/","excerpt":"挂载NFS挂载命令挂载NFS时，常用的命令比如： 12#将远程目录挂载到本地/home/share目录下mount -t nfs -o nolock 192.168.1.10:/tmp /home/share 在Linux 下可以用mount函数进行挂载： 1234567891011121314151617181920bool Mount()&#123; string remotePath = m_remoteIP + \":\" + m_remotePath; string localPath = m_localPath; string params = \"nolock,soft,fg,tcp,timeo=5,retrans=1,rsize=4096,vers=3,addr=\" + m_remoteIP; int ret = mount(remotePath.c_str(), localPath.c_str(), \"nfs\", MS_SYNCHRONOUS, params.c_str()); if (ret != 0) &#123; auto errInfo = errno; return false; &#125; return true;&#125;","text":"挂载NFS挂载命令挂载NFS时，常用的命令比如： 12#将远程目录挂载到本地/home/share目录下mount -t nfs -o nolock 192.168.1.10:/tmp /home/share 在Linux 下可以用mount函数进行挂载： 1234567891011121314151617181920bool Mount()&#123; string remotePath = m_remoteIP + \":\" + m_remotePath; string localPath = m_localPath; string params = \"nolock,soft,fg,tcp,timeo=5,retrans=1,rsize=4096,vers=3,addr=\" + m_remoteIP; int ret = mount(remotePath.c_str(), localPath.c_str(), \"nfs\", MS_SYNCHRONOUS, params.c_str()); if (ret != 0) &#123; auto errInfo = errno; return false; &#125; return true;&#125; 错误码挂载失败时，常见错误码errno有： 12345#define EINVAL 22 /* Invalid argument 挂载参数问题，可能是没加addr*/#define EACCES 13 /* Permission denied 权限问题*/#define EPERM 1 /* Operation not permitted 权限问题*/#define EBUSY 16 /* Device or resource busy 挂载目录正被使用*/#define ENOENT 2 /* No such file or directory 挂载目录错误*/ 挂载参数 参数 说明 rsize=n 读时最大字节数 wsize=n 写时最大字节数 timeo=n 客户端重传请求前等待时间,默认等待重传时间为60s retrans=n 客户端返回错误前的重传次数。默认为重传3次。retrans与soft参数一起使用时才有效。 soft/hard 软挂载方式挂载系统，若NFS请求超时，则客户端向调用程序返回错误；如果使用硬连接方式则客户端一直重新请求直至成功。默认为hard bg/fg 设置挂载失败后的行为方式。默认的fg方式将立刻退出返回错误状态，bg方式是退出前将产生一个子进程在后台继续尝试挂载 vers=xxx 设置版本 addr=xxx 设置服务地址 tcp/udp 设置协议，一般使用tcp，网络不稳定可以换udp port=n 设置服务端口号 lock/nolock 选择是否使用NLM协议在服务器上锁文件。当选择nolock选项时，锁对于同一主机的应用有效，对不同主机不受锁的影响。默认为lock。 卸载卸载函数有mount和mount2，第二个可以加参数，所以一般情况下使用mount2进行强制卸载： 1234bool UnMount()&#123; return umount2(m_localPath.c_str(), MNT_FORCE) == 0);&#125; 如果m_localPath目录没有被挂载，则会返回错误 检查是否挂载检查命令Linux下使用命令检查nfs是否挂载成功的方式有很多，比如： 检查文件系统的磁盘空间占用情况 df -h 1234Filesystem Size Used Available Use% Mounted onubi0:rootfs 54.1M 50.8M 3.3M 94% /devtmpfs 215.8M 0 215.8M 0% /dev192.168.0.249:/nfs 59.6G 1.6G 57.9G 3% /mnt/udisk 查看挂载信息文件 cat /proc/mounts 123ubi0:rootfs / ubifs rw,sync,relatime 0 0devtmpfs /dev devtmpfs rw,relatime,size=220936k,nr_inodes=55234,mode=755 0 0192.168.0.249:/nfs /mnt/udisk nfs rw,sync,relatime,vers=3,rsize=4096,wsize=8192,namlen=255,soft,nolock,proto=tcp,timeo=5,retrans=1,sec=sys,mountaddr=192.168.0.249,mountvers=3,mountproto=tcp,local_lock=all,addr=192.168.0.249 0 0 直接使用挂载命令 mount 123ubi0:rootfs on / type ubifs (rw,sync,relatime)devtmpfs on /dev type devtmpfs (rw,relatime,size=220936k,nr_inodes=55234,mode=755)192.168.0.249:/nfs on /mnt/udisk type nfs (rw,sync,relatime,vers=3,rsize=4096,wsize=8192,namlen=255,soft,nolock,proto=tcp,timeo=5,retrans=1,sec=sys,mountaddr=192.168.0.249,mountvers=3,mountproto=tcp,local_lock=all,addr=192.168.0.249) 查看指定目录是否挂载点 mountpoint -d /mnt/udisk 12#打印文件系统的主设备号和次设备号0:21 功能实现功能需求： 检查目录是否挂载成功 当NFS服务关闭时，检查结果也需要同步 经过测试，只有mountpoint 能完成第二点功能需求，所以直接使用shell命令来进行检查： 123456789101112bool CheckMount()&#123; string shell = \"mountpoint -d \" + m_localPath; QProcess proc; proc.start(shell.c_str()); if (!proc.waitForFinished(10000)) return false; auto output = proc.readAll(); return !output.isEmpty())&#125; NFS服务Windows下安装Windows下常见的NFS服务软件可以使用haneWIN NFS Server 1. 下载地址：https://r.hanewin.net/nfs1261.zip 2. 配置方法：打开目录下的exports文件，配置NFS服务目录，比如共享D盘下的NFSData目录： 1D:\\NFSData -name:nfs -exec -maproot:0 -alldirs name：设置挂载的目录名给客户端使用，比如mount -t nfs -o nolock 192.168.1.10:/nfs /home/share maproot：将root权限开放给客户端 alldirs：将全部路径开放给客户端 Linux下安装 安装：sudo apt-get install nfs-kernel-server 配置方法：编辑文件 /etc/exports 1/mnt/nfstest *(rw,sync,no_root_squash,no_subtree_check) rw：可读可写 no_root_squash：root的权限 sync：资料同步写入存储器中 no_subtree_check：输出目录是一个子目录，nfs服务器也不检查其父目录的权限，这样可以提高效率 编辑成功之后运行命令exportfs -au刷新","categories":[{"name":"code","slug":"code","permalink":"https://www.yaronzz.com/categories/code/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"https://www.yaronzz.com/tags/cpp/"},{"name":"nfs","slug":"nfs","permalink":"https://www.yaronzz.com/tags/nfs/"}]},{"title":"GDB-CoreDump调试","slug":"GDB-CoreDump调试","date":"2021-12-23T09:26:17.000Z","updated":"2022-05-11T08:07:07.273Z","comments":true,"path":"post/gdb_coreDump/","link":"","permalink":"https://www.yaronzz.com/post/gdb_coreDump/","excerpt":"配置并生成崩溃信息 查看并开启core dump功能 1234#查看是否开启 0不开ulimit -c#开启core dump功能ulimit -c unlimited 指定core dump输出目录到/opt/dump/ 1echo /opt/dump/core.%e.%p &gt; /proc/sys/kernel/core_pattern 执行问题程序即可，输出如下： 1234567#崩溃信息[root@test ~]# Alignment trap: not handling instruction e8502f00 at [&lt;75f76aca&gt;]Unhandled fault: alignment exception (0x001) at 0x0d98b981pgd = 98be4000[0d98b981] *pgd=00000000[1]- Bus error (core dumped) ./test","text":"配置并生成崩溃信息 查看并开启core dump功能 1234#查看是否开启 0不开ulimit -c#开启core dump功能ulimit -c unlimited 指定core dump输出目录到/opt/dump/ 1echo /opt/dump/core.%e.%p &gt; /proc/sys/kernel/core_pattern 执行问题程序即可，输出如下： 1234567#崩溃信息[root@test ~]# Alignment trap: not handling instruction e8502f00 at [&lt;75f76aca&gt;]Unhandled fault: alignment exception (0x001) at 0x0d98b981pgd = 98be4000[0d98b981] *pgd=00000000[1]- Bus error (core dumped) ./test 调试崩溃文件可执行软件：test，产生的dump文件core-test-775 使用gdb调试程序 1gdb test 设置程序所需的动态库路径 1234#查询所需库(gdb)info sharedlibrary#设置库路径/root/lib/和/root/lib2/,用冒号隔开(gdb)set solib-search-path /root/lib/:/root/lib2/ 打开崩溃文件 1(gdb)core-file core-test-775 查询崩溃信息 1(gdb)bt 设置自动加载动态库路径 修改用户目录下的~/.gdbinit： 1set auto-load safe-path / 修改程序软件的目录下的~/.gdbinit： 1set solib-search-path /root/lib/:/root/lib2/ 调试崩溃信息 123gdb test(gdb)core-file core-test-775(gdb)bt","categories":[{"name":"code","slug":"code","permalink":"https://www.yaronzz.com/categories/code/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://www.yaronzz.com/tags/linux/"},{"name":"gdb","slug":"gdb","permalink":"https://www.yaronzz.com/tags/gdb/"}]},{"title":"Qt交叉编译","slug":"Qt交叉编译","date":"2021-12-23T09:06:30.000Z","updated":"2022-05-11T08:07:07.246Z","comments":true,"path":"post/qt_cross_compile/","link":"","permalink":"https://www.yaronzz.com/post/qt_cross_compile/","excerpt":"准备工作下载软件 下载相应的触摸屏库tslib 下载linaro交叉编译工具链:Linaro Releases 下载QT源码：Index of /archive/qt/5.9/5.9.6/single 文件名 说明 gcc-linaro-arm-linux-gnueabihf-4.9-2014.09_linux.tar.bz2 交叉编译工具链 tslib.tar.bz2 触摸屏库 qt-everywhere-opensource-src-5.9.6.tar.xz qt5.9.6源码","text":"准备工作下载软件 下载相应的触摸屏库tslib 下载linaro交叉编译工具链:Linaro Releases 下载QT源码：Index of /archive/qt/5.9/5.9.6/single 文件名 说明 gcc-linaro-arm-linux-gnueabihf-4.9-2014.09_linux.tar.bz2 交叉编译工具链 tslib.tar.bz2 触摸屏库 qt-everywhere-opensource-src-5.9.6.tar.xz qt5.9.6源码 环境搭建 将gcc-linaro-arm-linux-gnueabihf-4.9-2014.09_linux.tar.bz2和tslib.tar.bz2移动到/opt目录下 解压 gcc-linaro-arm-linux-gnueabihf-4.9-2014.09_linux.tar.bz2到opt目录 12cd /optsudo tar -xvjf gcc-linaro-arm-linux-gnueabihf-4.9-2014.09_linux.tar.bz2 解压 tslib.tar.bz2到opt目录 12cd /optsudo tar -xvjf tslib.tar.bz2 测试交叉编译链 12cd /opt/gcc-linaro-arm-linux-gnueabihf-4.9-2014.09_linux/bin./arm-linux-gnueabihf-g++ -v 如果不能运行，可能是系统版本64位与交叉编译链32位不符导致，可以安装32位支持： 123sudo dpkg --add-architecture i386sudo apt-get updatesudo apt-get install libc6:i386 libncurses5:i386 libstdc++6:i386 zlib1g:i386 -y 配置与编译QT 将qt-everywhere-opensource-src-5.9.6.tar.xz移动到用户目录下，创建qt-5.9.6-source目录用于放源码 12cd ~mkdir qt-5.9.6-source 解压 qt-everywhere-opensource-src-5.9.6.tar.xz到用户目录 1tar -xvjf qt-everywhere-opensource-src-5.9.6.tar.xz ./qt-5.9.6-source 配置交叉编译链 打开配置文件 12cd ~/qt-5.9.6-source/qt-everywhere-opensource-src-5.9.6vi ./qtbase/mkspecs/linux-arm-gnueabi-g++/qmake.conf 修改内容，并指定交叉编译链地址 123456789101112131415161718192021222324252627282930313233## qmake configuration for building with arm-linux-gnueabi-g++#MAKEFILE_GENERATOR = UNIXCONFIG += incrementalQMAKE_INCREMENTAL_STYLE = sublibinclude(../common/linux.conf)include(../common/gcc-base-unix.conf)include(../common/g++-unix.conf)QT_QPA_DEFAULT_PLATFORM = linuxfbQMAKE_CFLAGS += -march=armv7-a -mtune=cortex-a7QMAKE_CXXFLAGS += -march=armv7-a -mtune=cortex-a7QMAKE_INCDIR = /opt/tslib/includeQMAKE_LIBDIR = /opt/tslib/lib# modifications to g++.confQMAKE_CC = /opt/gcc-linaro-arm-linux-gnueabihf-4.9-2014.09_linux/bin/arm-linux-gnueabihf-gcc -ltsQMAKE_CXX = /opt/gcc-linaro-arm-linux-gnueabihf-4.9-2014.09_linux/bin/arm-linux-gnueabihf-g++ -ltsQMAKE_LINK = /opt/gcc-linaro-arm-linux-gnueabihf-4.9-2014.09_linux/bin/arm-linux-gnueabihf-g++ -ltsQMAKE_LINK_SHLIB = /opt/gcc-linaro-arm-linux-gnueabihf-4.9-2014.09_linux/bin/arm-linux-gnueabihf-g++ -lts# modifications to linux.confQMAKE_AR = /opt/gcc-linaro-arm-linux-gnueabihf-4.9-2014.09_linux/bin/arm-linux-gnueabihf-ar cqsQMAKE_OBJCOPY = /opt/gcc-linaro-arm-linux-gnueabihf-4.9-2014.09_linux/bin/arm-linux-gnueabihf-objcopyQMAKE_NM = /opt/gcc-linaro-arm-linux-gnueabihf-4.9-2014.09_linux/bin/arm-linux-gnueabihf-nm -PQMAKE_STRIP = /opt/gcc-linaro-arm-linux-gnueabihf-4.9-2014.09_linux/bin/arm-linux-gnueabihf-stripload(qt_config) 创建autoConfig.sh文件 1vi ~/qt-5.9.6-source/qt-everywhere-opensource-src-5.9.6/autoConfig.sh autoConfig.sh内容： 1234567891011121314151617181920#!/bin/sh./configure \\ -prefix /opt/qt-5.9.6 \\ -v \\ -confirm-license \\ -opensource \\ -release \\ -make libs \\ -xplatform linux-arm-gnueabi-g++ \\ -optimized-qmake \\ -qt-libjpeg \\ -qt-libpng \\ -qt-zlib -tslib \\ -no-opengl -no-sse2 -no-openssl -no-cups -no-glib -no-xcb \\ -no-separate-debug-info -nomake examples \\ -nomake tools -nomake tests -no-iconv -no-dbus \\ -I /opt/tslib/include \\ -L /opt/tslib/lib \\ -recheck-all 编译QT 1./autoConfig.sh &amp;&amp; make -j4 &amp;&amp; make install 编译后的qt库放置与/opt目录下","categories":[{"name":"code","slug":"code","permalink":"https://www.yaronzz.com/categories/code/"}],"tags":[{"name":"qt","slug":"qt","permalink":"https://www.yaronzz.com/tags/qt/"},{"name":"arm","slug":"arm","permalink":"https://www.yaronzz.com/tags/arm/"}]},{"title":"Qt-Vnc远程","slug":"Qt-VNC远程","date":"2021-12-23T01:03:30.000Z","updated":"2022-05-11T08:07:07.245Z","comments":true,"path":"post/qt_vnc/","link":"","permalink":"https://www.yaronzz.com/post/qt_vnc/","excerpt":"VNC简介VNC(Virtual Network Computing)是基于RFB（Remote Frame Buffer）协议的远程系统，C/S端口默认为5900，B/S端口默认为5800。 RFB (远程帧缓存) 是一个远程图形用户的简单协议，工作在帧缓存级别上，其传输的是像素数据是以XY为起点的方框数据，通过矩形图形数据组进行帧缓存的更新。另外更新是由客户端通过命令驱动的，也就是说更新只是服务器在响应客户端的请求时发生的，如果网络较差时，有些帧的缓存会忽略，这样能减少客户端对网络和绘制速度的要求。","text":"VNC简介VNC(Virtual Network Computing)是基于RFB（Remote Frame Buffer）协议的远程系统，C/S端口默认为5900，B/S端口默认为5800。 RFB (远程帧缓存) 是一个远程图形用户的简单协议，工作在帧缓存级别上，其传输的是像素数据是以XY为起点的方框数据，通过矩形图形数据组进行帧缓存的更新。另外更新是由客户端通过命令驱动的，也就是说更新只是服务器在响应客户端的请求时发生的，如果网络较差时，有些帧的缓存会忽略，这样能减少客户端对网络和绘制速度的要求。 远程桌面协议对比： SPICE VNC RDP BIOS屏幕显示 能 能 不能 全彩支持 能 能 能 更改分辨率 能 能 能 多显示器 多显示器支持（高达4画面） 只有一个屏幕 多显示器支持 图像传输 图像和图形传输 图像传输 图像和图形传输 视频播放支持 GPU加速支持 不能 GPU加速支持 音频传输 双向语音可以控制 不能 双向语音可以控制 鼠标控制 客户端服务器都可以控制 服务器端控制 服务器端控制 VNC作为一种远程桌面协议，常常用在嵌入式开发中，在嵌入式设备上运行vnc服务程序，即可在PC端远程控制。 QT环境要求 QT版本需要5.8以上，可以下载相应版本的源码包，比如5.9.6.zip，解压之后，在qtbase/src/plugins/platforms下可以看见有vnc的源码 检查qt库安装目录下插件plugins文件夹中platforms目录是否有vnc动态库libqvnc.so 123# ls /usr/lib/qt5.8/plugins/platforms/libqeglfs.so libqminimal.so libqoffscreen.solibqlinuxfb.so libqminimalegl.so libqvnc.so 注意：QT提供的VNC服务比较简单，只支持一些基本的功能，另外老版本的VNC中也有一些BUG可能会造成崩溃，所以最好还是尽量使用新版本。 使用教程QT程序启动vnc服务 方式1：通过设置环境变量，改变程序的启动方式 配置QT程序的启动的方式 export QT_QPA_PLATFORM=vnc 方式2：启动程序时指定启动方式 启动参数./test -platform vnc:size=800x600,port=12345 size 分辨率 port 服务端口号（不加则默认为5900） 使用VNC客户端市面上的VNC客户端有很多，常用的比如Realvnc，另外也有很多开源的项目： TigerVNC RabbitRemoteControl 参考 VNC PROTOCOL 远程桌面协议对比 RFB协议解析 RFB协议具体通信说明","categories":[{"name":"code","slug":"code","permalink":"https://www.yaronzz.com/categories/code/"}],"tags":[{"name":"qt","slug":"qt","permalink":"https://www.yaronzz.com/tags/qt/"},{"name":"vnc","slug":"vnc","permalink":"https://www.yaronzz.com/tags/vnc/"},{"name":"arm","slug":"arm","permalink":"https://www.yaronzz.com/tags/arm/"}]},{"title":"UDP组播的说明与使用","slug":"UDP组播的说明与使用","date":"2021-12-21T04:00:33.000Z","updated":"2022-05-11T08:07:07.206Z","comments":true,"path":"post/udp_membership/","link":"","permalink":"https://www.yaronzz.com/post/udp_membership/","excerpt":"概述说明网络通讯中，数据传输方式有：单播，广播和组播。单播是一对一的通信，广播则是对网络中所有主机进行通信。在需要对网络中某些主机进行通信时，单播会多次重复发送数据，广播则会造成资源浪费与安全问题。而组播是将信息发送到某个组播组，只有加入组播组的主机才能接收到消息，这种方式解决了单播情况下数据的重复拷贝及带宽的重复占用，也解决了广播方式下带宽资源的浪费。 组播中数据发送者和接收者之间是一对多点的连接方式，多个接收者加入同一个组播组，共享同一个IP地址，同时组播组中的成员是动态的，某个成员的加入和退出并不影响原有的组播组。当网络中的某些用户需要特定数据时，组播数据发送者（即组播源）仅发送一次数据，借助组播路由协议为组播数据包建立组播分发树，被传递的数据到达距离用户端尽可能近的节点后才开始复制和分发。","text":"概述说明网络通讯中，数据传输方式有：单播，广播和组播。单播是一对一的通信，广播则是对网络中所有主机进行通信。在需要对网络中某些主机进行通信时，单播会多次重复发送数据，广播则会造成资源浪费与安全问题。而组播是将信息发送到某个组播组，只有加入组播组的主机才能接收到消息，这种方式解决了单播情况下数据的重复拷贝及带宽的重复占用，也解决了广播方式下带宽资源的浪费。 组播中数据发送者和接收者之间是一对多点的连接方式，多个接收者加入同一个组播组，共享同一个IP地址，同时组播组中的成员是动态的，某个成员的加入和退出并不影响原有的组播组。当网络中的某些用户需要特定数据时，组播数据发送者（即组播源）仅发送一次数据，借助组播路由协议为组播数据包建立组播分发树，被传递的数据到达距离用户端尽可能近的节点后才开始复制和分发。 组播地址组播组可以是永久的也可以是临时的。组播组地址中，有一部分由官方分配的，称为永久组播组。永久组播组保持不变的是它的ip地址，组中的成员构成可以发生变化。永久组播组中成员的数量都可以是任意的，甚至可以为零。那些没有保留下来供永久组播组使用的ip组播地址，可以被临时组播组利用。 224.0.0.0～224.0.0.255为预留的组播地址（永久组地址），地址224.0.0.0保留不做分配，其它地址供路由协议使用；224.0.1.0～224.0.1.255是公用组播地址，可以用于Internet；224.0.2.0～238.255.255.255为用户可用的组播地址（临时组地址），全网范围内有效；239.0.0.0～239.255.255.255为本地管理组播地址，仅在特定的本地范围内有效。 使用配置流程 创建套接字 由于UDP与TCP都是全双工的，所以可以使用同一个套接字进行同时收发操作。 123456#define UDP_MCAST_PORT 37102 //组播端口#define UDP_MCAST_ADDR \"224.0.1.88\" //组播地址auto socket = socket(AF_INET,SOCK_DGRAM,0);if (socket &lt;= 0) return false; 设置端口复用 123int opt = 1;if (setsockopt(socket, SOL_SOCKET, SO_REUSEADDR ,(char*)&amp;opt, sizeof(opt)) &lt; 0) return false; 绑定组播端口 1234567struct sockaddr_in addr;addr.sin_family = AF_INET;addr.sin_port = htons(UDP_MCAST_PORT);addr.sin_addr.s_addr = htonl(INADDR_ANY);if (bind(socket, (struct sockaddr*)&amp;addr, sizeof(addr)) &lt; 0) return false; 加入组播 123456struct ip_mreq mreq;mreq.imr_multiaddr.s_addr = inet_addr(UDP_MCAST_ADDR);mreq.imr_interface.s_addr = htonl(INADDR_ANY);if (setsockopt(socket, IPPROTO_IP, IP_ADD_MEMBERSHIP, (char*)&amp;mreq, sizeof(mreq)) &lt; 0) return false; 发送与接收 12345678910111213141516//发送struct sockaddr_in addrSrv;addrSrv.sin_family=AF_INET;addrSrv.sin_addr.s_addr = inet_addr(UDP_MCAST_ADDR);addrSrv.sin_port=htons(UDP_MCAST_PORT);if (sendto(socket, data, dataLen, 0, (struct sockaddr *)&amp;addrSrv,sizeof(addrSrv)) &gt; 0) return true;//接收struct sockaddr_in group_addr;socklen_t addr_len = sizeof(group_addr);int len = recvfrom(socket, buff, buffLen, 0, (struct sockaddr *) &amp;group_addr, (int *)&amp;addr_len);recvIP = inet_ntoa(group_addr.sin_addr);recvPort = group_addr.sin_port; 多网卡配置流程多网卡组播需要在加入组播时指定本地IP地址，并且需要在最后多加一步指定组播的出口网卡： 加入组播 123456789struct ip_mreq mreq;mreq.imr_multiaddr.s_addr = inet_addr(UDP_MCAST_ADDR);mreq.imr_interface.s_addr = htonl(INADDR_ANY);//指定接口接收组播信息mreq.imr_interface.s_addr = inet_addr(localIP);if (setsockopt(socket, IPPROTO_IP, IP_ADD_MEMBERSHIP, (char*)&amp;mreq, sizeof(mreq)) &lt; 0) return false; 指定组播出口网卡 123456struct in_addr addr;memset(&amp;addr, 0, sizeof(struct in_addr));addr.s_addr=inet_addr(localIP);if (setsockopt(socket, IPPROTO_IP, IP_MULTICAST_IF, (char*)&amp;addr, sizeof(addr)) &lt; 0) return false; 参考 IP地址划分、组播地址、公有IP、私有IP 组播基础","categories":[{"name":"code","slug":"code","permalink":"https://www.yaronzz.com/categories/code/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"https://www.yaronzz.com/tags/cpp/"},{"name":"udp","slug":"udp","permalink":"https://www.yaronzz.com/tags/udp/"}]},{"title":"WSL系统安装与使用","slug":"WSL系统安装与使用","date":"2021-12-08T02:47:20.000Z","updated":"2022-06-20T03:22:47.049Z","comments":true,"path":"post/wsl_system_install/","link":"","permalink":"https://www.yaronzz.com/post/wsl_system_install/","excerpt":"WSL是适用于 Linux 的 Windows 子系统，可让开发人员按原样运行 GNU/Linux 环境 - 包括大多数命令行工具、实用工具和应用程序 - 且不会产生传统虚拟机或双启动设置开销。 官方教程","text":"WSL是适用于 Linux 的 Windows 子系统，可让开发人员按原样运行 GNU/Linux 环境 - 包括大多数命令行工具、实用工具和应用程序 - 且不会产生传统虚拟机或双启动设置开销。 官方教程 启用子系统 控制面板 -&gt; 程序和功能 -&gt; 启用或关闭Windows功能 -&gt; 勾选 适用于Linux的Windows子系统 控制面板 -&gt; 程序和功能 -&gt; 启用或关闭Windows功能 -&gt; 勾选 虚拟机平台 安装Ubuntu 下载Ubuntu20.04系统，可以将系统下载到其他盘上 修改文件后缀名：Ubuntu20.04.appx --&gt; Ubuntu.zip，并解压 双击exe文件，输入用户名与密码即可 使用默认登录用户为root 打开管理员模式下的cmd，输入./ubuntu2004.exe config --default-user root 输入 net stop lxssmanager重启wsl即可 WSL配置与使用12345678910#更新wsl --update#查询已安装的子系统wsl -l -v#设置默认系统为wsl2wsl --set-default-version 2#将已安装的子系统升级到wsl2wsl --set-version Ubuntu 2#删除子系统wslconfig /unregister xxx WSL2需要保证Winows版本不低于19041 windwos下访问子系统目录，在文件夹路径栏上输入：\\\\wsl$ WSL1和WSL2的区别 WSL2与VMware和VirtualBox的共存：需要VMware15.5.5+，VirtualBox 6+才能打开 32位交叉编译环境配置 只支持WSL2版本 1234sudo dpkg --add-architecture i386sudo apt-get updatesudo apt-get install libc6:i386 libncurses5:i386 libstdc++6:i386 zlib1g:i386 -ysudo apt-get install g++ -y 运行图形界面window内核版本为21+先在windows更新WSL：wsl --update， 再在linux安装界面程序：apt-get install gedit，win10 21+系统内置了WSLG（GUI）功能，可以在Window菜单发现多了一个Ubuntu目录，其中显示了已经安装的界面程序，直接点击即可运行： 内核版本不支持 安装VcXsrv Windows X Server download | SourceForge.net 打开并配置VcXsrv linux设置显示的服务端 打开bashrc文件：vi ~/.bashrc 在文件最后添加两行并保存： 123#下面的IP地址为window的ipexport DISPLAY=192.168.0.218:0export LIBGL_ALWAYS_INDIRECT=1 刷新配置：source .bashrc 测试界面软件：gedit test.ini 开启桥接网络配置Hyper-V 打开以太网配置属性，如果Hyper-V可扩展的虚拟交换机有开启的话，需要先关闭 打开Hyper-V管理器，点击虚拟交换机管理器 选择WSL，连接类型选择外部网络，然后点击应用即可 WLS配置 设置IP 1234567#静态IPip addr flush dev eth0ip addr add 192.168.0.155/23 broadcast 192.168.1.255 dev eth0#动态IPapt-get install udhcpcudhcpc 设置路由 1ip route add 0.0.0.0/0 via 192.168.1.1 dev eth0 设置DNS解析 打开wsl配置 vi /etc/wsl.conf，输入 12[network]generateResolvConf = false 打开dns配置 /etc/resolv.conf，输入 123nameserver 192.168.1.1nameserver 114.114.114.114nameserver 223.5.5.5","categories":[{"name":"软件","slug":"软件","permalink":"https://www.yaronzz.com/categories/%E8%BD%AF%E4%BB%B6/"}],"tags":[{"name":"windows","slug":"windows","permalink":"https://www.yaronzz.com/tags/windows/"}]},{"title":"Qt配置与常见问题","slug":"Qt配置与常见问题","date":"2021-10-22T02:40:33.000Z","updated":"2022-05-11T08:07:07.251Z","comments":true,"path":"post/qt_note/","link":"","permalink":"https://www.yaronzz.com/post/qt_note/","excerpt":"Qt是一个1991年由Qt Company开发的跨平台C++图形用户界面应用程序开发框架。它既可以开发GUI程序，也可用于开发非GUI程序，比如控制台工具和服务器。Qt是面向对象的框架，使用特殊的代码生成扩展（称为元对象编译器(Meta Object Compiler, moc)）以及一些宏，Qt很容易扩展，并且允许真正地组件编程。","text":"Qt是一个1991年由Qt Company开发的跨平台C++图形用户界面应用程序开发框架。它既可以开发GUI程序，也可用于开发非GUI程序，比如控制台工具和服务器。Qt是面向对象的框架，使用特殊的代码生成扩展（称为元对象编译器(Meta Object Compiler, moc)）以及一些宏，Qt很容易扩展，并且允许真正地组件编程。 QT配置设置代码片段配置路径：工具-&gt;选项-&gt;文本编辑器-&gt;片段 文件头说明 123456/** * @brief $$ * @author yaronhuang@foxmail.com * @date %&#123;CurrentDate:yyyy/MM/dd&#125; * @note */ 函数注释 12345/** * @brief $$ * @param string * @return void */ 多个pro项目管理12345TEMPLATE = subdirsCONFIG += ordered #顺序编译SUBDIRS += pro0\\ pro1\\ app VS打开QT项目在C/C++中添加/utf-8支持 库编译与引用库分为动态库和静态库，通过文件名后缀可以知道库的类型：so、dll(动态库);a、lib(静态库)。 在windows平台下使用QT编译，库的后缀为dll和a。 编译库 静态库配置： 在pro文件中加入以下语句即可： 12TEMPLATE = lib #生成库CONFIG += staticlib #类型为静态库 动态库配置： 在pro文件中加入以下语句： 12TEMPLATE = lib #生成库DEFINES += BIL_EXPORT 提供给外部使用的类需要增加导出前缀： 123456#include &lt;QtCore/qglobal.h&gt;#ifdef BIL_EXPORT # define LUIP_SHARE Q_DECL_EXPORT#else # define LUIP_SHARE Q_DECL_IMPORT#endif 1234567class LUIP_SHARE SumObj&#123;public: SumObj(); int run(int a, int b);&#125;; 生成的动态库目录下会出现dll和a文件，其中a文件是没用的，它并不能用于静态库，因为它是不完整的，可以看出a文件的体积也很小。 引用库正常的库名格式为libxxxx.a指定时只需要xxxx即可，如libtest.a,则为 -ltest。 同时有动态库和静态库，那么优先链接.so，如果想要强制使用静态库，那么写成-static -lxxxx即可。不过QT编译器好像也会通过类名是否添加导入关键字Q_DECL_IMPORT来确定是链接动态库还是静态库。 在pro文件中加入以下语句： 1LIBS += -L$$PWD/../bin/ -ltest #引用bin目录下的test库 常见问题调用SetObjectName无效自定义界面时，界面类继承QWidget，然后调用setObjectName()设置样式，但并没有起作用，解决方法如下： 方法1：设置WA_StyledBackground属性this-&gt;setAttribute(Qt::WA_StyledBackground); 方法2：将QWidget改成QFrame 方法3：重写paintEvent 1234567void ClassName::paintEvent(QPaintEvent *)&#123; QStyleOption opt; opt.init(this); QPainter p(this); style()-&gt;drawPrimitive(QStyle::PE_Widget, &amp;opt, &amp;p, this);&#125; 编译异常multiple definition of qMain(int, char**)一般是重复定义main函数了，可以全局搜索main()，或者检查pro文件中是否有重复添加的cpp和h，有时给工程中乱添加文件时会导致这种情况。 release版本编译，执行文件很大 检查qamke构建配置是否为debug 检查pro文件是否有添加调试宏 12QMAKE_CXXFLAGS_RELEASE = $$QMAKE_CFLAGS_RELEASE_WITH_DEBUGINFOQMAKE_LFLAGS_RELEASE = $$QMAKE_LFLAGS_RELEASE_WITH_DEBUGINFO","categories":[{"name":"code","slug":"code","permalink":"https://www.yaronzz.com/categories/code/"}],"tags":[{"name":"qt","slug":"qt","permalink":"https://www.yaronzz.com/tags/qt/"}]},{"title":"Python笔记","slug":"Python笔记","date":"2021-10-20T02:06:33.000Z","updated":"2022-05-27T02:59:44.479Z","comments":true,"path":"post/python_note/","link":"","permalink":"https://www.yaronzz.com/post/python_note/","excerpt":"安装与使用 pip提速，使用国内源 1234#清华源pip install xxx --upgrade -i https://pypi.tuna.tsinghua.edu.cn/simple#阿里云pip install xxx --upgrade -i http://mirrors.aliyun.com/pypi/simple/ 永久修改： 1234567#打开配置,windows下C:/Users/xxxx/pip/pip.inivi ~/.pip/pip.conf#输入以下内容[global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple[install]trusted-host=mirrors.aliyun.com pip搜索 12pip install pip_searchpip_search xxxx 文件服务器 1234# python3python3 -m http.server# python2python -m SimpleHTTPServer 基本语法 判断类型 12345#使用isinstance或type判断变量类型#isinstance可判断父类，type不支持判断父类test = A()check = isinstance(test, A) #Truecheck = (type(test) == A) #True 运算 1234567#数值的除法包含两个运算符：/ 返回一个浮点数，// 返回一个整数。a = 10b = 6c = a / b #除法 1.66d = a // b #整除 1e = a % b #求模 4f = 2 ** 3 #求幂 8","text":"安装与使用 pip提速，使用国内源 1234#清华源pip install xxx --upgrade -i https://pypi.tuna.tsinghua.edu.cn/simple#阿里云pip install xxx --upgrade -i http://mirrors.aliyun.com/pypi/simple/ 永久修改： 1234567#打开配置,windows下C:/Users/xxxx/pip/pip.inivi ~/.pip/pip.conf#输入以下内容[global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple[install]trusted-host=mirrors.aliyun.com pip搜索 12pip install pip_searchpip_search xxxx 文件服务器 1234# python3python3 -m http.server# python2python -m SimpleHTTPServer 基本语法 判断类型 12345#使用isinstance或type判断变量类型#isinstance可判断父类，type不支持判断父类test = A()check = isinstance(test, A) #Truecheck = (type(test) == A) #True 运算 1234567#数值的除法包含两个运算符：/ 返回一个浮点数，// 返回一个整数。a = 10b = 6c = a / b #除法 1.66d = a // b #整除 1e = a % b #求模 4f = 2 ** 3 #求幂 8 取反 12a &#x3D; Falseb &#x3D; bool(1 - a) 整型int 1230b100 = 4 #二进制0o100 = 64 #八进制0x100 = 256 #十六进制 列表1234567891011# 创建一个由1到9的数字构成的列表items1 = [x for x in range(1, 10)]print(items1) # [1, 2, 3, 4, 5, 6, 7, 8, 9]# 创建一个由'hello world'中除空格和元音字母外的字符构成的列表items2 = [x for x in 'hello world' if x not in ' aeiou']print(items2) # ['h', 'l', 'l', 'w', 'r', 'l', 'd']# 创建一个由个两个字符串中字符的笛卡尔积构成的列表items3 = [x + y for x in 'ABC' for y in '12']print(items3) # ['A1', 'A2', 'B1', 'B2', 'C1', 'C2'] 元祖tuple123456789101112131415a = 1, 10, 100, 1000i, j, *k = aprint(i, j, k) # 1 10 [100, 1000]i, *j, k = aprint(i, j, k) # 1 [10, 100] 1000*i, j, k = aprint(i, j, k) # [1, 10] 100 1000*i, j = aprint(i, j) # [1, 10, 100] 1000i, *j = aprint(i, j) # 1 [10, 100, 1000]i, j, k, *l = aprint(i, j, k, l) # 1 10 100 [1000]i, j, k, l, *m = aprint(i, j, k, l, m) # 1 10 100 1000 [] LambdaLambda匿名函数的格式为：lambda 参数:表达式 参数可以多个，中间以逗号隔开 表达式只有一个，省略return 1234def sum(x, y): return x + y #使用lambda的形式为sum = lambda x,y:x+y Lambda经常与map函数同时使用，用于处理列表数据： 1234#计算数组内元素平方，[1,9,36]list(map(lambda x:x**2, [1,3,6]))#计算两组数组内元素之和，[3,7,11,15,19]list(map(lambda x, y: x + y, [1, 3, 5, 7, 9], [2, 4, 6, 8, 10])) 函数装饰1234567891011121314151617181920212223242526import randomimport timedef record_time(func): def wrapper(*args, **kwargs): start = time.time() result = func(*args, **kwargs) end = time.time() print(f'&#123;func.__name__&#125;执行时间: &#123;end - start:.3f&#125;秒') return result return wrapper@record_timedef download(filename): print(f'开始下载&#123;filename&#125;.') time.sleep(random.randint(2, 6)) print(f'&#123;filename&#125;下载完成.')@record_timedef upload(filename): print(f'开始上传&#123;filename&#125;.') time.sleep(random.randint(4, 8)) print(f'&#123;filename&#125;上传完成.')download('MySQL从删库到跑路.avi')upload('Python从入门到住院.pdf') 打包工具pyinstaller 参数说明： 参数名 描述 说明 –distpath 生成文件放在哪里 默认：当前目录的dist文件夹内 –workpath 生成过程中的中间文件放在哪里 默认：当前目录的build文件夹内 -y 如果dist文件夹内已经存在生成文件，则不询问用户，直接覆盖 默认：询问是否覆盖 -a 不包含unicode支持 默认：尽可能支持unicode –clean 在本次编译开始时，清空上一次编译生成的各种文件 默认：不清除 -D 生成one-folder的程序（默认） 结果是一个目录，各种第三方依赖、资源和exe同时存储在该目录 -F 生成one-file的程序 结果是一个exe文件，所有的第三方依赖、资源和代码均被打包进该exe内 -specpath 指定.spec文件的存储路径 默认：当前目录 -n 生成的.exe文件和.spec的文件名 –add-data 打包额外资源 用法：pyinstaller main.py –add-data=src;dest。windows以;分割，linux以:分割 –add-binary 打包额外的代码 用法：同–add-data。用binary添加的文件，pyi会分析它引用的文件并把它们一同添加进来 -c 显示命令行窗口 -w 不显示命令行窗口 -i 为main.exe指定图标 pyinstaller -i beauty.ico main.py –version-file 添加版本信息文件 (Windows特有的参数) pyinstaller –version-file ver.txt 文件服务器 python3 -m http.server python -m SimpleHTTPServer","categories":[{"name":"code","slug":"code","permalink":"https://www.yaronzz.com/categories/code/"}],"tags":[{"name":"python","slug":"python","permalink":"https://www.yaronzz.com/tags/python/"}]},{"title":"SQLite笔记","slug":"SQLite笔记 ","date":"2021-10-18T03:06:33.000Z","updated":"2022-06-20T03:22:47.213Z","comments":true,"path":"post/sqlite_note/","link":"","permalink":"https://www.yaronzz.com/post/sqlite_note/","excerpt":"SQLite 是一款轻型的数据库，在嵌入式设备中应用十分广泛，它支持Windows/Linux/Unix等等主流的操作系统，其源代码不受版权限制。 优点： 不需要安装与配置，以文件的形式作为数据库 轻量、小型，对嵌入式设备十分友好 事务是完全兼容 ACID 的，允许从多个进程或线程安全访问 支持 SQL92（SQL2）标准的大多数查询语言的功能 SQLite的命令包括： 分类 命令 描述 表操作 CREATE 创建表 表操作 ALTER 修改表 表操作 DROP 删除表 记录操作 INSERT 插入记录 记录操作 UPDATE 修改更新表记录 记录操作 DELETE 删除记录 检索 SELECT 查询记录","text":"SQLite 是一款轻型的数据库，在嵌入式设备中应用十分广泛，它支持Windows/Linux/Unix等等主流的操作系统，其源代码不受版权限制。 优点： 不需要安装与配置，以文件的形式作为数据库 轻量、小型，对嵌入式设备十分友好 事务是完全兼容 ACID 的，允许从多个进程或线程安全访问 支持 SQL92（SQL2）标准的大多数查询语言的功能 SQLite的命令包括： 分类 命令 描述 表操作 CREATE 创建表 表操作 ALTER 修改表 表操作 DROP 删除表 记录操作 INSERT 插入记录 记录操作 UPDATE 修改更新表记录 记录操作 DELETE 删除记录 检索 SELECT 查询记录 基本操作表操作创建和删除表创建格式：CREATE TABLE IF NOT EXISTS 表名 (列名 类型)删除格式：DROP 表名 1234CREATE TABLE IF NOT EXISTS &quot;student&quot; ( id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, name VARCHAR(30) NOT NULL, age FLOAT); 更新sqlite_sequence由于在Sqlite中使用自增长字段，引擎会自动产生一个sqlite_sequence表，用于记录每个表的自增长字段的已使用的最大值，所以要一起更新下。如果有没有设置自增长，则跳过此步骤。 1UPDATE &quot;sqlite_sequence&quot; SET seq &#x3D; 3 WHERE name &#x3D; &#39;Student&#39;; 修改表名称格式：ALTER TABLE 旧表名 RENAME TO 新表名 1ALTER TABLE or_sql_table RENAME TO new_table; 增加表字段格式：ALTER TABLE 表名 ADD COLUMN 列名 数据类型 1ALTER TABLE new_table ADD COLUMN sex Text; 查询表结构格式：RAGMA TABLE_INFO (表名) 1PRAGMA TABLE_INFO (new_table); 记录操作插入和删除记录插入格式：INSERT INTO 表名 (列名1,列名2,...) VALUES (值1,值2,...) 删除格式：DELETE FROM 表名 12INSERT INTO sutdent (name,age) VALUES (&#39;xiaoming&#39;,18);DELETE FROM student WHERE name &#x3D; &#39;xiaoming&#39;; 更新记录格式：UPDATE 表名 SET 列名 = 列值 WHERE 条件 1UPDATE student SET age &#x3D; 18 WHERE name &#x3D; &#39;xiaoming&#39;; 不存在则插入格式：INSERT INTO 表名 (列名1,列名2,...) SELECT 值1,值2,... WHERE NOT EXISTS (SELECT * FROM 表名 WHERE 列名=列值) 1INSERT INTO tb_test (name) select ('test4') where not exists(select * from tb_test where name='test4') 搜索LIKE与GLOB搜索格式：SELECT 列名 FROM 表名 WHERE 列名 LIKE &quot;XXX&quot;或SELECT 列名 FROM 表名 WHERE 列名 GLOB &quot;XXX&quot; LIKE关键字通配符包括：%：表示有N个字符和 _：表示有1个字符，不区分大小写 GLOB关键字通配符包括：*：表示有N个字符和 ?：表示有1个字符，区分大小写 12SELECT * FROM student WHERE name LINK &#39;%ming&#39;SELECT * FROM student WHERE name LINK &#39;%min_&#39; LIMIT和OFFSET翻页格式：SELECT 列名 FROM 表名 LIMIT 数量 OFFSET 偏移; 12-- 显示1到4的行SELECT * FROM student LIMIT 3 OFFSET 1 分组与排序分组格式：SELECT 列名 FROM 表名 WHERE 条件 GROUP BY 列名 排序格式：SELECT 列名 FROM 表名 WHERE 条件 ORDER BY 列名 关键字; 关键字包括： ASC：升序 DESC：降序 唯一值格式：SELECT DISTINCT 列名 FROM 表名 12-- 查询所有学生名SELECT DISTINCT name FROM student 函数 计数COUNT 最大最小值MAX\\MIN 平均值AVG 和SUM 绝对值ABS 获取字符串长度LENGTH 转换大小写UPPER\\LOWER","categories":[{"name":"code","slug":"code","permalink":"https://www.yaronzz.com/categories/code/"}],"tags":[{"name":"sqlite","slug":"sqlite","permalink":"https://www.yaronzz.com/tags/sqlite/"}]},{"title":"Python字符串","slug":"Python字符串","date":"2021-10-15T00:40:33.000Z","updated":"2022-05-11T08:07:07.275Z","comments":true,"path":"post/python_string/","link":"","permalink":"https://www.yaronzz.com/post/python_string/","excerpt":"索引字符串的索引是只读，不能修改，从左到右的索引以0开始，从右到左的索引以-1开始（因为-0=0程序无法识别左右） 1234test = 'name'c1 = test[0] #nc2 = test[-1] #ec3 = test[-2] #m","text":"索引字符串的索引是只读，不能修改，从左到右的索引以0开始，从右到左的索引以-1开始（因为-0=0程序无法识别左右） 1234test = 'name'c1 = test[0] #nc2 = test[-1] #ec3 = test[-2] #m 截取从字符串中获取子串，类似substring之类的功能，也是以索引来获取。 格式为：字符串[头下标，尾下标]，采用前闭后开的规则，表示截取到尾下标前一个字符，示例如下： 12345test = 'name'c1 = test[0:-1] #namc2 = test[0:3] #namc3 = test[0:] #namec4 = test[:3] #nam 忽略转义字符此用法最适合对windows的路径做处理，路径格式一般为C:\\user\\file.txt，在代码中需要对转义字符\\做处理，操作起来比较繁琐。 1234#反斜杠可以用来转义，使用r可以让反斜杠不发生转义path = \"C:\\\\user\\\\file.txt\"path2 = r\"C:\\user\\file.txt\"test = r\"this is a line with \\n\" 字符串拼接python提供多种拼接方式，常见如下： 12345678910111213#最终组成this is my names1 = 'my's2 = 'name'#普通拼接s3 = \"this is \" + s1 + \" \" + s2#formats3 = 'this is &#123;&#125; &#123;&#125;'.format(s1, s2)s3 = 'this is &#123;1&#125; &#123;0&#125;'.format(s2, s1)#f关键字s3 = f'this is &#123;s1&#125; &#123;s2&#125;'#占位符，保留1位小数点n1 = 30.56s3 = f'&#123;n1:.1f&#125;摄氏度' 打印123test = 'name'print(test)print(test, end='') #不换行 格式化1234567891011s = 'hello, world'# center方法以宽度20将字符串居中并在两侧填充*print(s.center(20, '*')) # ****hello, world****# rjust方法以宽度20将字符串右对齐并在左侧填充空格print(s.rjust(20)) # hello, world# ljust方法以宽度20将字符串左对齐并在右侧填充~print(s.ljust(20, '~')) # hello, world~~~~~~~~# 在字符串的左侧补零print('33'.zfill(5)) # 00033print('-33'.zfill(5)) # -0033","categories":[{"name":"code","slug":"code","permalink":"https://www.yaronzz.com/categories/code/"}],"tags":[{"name":"python","slug":"python","permalink":"https://www.yaronzz.com/tags/python/"}]},{"title":"C++Lambda表达式","slug":"C++Lambda表达式","date":"2021-10-14T04:40:33.000Z","updated":"2022-05-11T08:07:07.268Z","comments":true,"path":"post/cpp_lambda/","link":"","permalink":"https://www.yaronzz.com/post/cpp_lambda/","excerpt":"概述C++ 11 中的 Lambda 表达式用于定义并创建匿名的函数对象，以简化编程工作。Lambda 的语法形式如下： 12345678[捕获列表] (参数) mutable 或 exception 声明 -&gt; 返回值类型 &#123;函数体&#125;//计算两个值的和auto func = [](int a, int b) -&gt; int&#123;return a+b;&#125;;//当返回值的类型是确定时，可以忽略返回值auto func = [](int a, int b)&#123;return a + b;&#125;;//调用int sum = func(1, 3);","text":"概述C++ 11 中的 Lambda 表达式用于定义并创建匿名的函数对象，以简化编程工作。Lambda 的语法形式如下： 12345678[捕获列表] (参数) mutable 或 exception 声明 -&gt; 返回值类型 &#123;函数体&#125;//计算两个值的和auto func = [](int a, int b) -&gt; int&#123;return a+b;&#125;;//当返回值的类型是确定时，可以忽略返回值auto func = [](int a, int b)&#123;return a + b;&#125;;//调用int sum = func(1, 3); 语法分析捕获列表Lambda 表达式相当于一个类，那么捕获列表就是传递给这个类的类成员。比如： 12345678910111213141516171819202122232425262728class Labmda&#123;public: const int test; Labmda(int value):test(value) &#123; &#125;public: int run(int a, int b) &#123; return a + b + test; &#125;&#125;int main()&#123; int test = 10; auto func = Labmda(test); int sum = func.run(1, 3);&#125;//使用Lambda 表达式的写法int main()&#123; int test = 10; auto func = [test](int a, int b)&#123;return a + b + test;&#125;; int sum = func(1, 3);&#125; 捕获列表有以下格式： 格式 描述 [] 不带任何参数 [=] Lambda表达式之前的局部变量，包括所在类的this，变量按值方式传递 [&amp;] Lambda表达式之前的局部变量，包括所在类的this，变量按引用方式传递 [this] Lambda表达式所在类的this [a] Lambda表达式之前的局部变量a的值，也可以传入多个值，如[a , b] [&amp;a] Lambda表达式之前的局部变量a的引用 关键字声明关键字声明一般都很少用到，也不建议随便使用，可以忽略不计。 mutable当捕获列表以值的方式传递时有效，加上此关键字后，可以修改Lambda类成员（带const修饰符）。比如： 12345int test = 10;//编译报错，test成员不能修改auto func = [test](int a, int b)&#123;test = 8; return a + b + test;&#125;; //编译正常auto func = [test](int a, int b)mutable &#123;test = 8; return a + b + test;&#125;; 这里需要注意的是：Lambda类成员test修改之后，并不会改变外部int test的值。 exceptionexception 声明用于指定函数抛出的异常，如抛出整数类型的异常，可以使用 throw(int) 示例捕获列表按值传递1234int test = 10;auto func = [=](int a, int b)&#123;return a + b + test;&#125;;auto func2 = [test](int a, int b)&#123;return a + b + test;&#125;;int sum = func(1, 3); //sum等于14 这里需要注意的是func表达式中test的值只更新到表达式之前： 1234int test = 10;auto func = [=](int a, int b)&#123;return a + b + test;&#125;;test = 5;int sum = func(1, 3); //sum还是等于14 捕获列表按引用传递1234int test = 10;auto func = [&amp;](int a, int b)&#123;test = 5; return a + b + test;&#125;;auto func2 = [&amp;test](int a, int b)&#123;test = 5; return a + b + test;&#125;;int sum = func(1, 3); //sum等于9，test等于5 这里func表达式中test的值就能随时更新： 1234int test = 10;auto func = [&amp;](int a, int b)&#123;return a + b + test;&#125;;test = 5;int sum = func(1, 3); //sum等于9，test等于5","categories":[{"name":"code","slug":"code","permalink":"https://www.yaronzz.com/categories/code/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"https://www.yaronzz.com/tags/cpp/"},{"name":"lambda","slug":"lambda","permalink":"https://www.yaronzz.com/tags/lambda/"}]},{"title":"Linux常用命令","slug":"Liunx常用命令","date":"2021-10-13T04:40:33.000Z","updated":"2022-05-21T07:56:31.701Z","comments":true,"path":"post/linux_cmd/","link":"","permalink":"https://www.yaronzz.com/post/linux_cmd/","excerpt":"目录与文件目录 创建目录：mkdir xxx 删除目录：rm -rf xxx 切换目录：cd xxx，返回：cd - 复制目录：cp ./test ./test3 -r -p，-r表示递归，-p表示保留文件属性 文件 创建文件：touch xxx.txt 复制文件：cp xxx.txt newxxx.txt 查看文件：cat xxx.txt，最后5行：cat xxx.txt | tail -n 5 其他 显示列表：ls -lh 连接文件夹：ln -s 源文件夹 目标文件夹","text":"目录与文件目录 创建目录：mkdir xxx 删除目录：rm -rf xxx 切换目录：cd xxx，返回：cd - 复制目录：cp ./test ./test3 -r -p，-r表示递归，-p表示保留文件属性 文件 创建文件：touch xxx.txt 复制文件：cp xxx.txt newxxx.txt 查看文件：cat xxx.txt，最后5行：cat xxx.txt | tail -n 5 其他 显示列表：ls -lh 连接文件夹：ln -s 源文件夹 目标文件夹 压缩解压 zip加密：zip -r xxx.zip ./* -P &quot;123&quot;，解密：unzip -P &quot;123&quot; xxx.zip 12345678910111213141516171819202122232425262728293031323334-A 调整可执行的自动解压缩文件。-b&lt;工作目录&gt; 指定暂时存放文件的目录。-c 替每个被压缩的文件加上注释。-d 从压缩文件内删除指定的文件。-D 压缩文件内不建立目录名称。-f 更新现有的文件。-F 尝试修复已损坏的压缩文件。-g 将文件压缩后附加在既有的压缩文件之后，而非另行建立新的压缩文件。-h 在线帮助。-i&lt;范本样式&gt; 只压缩符合条件的文件。-j 只保存文件名称及其内容，而不存放任何目录名称。-J 删除压缩文件前面不必要的数据。-k 使用MS-DOS兼容格式的文件名称。-l 压缩文件时，把LF字符置换成LF+CR字符。-ll 压缩文件时，把LF+CR字符置换成LF字符。-L 显示版权信息。-m 将文件压缩并加入压缩文件后，删除原始文件，即把文件移到压缩文件中。-n&lt;字尾字符串&gt; 不压缩具有特定字尾字符串的文件。-o 以压缩文件内拥有最新更改时间的文件为准，将压缩文件的更改时间设成和该文件相同。-q 不显示指令执行过程。-r 递归处理，将指定目录下的所有文件和子目录一并处理。-S 包含系统和隐藏文件。-t&lt;日期时间&gt; 把压缩文件的日期设成指定的日期。-T 检查备份文件内的每个文件是否正确无误。-u 与 -f 参数类似，但是除了更新现有的文件外，也会将压缩文件中的其他文件解压缩到目录中。-v 显示指令执行过程或显示版本信息。-V 保存VMS操作系统的文件属性。-w 在文件名称里假如版本编号，本参数仅在VMS操作系统下有效。-x&lt;范本样式&gt; 压缩时排除符合条件的文件。-X 不保存额外的文件属性。-y 直接保存符号连接，而非该连接所指向的文件，本参数仅在UNIX之类的系统下有效。-z 替压缩文件加上注释。-$ 保存第一个被压缩文件所在磁盘的卷册名称。-&lt;压缩效率&gt; 压缩效率是一个介于1-9的数值。 tar压缩：tar -zcvf xxx.tar.gz ./*，tar解压：tar -zxvf xxx.tar.gz -C /opt 12345c: 创建文档t： 列出存档内容x： 提取存档f： filename 要操作的文档名v： 详细信息 过滤、管道与重定向 文件内容查找 1234#过滤出文件 /etc/passwd 中包含 `root` 的记录grep 'root' /etc/passwd#过滤出目录 /var/log/ 目录中包含linux的记录(递归查找)grep -r 'linux' /var/log/ 输出过滤 12#打印/etc/passwd 文件中包含 `root` 的记录cat /etc/passwd \\| grep 'root' 输出重定向 12#输出重定向到一个文件中echo 'Hello World' &gt; test.txt 运维命令 测试网络 12#发送 4 个 ping 包, 检查与其是否联通ping -c 4 cloud.tencent.com 端口查询 123456#列出所有处于监听状态的tcp端口netstat -lt#查看所有的端口信息, 包括 PID 和进程名称netstat -tulpn#查看系统位数getconf LONG_BIT 进程操作 123456789#查询运行的进程ps -elf#过滤查询进程#a不与terminal有关的所有进程; u有效用户进程; x完整的信息ps aux | grep 'ssh'#动态显示运行的进程（动态表格）top#杀进程killall -9 xxxx NFS挂载 1234#挂载目录d:\\demo到/mnt/cp下(cp目录需要先创建)mount -t nfs -o nolock 10.13.150.244:/d/demo /mnt/cp#卸载目录mount -v /mnt/cp 日期时间获取系统时间：date，输入格式：Tue Sep 14 11:05:51 CST 2021 其中CST表示上海时区，如果是UTC，则表示伦敦时区。如果想设置系统时区位东八区（北京时间），则运行以下命令： 12345#当前UTC时间减8小时cstTimeStr=$(date '+%Y-%m-%d %H:%M:%S' -d@$(($(date +%s)-60*60*8)))date -s \"$cstTimeStr\"#拷贝时区文件cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime date命令用法：%Y表示年，%m表示月，%d表示日，%H表示小时，%M表示分钟，%S表示秒，%s表示从 1970 年 1 月 1 日 00:00:00 UTC 到目前为止的秒数。 12345678#显示时间date \"+cur time: %Y-%m-%d %H:%M:%S\"#显示计算之后的时间date \"+cur time: %Y-%m-%d %H:%M:%S\" -d \"-3 hour\"#时间戳date +%s#设置时间date -s \"2050-09-01 01:05:30\" 查找查找命令：find [path] [option] [action] 通过文件时间进行查找： 1234#查找目录下今天修改的文件find ./ -mtime 0#查找目录下昨天修改的文件find ./ -mtion 1 通过文件名与大小进行查找： 1234#查找文件名find ./ -name 'config.ini'#查找大于10k的文件find ./ -size +10k 系统 查询支持的文件系统：cat /proc/filesystems 查询网卡的mac地址：cat /sys/class/net/eth0/address","categories":[{"name":"linux","slug":"linux","permalink":"https://www.yaronzz.com/categories/linux/"}],"tags":[{"name":"shell","slug":"shell","permalink":"https://www.yaronzz.com/tags/shell/"}]},{"title":"Qt-Qss笔记","slug":"Qt-Qss笔记","date":"2021-10-11T03:12:30.000Z","updated":"2022-05-11T08:07:07.217Z","comments":true,"path":"post/qt_qss/","link":"","permalink":"https://www.yaronzz.com/post/qt_qss/","excerpt":"QT使用QSS（Qt Style Sheet）来设置控件样式并进行个性化定制和界面美化。QSS的语法和CSS十分类似，都是使用选择器来配置控件属性。 QT导入QSS样式文件的方式也十分简单，只需要调用setStyleSheet进行设置： 12345QApplication app(argc, argv);QFile qss(\"style.qss\");qss.open(QFile::ReadOnly);app.setStyleSheet(qss.readAll());qss.close();","text":"QT使用QSS（Qt Style Sheet）来设置控件样式并进行个性化定制和界面美化。QSS的语法和CSS十分类似，都是使用选择器来配置控件属性。 QT导入QSS样式文件的方式也十分简单，只需要调用setStyleSheet进行设置： 12345QApplication app(argc, argv);QFile qss(\"style.qss\");qss.open(QFile::ReadOnly);app.setStyleSheet(qss.readAll());qss.close(); QSS语法QSS同CSS语法规则类似：selector {attribute:value};其中： selector选择器：通常情况下为控件类名（如QPushButton）； attribute属性：待设置的样式表属性（如background-color）； value值：属性赋值（如rgb(40, 85, 20);）； 1QPushButton &#123; color: red &#125; Qt样式表通常不区分大小写(即，color、Color、color和color指的是同一属性)，但是是类名、对象名和Qt属性名，它们区分大小写。 selector选择器的有多种使用方式，如下： 选择器 举例 解释 通用选择器 * 应用于QT的所有控件 类选择器1 QPushButton 只作用于QPushButton及其子类的实例 类选择器2 .QPushButton 只作用于QPushButton 组选择器 QPushButton,QComboBox 作用于QPushButton和QComboBox及其子类的实例 属性选择器 QPushButton[flat=“false”] 作用于非平面（flat=“false”）的QPushButton实例。 ID选择器 QPushButton#okButton 作用于对象名称为okButton的所有QPushButton实例。 后代选择器 QDialog QPushButton 匹配作为QDialog的子体(子级、孙级等)的所有QPushButton实例。 子选择器 QDialog &gt; QPushButton 匹配作为QDialog的直接子级的所有QPushButton实例。 子控制 QComboBox::drop-down 要设置复杂 widget 的样式，需要访问 widget 的子控件，如QComboBox的下拉按钮或QSpinBox的上下箭头。选择器可以包含子控件，从而可以将规则的应用限制到特定的 widget 子控件 类伪状态 QPushButton::hover 用于设置控件在某个状态下的属性，伪状态的类型有多种，在下面介绍。 QSS伪状态 伪状态 描述 :active 此状态在widget驻留在活动窗口中时设置。 adjoins-item 此状态在QTreeView的::branch与项相邻时设置。 :alternate 当QAbstractItemView::ternatingRowColors()设置为true时，将为绘制QAbstractItemView的行时的每隔一行设置此状态。 :bottom 该项目位于底部。例如，标签位于底部的QTabBar。 :checked 该项目已选中。例如，QAbstractButton的选中状态。 :closable 这些项目可以关闭。例如，QDockWidget打开了QDockWidget::DockWidgetClosable功能。 :default 该项目为默认值。例如，QMenu中的默认QPushButton或默认操作。 :disabled 该项目已禁用。 :editable QComboBox是可编辑的。 :edit-focus 该项具有编辑焦点(请参见QStyle::State_HasEditFocus)。此状态仅适用于Qt扩展应用程序。 :enabled 该项目已启用。 :exclusive 该项目是独占项目组的一部分。例如，独占QActionGroup中的菜单项。 :first 该项目是(列表中的)第一个项目。例如，QTabBar中的第一个选项卡。 :flat 这件物品是平的。例如，平面QPushButton。 :floatable 这些项目可以浮动。例如，QDockWidget打开了QDockWidget：：DockWidgetFloatable功能。 :focus 该项具有输入焦点。 :has-children 该项目具有子项。例如，QTreeView中具有子项的项。 :has-siblings 该项目有同级。例如，QTreeView中的同级项。 :horizontal 该项目具有水平方向 :hover 鼠标悬停在该项目上。 :indeterminate 该项具有不确定状态。例如，部分选中QCheckBox或QRadioButton。 :last 该项是(列表中的)最后一项。例如，QTabBar中的最后一个选项卡。 :left 该项目位于左侧。例如，选项卡位于左侧的QTabBar。 :maximized 该项目将最大化。例如，最大化的QMdiSubWindow。 :middle 项目在中间(在列表中)。例如，QTabBar中不在开头或结尾的制表符。 :minimized 该项目被最小化。例如，最小化的QMdiSubWindow。 :movable 物品可以四处移动。例如，QDockWidget打开了QDockWidget::DockWidgetMoovable功能。 :no-frame 该项目没有框架。例如，无框架的QSpinBox或QLineEdit。 :non-exclusive 该项是非独占项组的一部分。例如，非独占QActionGroup中的菜单项。 :off 对于可以切换的项目，这适用于处于“关闭”状态的项目。 :on 对于可以切换的项目，这适用于处于“打开”状态的widget。 :only-one 该项目是(列表中的)唯一项目。例如，QTabBar中的一个单独的选项卡。 :open 该项目处于打开状态。例如，QTreeView中的展开项，或具有打开菜单的QComboBox或QPushButton。 :next-selected 选择下一项(在列表中)。例如，QTabBar的选定选项卡紧挨着该项。 :pressed 正在使用鼠标按下该项。 :previous-selected 选择上一项(在列表中)。例如，QTabBar中选定选项卡旁边的选项卡。 :read-only 该项目标记为只读或不可编辑。例如，只读QLineEdit或不可编辑的QComboBox。 :right 该项目位于右侧。例如，选项卡位于右侧的QTabBar。 :selected 该项目即被选中。例如，QTabBar中的选定选项卡或QMenu中的选定项目。 :top 该项目位于顶部。例如，选项卡位于顶部的QTabBar。 :unchecked 该项目处于取消选中状态。 :vertical 该项目具有垂直方向。 :window widget是窗口(即顶层小部件) QSS属性背景属性（Background） 属性 描述 CSS background 在一个声明中设置所有的背景属性。 1 background-attachment 设置背景图像是否固定或者随着页面的其余部分滚动。 1 background-color 设置元素的背景颜色。 1 background-image 设置元素的背景图像。 1 background-position 设置背景图像的开始位置。 1 background-repeat 设置是否及如何重复背景图像。 1 background-clip 规定背景的绘制区域。 3 background-origin 规定背景图片的定位区域。 3 background-size 规定背景图片的尺寸。 3 边框属性（Border 和 Outline） 属性 描述 CSS border 在一个声明中设置所有的边框属性。 1 border-bottom 在一个声明中设置所有的下边框属性。 1 border-bottom-color 设置下边框的颜色。 2 border-bottom-style 设置下边框的样式。 2 border-bottom-width 设置下边框的宽度。 1 border-color 设置四条边框的颜色。 1 border-left 在一个声明中设置所有的左边框属性。 1 border-left-color 设置左边框的颜色。 2 border-left-style 设置左边框的样式。 2 border-left-width 设置左边框的宽度。 1 border-right 在一个声明中设置所有的右边框属性。 1 border-right-color 设置右边框的颜色。 2 border-right-style 设置右边框的样式。 2 border-right-width 设置右边框的宽度。 1 border-style 设置四条边框的样式。 1 border-top 在一个声明中设置所有的上边框属性。 1 border-top-color 设置上边框的颜色。 2 border-top-style 设置上边框的样式。 2 border-top-width 设置上边框的宽度。 1 border-width 设置四条边框的宽度。 1 outline 在一个声明中设置所有的轮廓属性。 2 outline-color 设置轮廓的颜色。 2 outline-style 设置轮廓的样式。 2 outline-width 设置轮廓的宽度。 2 border-bottom-left-radius 定义边框左下角的形状。 3 border-bottom-right-radius 定义边框右下角的形状。 3 border-image 简写属性，设置所有 border-image-* 属性。 3 border-image-outset 规定边框图像区域超出边框的量。 3 border-image-repeat 图像边框是否应平铺(repeated)、铺满(rounded)或拉伸(stretched)。 3 border-image-slice 规定图像边框的向内偏移。 3 border-image-source 规定用作边框的图片。 3 border-image-width 规定图片边框的宽度。 3 border-radius 简写属性，设置所有四个 border--radius *属性**。 3 border-top-left-radius 定义边框左上角的形状。 3 border-top-right-radius 定义边框右下角的形状。 3 box-decoration-break �0�2 3 box-shadow 向方框添加一个或多个阴影。 3 Box 属性 属性 描述 CSS overflow-x 如果内容溢出了元素内容区域，是否对内容的左/右边缘进行裁剪。 3 overflow-y 如果内容溢出了元素内容区域，是否对内容的上/下边缘进行裁剪。 3 overflow-style 规定溢出元素的首选滚动方法。 3 rotation 围绕由 rotation-point 属性定义的点对元素进行旋转。 3 rotation-point 定义距离上左边框边缘的偏移点。 3 字体属性（Font） 属性 描述 CSS font 在一个声明中设置所有字体属性。 1 font-family 规定文本的字体系列。 1 font-size 规定文本的字体尺寸。 1 font-size-adjust 为元素规定 aspect 值。 2 font-stretch 收缩或拉伸当前的字体系列。 2 font-style 规定文本的字体样式。 1 font-variant 规定是否以小型大写字母的字体显示文本。 1 font-weight 规定字体的粗细。 1 外边距属性（Margin） 属性 描述 CSS margin 在一个声明中设置所有外边距属性。 1 margin-bottom 设置元素的下外边距。 1 margin-left 设置元素的左外边距。 1 margin-right 设置元素的右外边距。 1 margin-top 设置元素的上外边距。 1 内边距属性（Padding） 属性 描述 CSS padding 在一个声明中设置所有内边距属性。 1 padding-bottom 设置元素的下内边距。 1 padding-left 设置元素的左内边距。 1 padding-right 设置元素的右内边距。 1 padding-top 设置元素的上内边距。 1 定位属性（Positioning） 属性 描述 CSS bottom 设置定位元素下外边距边界与其包含块下边界之间的偏移。 2 clear 规定元素的哪一侧不允许其他浮动元素。 1 clip 剪裁绝对定位元素。 2 cursor 规定要显示的光标的类型（形状）。 2 display 规定元素应该生成的框的类型。 1 float 规定框是否应该浮动。 1 left 设置定位元素左外边距边界与其包含块左边界之间的偏移。 2 overflow 规定当内容溢出元素框时发生的事情。 2 position 规定元素的定位类型。 2 right 设置定位元素右外边距边界与其包含块右边界之间的偏移。 2 top 设置定位元素的上外边距边界与其包含块上边界之间的偏移。 2 vertical-align 设置元素的垂直对齐方式。 1 visibility 规定元素是否可见。 2 z-index 设置元素的堆叠顺序。 2 文本属性（Text） 属性 描述 CSS color 设置文本的颜色。 1 direction 规定文本的方向 / 书写方向。 2 letter-spacing 设置字符间距。 1 line-height 设置行高。 1 text-align 规定文本的水平对齐方式。 1 text-decoration 规定添加到文本的装饰效果。 1 text-indent 规定文本块首行的缩进。 1 text-shadow 规定添加到文本的阴影效果。 2 text-transform 控制文本的大小写。 1 unicode-bidi 设置文本方向。 2 white-space 规定如何处理元素中的空白。 1 word-spacing 设置单词间距。 1 hanging-punctuation 规定标点字符是否位于线框之外。 3 punctuation-trim 规定是否对标点字符进行修剪。 3 text-align-last 设置如何对齐最后一行或紧挨着强制换行符之前的行。 3 text-emphasis 向元素的文本应用重点标记以及重点标记的前景色。 3 text-justify 规定当 text-align 设置为 “justify” 时所使用的对齐方法。 3 text-outline 规定文本的轮廓。 3 text-overflow 规定当文本溢出包含元素时发生的事情。 3 text-shadow 向文本添加阴影。 3 text-wrap 规定文本的换行规则。 3 word-break 规定非中日韩文本的换行规则。 3 word-wrap 允许对长的不可分割的单词进行分割并换行到下一行。 3 颜色透明程度&lt;!--100% —FF--&gt; &lt;!--95% — F2--&gt; &lt;!--90% — E6--&gt; &lt;!--85% — D9--&gt; &lt;!--80% — CC--&gt; &lt;!--75% — BF--&gt; &lt;!--70% — B3--&gt; &lt;!--65% — A6--&gt; &lt;!--60% — 99--&gt; &lt;!--55% — 8C--&gt; &lt;!--50% — 80--&gt; &lt;!--45% — 73--&gt; &lt;!--40% — 66--&gt; &lt;!--35% — 59--&gt; &lt;!--30% — 4D--&gt; &lt;!--25% — 40--&gt; &lt;!--20% — 33--&gt; &lt;!--15% — 26--&gt; &lt;!--10% — 1A--&gt; &lt;!--5% — 0D--&gt; &lt;!--0% — 00--&gt;","categories":[{"name":"code","slug":"code","permalink":"https://www.yaronzz.com/categories/code/"}],"tags":[{"name":"qt","slug":"qt","permalink":"https://www.yaronzz.com/tags/qt/"},{"name":"qss","slug":"qss","permalink":"https://www.yaronzz.com/tags/qss/"}]},{"title":"查询windows日志","slug":"查询windows日志","date":"2021-10-08T08:31:17.000Z","updated":"2022-05-11T08:07:07.108Z","comments":true,"path":"post/windows_log/","link":"","permalink":"https://www.yaronzz.com/post/windows_log/","excerpt":"系统日志可以用来查看系统的一些信息，比如警告、错误、验证、开关机等。","text":"系统日志可以用来查看系统的一些信息，比如警告、错误、验证、开关机等。 打开系统日志按下快捷键win+R，输入eventvwr.exe，并点击确定 查询开关机记录点击左侧Windows日志-&gt;系统，然后点击右侧筛选当前日志，然后在所有事件ID文本框中输入6005,6006，即可查询电脑开关机记录。 6005：事件日志服务已启动。 6006：事件日志服务已停止。 6008：表示这个时间点的系统关闭是意外。","categories":[{"name":"软件","slug":"软件","permalink":"https://www.yaronzz.com/categories/%E8%BD%AF%E4%BB%B6/"}],"tags":[{"name":"windows","slug":"windows","permalink":"https://www.yaronzz.com/tags/windows/"}]},{"title":"Windows共享目录设置","slug":"Windows共享目录设置","date":"2021-04-27T03:17:40.000Z","updated":"2022-05-11T08:07:07.104Z","comments":true,"path":"post/windows_share/","link":"","permalink":"https://www.yaronzz.com/post/windows_share/","excerpt":"局域网内文件分享时，共享功能是最方便的一个方式。","text":"局域网内文件分享时，共享功能是最方便的一个方式。 打开共享功能 打开控制面板中的网络和共享中心 选择更改高级共享设置 打开所有网络，配置设置如下图： 修改安全选项 按WIN+R，调出运行框 在运行框输入 gpedit.msc 打开安全选项路径：Windows设置 -- 安全设置 -- 本地策略 -- 安全选项, 设置全部账户选项，如下图：","categories":[{"name":"system","slug":"system","permalink":"https://www.yaronzz.com/categories/system/"}],"tags":[{"name":"windows","slug":"windows","permalink":"https://www.yaronzz.com/tags/windows/"}]},{"title":"个人网盘搭建","slug":"个人网盘搭建","date":"2021-03-11T02:47:20.000Z","updated":"2022-06-07T02:25:12.035Z","comments":true,"path":"post/cloud_drive/","link":"","permalink":"https://www.yaronzz.com/post/cloud_drive/","excerpt":"个人网盘的搭建需要先搭建环境，再安装网盘程序。环境的搭建一般使用宝塔面板，网盘程序选择Cloudreve，功能全面，界面简洁而且更新频率高。","text":"个人网盘的搭建需要先搭建环境，再安装网盘程序。环境的搭建一般使用宝塔面板，网盘程序选择Cloudreve，功能全面，界面简洁而且更新频率高。 安装宝塔面板安装命令 Centos7.1+ 1yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh Ubuntu16.04+ 1wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh 组件安装 套件安装，选择Mysql，PHP，Nginx 扩展安装首页 → php-X.X → 安装扩展fileinfo 创建网站 Cloudreve安装下载版本下载地址：Github网址：Releases · cloudreve/Cloudreve (github.com) 下载版本：linux_amd64 1wget https://github.com/cloudreve/Cloudreve/releases/download/3.3.1/cloudreve_3.3.1_linux_amd64.tar.gz 安装SSL证书如果网盘地址想用https，则需要安装SSL证书 12curl https://get.acme.sh | shsource ~/.bashrc 获取证书 1acme.sh --issue -d os.yaronzz.com -w &#x2F;www&#x2F;wwwroot&#x2F;cloud 反向代理 安装Aria2aria2用于离线下载资源，cloudreve可以直接下载磁力链接资源，并上传到onedrive 1wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubiBackup/doubi/master/aria2.sh &amp;&amp; chmod +x aria2.sh &amp;&amp; bash aria2.sh 启动：service aria2 start 停止：service aria2 stop 重启：service aria2 restart 查看状态：service aria2 status 配置文件：/root/.aria2/aria2.conf（配置文件包含中文注释，但是一些系统可能不支持显示中文） 下载目录：/usr/local/caddy/www/aria2/Download","categories":[{"name":"建站","slug":"建站","permalink":"https://www.yaronzz.com/categories/%E5%BB%BA%E7%AB%99/"}],"tags":[{"name":"cloudreve","slug":"cloudreve","permalink":"https://www.yaronzz.com/tags/cloudreve/"}]},{"title":"C++类结构体与json相互转换","slug":"C++类结构体与json相互转换","date":"2020-10-09T04:40:33.000Z","updated":"2022-05-11T08:07:07.271Z","comments":true,"path":"post/cpp_json_class_conver/","link":"","permalink":"https://www.yaronzz.com/post/cpp_json_class_conver/","excerpt":"背景与需求之前写C#的时候，解析json字符串一般使用的是开源的类库Newtonsoft.Json，方法十分简洁，比如： 1234567class Project&#123; public string Input &#123; get; set; &#125; public string Output &#123; get; set; &#125;&#125;JavaScriptSerializer serializer &#x3D; new JavaScriptSerializer();Project test &#x3D; serializer.Deserialize&lt;Project&gt;(@&quot;&#123;&quot;Input&quot;:&quot;1&quot;,&quot;Output&quot;:&quot;2&quot;&#125;&quot;); 一行代码就能将json字符串转为相应的类对象。 最近写C++需要处理一下json数据，于是上github找了很多很强大的开源库，像jsoncpp、rapidjson、json，基本上都满足了开发需求，但想要做成像写C#那样子就要做二次开发。于是有了自己写一个简单的json转类 | 结构体的工具的想法。","text":"背景与需求之前写C#的时候，解析json字符串一般使用的是开源的类库Newtonsoft.Json，方法十分简洁，比如： 1234567class Project&#123; public string Input &#123; get; set; &#125; public string Output &#123; get; set; &#125;&#125;JavaScriptSerializer serializer &#x3D; new JavaScriptSerializer();Project test &#x3D; serializer.Deserialize&lt;Project&gt;(@&quot;&#123;&quot;Input&quot;:&quot;1&quot;,&quot;Output&quot;:&quot;2&quot;&#125;&quot;); 一行代码就能将json字符串转为相应的类对象。 最近写C++需要处理一下json数据，于是上github找了很多很强大的开源库，像jsoncpp、rapidjson、json，基本上都满足了开发需求，但想要做成像写C#那样子就要做二次开发。于是有了自己写一个简单的json转类 | 结构体的工具的想法。 需求如下： 只有头文件，方便使用 最多三行代码解决转换 支持类|结构体 与 json的相互转换 支持多种基本数据类型，如int、float、string、bool等 支持STL基本类型，如vector、list、map&lt;string,T&gt;等 支持嵌套关系 支持成员重命名，比方说json中的关键字是name,成员命名可写成Name或其他。 支持设置成员默认值 最终使用的样例代码工程开源地址：AIGCJson：两行代码实现C++ Json与类对象相互转换 1234567891011121314151617181920class Student&#123;public: string Name; int Age; AIGC_JSON_HELPER(Name, Age)//成员注册 AIGC_JSON_HELPER_RENAME(\"name\",\"age\")//成员重命名，不需要可以删除这条&#125;;int main()&#123; //json转类对象 Student person; JsonHelper::JsonToObject(person, R\"(&#123;\"name\":\"XiaoMing\", \"age\":15&#125;)\"); //类对象转json string jsonStr; JsonHelper::ObjectToJson(person, jsonStr); return 0;&#125; 实现方法因为刚好rapidjson只需要头文件就可以使用，所以选择了rapidjson作为基础库，进行二次开发。 基础类型的转换作为最底层的接口，只需要进行一个赋值的操作即可，后续如果想要增加一些其他类型支持，添加起来也比较方便。 12345678910111213141516171819202122232425static bool JsonToObject(int &amp;obj, rapidjson::Value &amp;jsonValue)&#123; if (jsonValue.IsNull() || !jsonValue.IsInt()) return false; obj = jsonValue.GetInt(); return true;&#125;static bool JsonToObject(unsigned int &amp;obj, rapidjson::Value &amp;jsonValue)&#123; if (jsonValue.IsNull() || !jsonValue.IsUint()) return false; obj = jsonValue.GetUint(); return true;&#125;static bool JsonToObject(int64_t &amp;obj, rapidjson::Value &amp;jsonValue)&#123; if (jsonValue.IsNull() || !jsonValue.IsInt64()) return false; obj = jsonValue.GetInt64(); return true;&#125;//其他类型... ... 类成员注册这里使用宏定义方式 + 可变参数模板的方式来实现，即可依次对注册的成员进行赋值 12345678910111213141516171819template &lt;typename TYPE, typename... TYPES&gt;static bool WriteMembers(std::vector&lt;std::string&gt; &amp;names, int index, rapidjson::Value &amp;jsonValue, TYPE &amp;arg, TYPES &amp;... args)&#123; if (!WriteMembers(names, index, jsonValue, arg)) return false; return WriteMembers(names, ++index, jsonValue, args...);&#125;template &lt;typename TYPE&gt;static bool WriteMembers(std::vector&lt;std::string&gt; &amp;names, int index, rapidjson::Value &amp;jsonValue, TYPE &amp;arg)&#123; const char *key = names[index].c_str(); if (!jsonValue.HasMember(key)) return true; if (!JsonToObject(arg, jsonValue[key])) return false; return true;&#125; 1234567#define AIGC_JSON_HELPER(...) \\bool AIGC_CONVER_JSON_TO_OBJECT(rapidjson::Value &amp;jsonValue, std::vector&lt;std::string&gt; &amp;names) \\&#123; \\ if (names.size() &lt;= 0) \\ names = aigc::JsonHelper::GetMembersNames(#__VA_ARGS__); \\ return aigc::JsonHelper::WriteMembers(names, 0, jsonValue, __VA_ARGS__); \\&#125; 自定义类的转换自定义类由于并不清楚外界使用时，是否有按规定添加好成员注册接口，所以这里采用enable_if的方式来尝试调用，编译的时候也就不会报错。 12345678910111213141516171819202122232425262728293031template &lt;bool, class TYPE = void&gt;struct enable_if&#123;&#125;;template &lt;class TYPE&gt;struct enable_if&lt;true, TYPE&gt;&#123; typedef TYPE type;&#125;;template &lt;typename T&gt;struct HasConverFunction&#123; template &lt;typename TT&gt; static char func(decltype(&amp;TT::AIGC_CONVER_JSON_TO_OBJECT)); template &lt;typename TT&gt; static int func(...); const static bool has = (sizeof(func&lt;T&gt;(NULL)) == sizeof(char));&#125;;template &lt;typename T, typename enable_if&lt;HasConverFunction&lt;T&gt;::has, int&gt;::type = 0&gt;static inline bool JsonToObject(T &amp;obj, rapidjson::Value &amp;jsonValue)&#123; std::vector&lt;std::string&gt; names = LoadRenameArray(obj); return obj.AIGC_CONVER_JSON_TO_OBJECT(jsonValue, names);&#125;template &lt;typename T, typename enable_if&lt;!HasConverFunction&lt;T&gt;::has, int&gt;::type = 0&gt;static inline bool JsonToObject(T &amp;obj, rapidjson::Value &amp;jsonValue)&#123; return false;&#125; 外部调用接口123456789101112131415/** * @brief conver json string to class | struct * @param obj : class or struct * @param jsonStr : json string */template &lt;typename T&gt;static inline bool JsonToObject(T &amp;obj, const std::string &amp;jsonStr)&#123; rapidjson::Document root; root.Parse(jsonStr.c_str()); if (root.IsNull()) return false; return JsonToObject(obj, root);&#125; 最核心的部分也就上面的几个模块，其他的都是一些琐碎的增加类型支持等操作。 学习与引用 腾讯json解析库：Tencent/rapidjson 杨昕: C++ 轻量级对象JSON序列化实现","categories":[{"name":"code","slug":"code","permalink":"https://www.yaronzz.com/categories/code/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"https://www.yaronzz.com/tags/cpp/"},{"name":"json","slug":"json","permalink":"https://www.yaronzz.com/tags/json/"}]},{"title":"Linux上Nginx安装配置","slug":"Linux上Nginx安装配置","date":"2020-08-16T03:53:51.000Z","updated":"2022-05-11T08:07:07.075Z","comments":true,"path":"post/nginx_set/","link":"","permalink":"https://www.yaronzz.com/post/nginx_set/","excerpt":"主要介绍如何安装nginx和https所需的免费证书。","text":"主要介绍如何安装nginx和https所需的免费证书。 🎁安装nginx 安装nginx 12sudo apt-get updatesudo apt-get install git nginx -y 新建网站文件夹 123sudo mkdir -p /var/www/hexosudo chown -R $USER:$USER /var/www/hexosudo chmod -R 755 /var/www/hexo 配置nginx 1sudo vim /etc/nginx/sites-available/default 修改为以下内容： 1234567891011121314server &#123; listen 80 default_server; listen [::]:80 default_server; root /var/www/hexo; index index.html index.htm; server_name _; location / &#123; # First attempt to serve request as file, then # as directory, then fall back to displaying a 404. try_files $uri $uri/ =404; &#125;&#125; 启停nginx 1sudo service nginx restart 🎉安装免费证书SSLLet’s Encrypt 是一家免费、开放、自动化的证书颁发机构（CA），为公众的利益而运行。它是一项由 Internet Security Research Group（ISRG）提供的服务。其以尽可能对用户友好的方式免费提供为网站启用 HTTPS（SSL/TLS）所需的数字证书来创建一个更安全，更尊重隐私的 Web 环境。 Let’s Encrypt的关键原则为： 免费：任何拥有域名的人都可以使用 Let’s Encrypt 免费获取受信的证书。 自动化：运行于服务器上的软件可以与 Let’s Encrypt 直接交互，以便轻松获取证书，安全地配置它，并自动进行续期。 安全： 无论是作为一个证书颁发机构（CA）还是通过帮助网站运营商正确地保护其服务器。 透明：所有颁发或吊销的证书将被公开记录，供任何人查阅。 开放：自动颁发、续期证书的协议将作为其他人可以使用的开放标准发布。 乐于合作：Let’s Encrypt 是为了让整个互联网社区受益而做出的共同努力，它不受任何单一组织的控制。 安装Certbot 12wget https://dl.eff.org/certbot-autochmod a+x ./certbot-auto 生成证书 1./certbot-auto --server https://acme-v02.api.letsencrypt.org/directory -d \"xxxxxx.com\" -d \"*.cxxxxxx.com\" --manual --preferred-challenges dns-01 certonly 根据打印的信息添加两条TXT解析记录y 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657root@localhost:~# ./certbot-auto --server https://acme-v02.api.letsencrypt.org/directory -d \"yaronzz.com\" -d \"*.yaronzz.com\" --manual --preferred-challenges dns-01 certonlySaving debug log to /var/log/letsencrypt/letsencrypt.logPlugins selected: Authenticator manual, Installer NoneObtaining a new certificatePerforming the following challenges:dns-01 challenge for yaronzz.comdns-01 challenge for yaronzz.com- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -NOTE: The IP of this machine will be publicly logged as having requested thiscertificate. If you're running certbot in manual mode on a machine that is notyour server, please ensure you're okay with that.Are you OK with your IP being logged?- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -(Y)es/(N)o: y #选择y- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -Please deploy a DNS TXT record under the name_acme-challenge.yaronzz.com with the following value:#将第一条主机记录_acme-challenge和下面的记录值添加的解析fXseZpKheNVwMxxxxxxxxxxxxxxxxxxxxxxxxxxx Before continuing, verify the record is deployed.- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -Press Enter to Continue- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -Please deploy a DNS TXT record under the name_acme-challenge.yaronzz.com with the following value:#将第二条主机记录_acme-challenge和下面的记录值添加的解析xOuUgL4jxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxBefore continuing, verify the record is deployed.(This must be set up in addition to the previous challenges; do not remove,replace, or undo the previous challenge tasks yet. Note that you might beasked to create multiple distinct TXT records with the same name. This ispermitted by DNS standards.)- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -Press Enter to ContinueWaiting for verification...Cleaning up challengesIMPORTANT NOTES: - Congratulations! Your certificate and chain have been saved at: /etc/letsencrypt/live/yaronzz.com/fullchain.pem Your key file has been saved at: /etc/letsencrypt/live/yaronzz.com/privkey.pem Your cert will expire on 2020-11-14. To obtain a new or tweaked version of this certificate in the future, simply run certbot-auto again. To non-interactively renew *all* of your certificates, run \"certbot-auto renew\" - If you like Certbot, please consider supporting our work by: Donating to ISRG / Let's Encrypt: https://letsencrypt.org/donate Donating to EFF: https://eff.org/donate-le 查看生成的证书 1ls /etc/letsencrypt/live/xxxxxx.com 续签证书 1234./certbot-auto renew# 如果提示未到期，cert not due for renewal，可以强制更新如下./certbot-auto renew --force-renew# 看到success表示成功了 nginx添加证书 1sudo vim /etc/nginx/sites-available/default 修改为以下内容： 12345678910111213141516171819202122232425262728server &#123; listen 80 default_server; listen [::]:80 default_server; listen 443 ssl default_server; server_name xxxxxx.com; ssl_certificate /etc/letsencrypt/live/xxxxxx.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/xxxxxx.com/privkey.pem; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE; ssl_prefer_server_ciphers on; ssl_session_cache shared:SSL:10m; ssl_session_timeout 10m; root /var/www/hexo; index index.html index.htm; server_name _; location / &#123; # First attempt to serve request as file, then # as directory, then fall back to displaying a 404. try_files $uri $uri/ =404; &#125;&#125;","categories":[{"name":"建站","slug":"建站","permalink":"https://www.yaronzz.com/categories/%E5%BB%BA%E7%AB%99/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://www.yaronzz.com/tags/linux/"},{"name":"ssl","slug":"ssl","permalink":"https://www.yaronzz.com/tags/ssl/"},{"name":"nginx","slug":"nginx","permalink":"https://www.yaronzz.com/tags/nginx/"}]},{"title":"Rclone使用教程 - 挂载Onedrive和谷歌网盘","slug":"[软件] 网盘助手Rclone使用教程","date":"2020-08-15T00:57:02.000Z","updated":"2022-04-19T07:49:39.684Z","comments":true,"path":"post/rclone_use/","link":"","permalink":"https://www.yaronzz.com/post/rclone_use/","excerpt":"Rclone 是一个用于多个云平台之间同步文件和目录的命令行工具，其支持多种运营商网盘。 官网网址：https://rclone.org 开源地址：https://github.com/ncw/rclone","text":"Rclone 是一个用于多个云平台之间同步文件和目录的命令行工具，其支持多种运营商网盘。 官网网址：https://rclone.org 开源地址：https://github.com/ncw/rclone 安装与配置下载安装rclone windows版本：下载rclone并解压 Linux版本： 1curl https://rclone.org/install.sh | sudo bash 配置OneDrive 在目录下打开cmd运行命令 rclone authorize &quot;onedrive&quot; 世纪互联运行的命令 rclone authorize onedrive &quot;应用程序(客户端)ID&quot; &quot;客户端密码值&quot; --onedrive-is-21vianet-version=true 复制授权码：{&quot;access_token&quot;:&quot;xxxx&quot;} 配置 1rclone config 设置步骤如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165root@localhost:~# rclone configNo remotes found - make a new onen) New remotes) Set configuration passwordq) Quit confign/s/q&gt; n #新建一个挂载name&gt; onedrive #设置挂载的名称onedriveType of storage to configure.Enter a string value. Press Enter for the default (\"\").Choose a number from below, or type in your own value 1 / 1Fichier \\ \"fichier\" 2 / Alias for an existing remote \\ \"alias\" 3 / Amazon Drive \\ \"amazon cloud drive\" 4 / Amazon S3 Compliant Storage Provider (AWS, Alibaba, Ceph, Digital Ocean, Dreamhost, IBM COS, Minio, etc) \\ \"s3\" 5 / Backblaze B2 \\ \"b2\" 6 / Box \\ \"box\" 7 / Cache a remote \\ \"cache\" 8 / Citrix Sharefile \\ \"sharefile\" 9 / Dropbox \\ \"dropbox\"10 / Encrypt/Decrypt a remote \\ \"crypt\"11 / FTP Connection \\ \"ftp\"12 / Google Cloud Storage (this is not Google Drive) \\ \"google cloud storage\"13 / Google Drive \\ \"drive\"14 / Google Photos \\ \"google photos\"15 / Hubic \\ \"hubic\"16 / In memory object storage system. \\ \"memory\"17 / Jottacloud \\ \"jottacloud\"18 / Koofr \\ \"koofr\"19 / Local Disk \\ \"local\"20 / Mail.ru Cloud \\ \"mailru\"21 / Mega \\ \"mega\"22 / Microsoft Azure Blob Storage \\ \"azureblob\"23 / Microsoft OneDrive \\ \"onedrive\"24 / OpenDrive \\ \"opendrive\"25 / OpenStack Swift (Rackspace Cloud Files, Memset Memstore, OVH) \\ \"swift\"26 / Pcloud \\ \"pcloud\"27 / Put.io \\ \"putio\"28 / QingCloud Object Storage \\ \"qingstor\"29 / SSH/SFTP Connection \\ \"sftp\"30 / Sugarsync \\ \"sugarsync\"31 / Tardigrade Decentralized Cloud Storage \\ \"tardigrade\"32 / Transparently chunk/split large files \\ \"chunker\"33 / Union merges the contents of several upstream fs \\ \"union\"34 / Webdav \\ \"webdav\"35 / Yandex Disk \\ \"yandex\"36 / http Connection \\ \"http\"37 / premiumize.me \\ \"premiumizeme\"38 / seafile \\ \"seafile\"Storage&gt; 23 #选择第23项的onedrive** See help for onedrive backend at: https://rclone.org/onedrive/ **Microsoft App Client IdLeave blank normally.Enter a string value. Press Enter for the default (\"\").client_id&gt; #跳过Microsoft App Client SecretLeave blank normally.Enter a string value. Press Enter for the default (\"\").client_secret&gt; #跳过Edit advanced config? (y/n)y) Yesn) No (default)y/n&gt; #跳过Remote configUse auto config? * Say Y if not sure * Say N if you are working on a remote or headless machiney) Yes (default)n) Noy/n&gt; n #选择nFor this to work, you will need rclone available on a machine that hasa web browser available.For more help and alternate methods see: https://rclone.org/remote_setup/Execute the following on the machine with the web browser (same rcloneversion recommended): rclone authorize \"onedrive\"Then paste the result below:result&gt; &#123;\"access_token\":\"xxxxxxxx\"&#125; #输入授权码Choose a number from below, or type in an existing value 1 / OneDrive Personal or Business \\ \"onedrive\" 2 / Root Sharepoint site \\ \"sharepoint\" 3 / Type in driveID \\ \"driveid\" 4 / Type in SiteID \\ \"siteid\" 5 / Search a Sharepoint site \\ \"search\"Your choice&gt; 1 #选择1，onedriveFound 1 drives, please select the one you want to use:0: (personal) id=xxxxxxxxChose drive to use:&gt; 0 #选择挂载的onedrive网盘Found drive 'root' of type 'personal', URL: https://onedrive.live.com/?cid=xxxxxxxxIs that okay?y) Yes (default)n) Noy/n&gt; #跳过--------------------[myone]type = onedrivetoken = &#123;\"access_token\":\"xxxxxxxx\"&#125;drive_id = xxxxxxdrive_type = personal--------------------y) Yes this is OK (default)e) Edit this remoted) Delete this remotey/e/d&gt; y #跳过Current remotes:Name Type==== ====onedrive onedrivee) Edit existing remoten) New remoted) Delete remoter) Rename remotec) Copy remotes) Set configuration passwordq) Quit confige/n/d/r/c/s/q&gt; 配置谷歌网盘运行命令： 1rclone config 设置步骤如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151$ ./rclone.exe configCurrent remotes:Name Type==== ====onedrive onedrivee) Edit existing remoten) New remoted) Delete remoter) Rename remotec) Copy remotes) Set configuration passwordq) Quit confige/n/d/r/c/s/q&gt; n #新建name&gt; gdrive #名称Type of storage to configure.Enter a string value. Press Enter for the default (\"\").Choose a number from below, or type in your own value 1 / 1Fichier \\ \"fichier\" 2 / Alias for an existing remote \\ \"alias\" 3 / Amazon Drive \\ \"amazon cloud drive\" 4 / Amazon S3 Compliant Storage Provider (AWS, Alibaba, Ceph, Digital Ocean, Dreamhost, IBM COS, Minio, etc) \\ \"s3\" 5 / Backblaze B2 \\ \"b2\" 6 / Box \\ \"box\" 7 / Cache a remote \\ \"cache\" 8 / Citrix Sharefile \\ \"sharefile\" 9 / Dropbox \\ \"dropbox\"10 / Encrypt/Decrypt a remote \\ \"crypt\"11 / FTP Connection \\ \"ftp\"12 / Google Cloud Storage (this is not Google Drive) \\ \"google cloud storage\"13 / Google Drive \\ \"drive\"14 / Google Photos \\ \"google photos\"15 / Hubic \\ \"hubic\"16 / In memory object storage system. \\ \"memory\"17 / Jottacloud \\ \"jottacloud\"18 / Koofr \\ \"koofr\"19 / Local Disk \\ \"local\"20 / Mail.ru Cloud \\ \"mailru\"21 / Mega \\ \"mega\"22 / Microsoft Azure Blob Storage \\ \"azureblob\"23 / Microsoft OneDrive \\ \"onedrive\"24 / OpenDrive \\ \"opendrive\"25 / OpenStack Swift (Rackspace Cloud Files, Memset Memstore, OVH) \\ \"swift\"26 / Pcloud \\ \"pcloud\"27 / Put.io \\ \"putio\"28 / QingCloud Object Storage \\ \"qingstor\"29 / SSH/SFTP Connection \\ \"sftp\"30 / Sugarsync \\ \"sugarsync\"31 / Tardigrade Decentralized Cloud Storage \\ \"tardigrade\"32 / Transparently chunk/split large files \\ \"chunker\"33 / Union merges the contents of several upstream fs \\ \"union\"34 / Webdav \\ \"webdav\"35 / Yandex Disk \\ \"yandex\"36 / http Connection \\ \"http\"37 / premiumize.me \\ \"premiumizeme\"38 / seafile \\ \"seafile\"Storage&gt; 13 #第13选谷歌网盘** See help for drive backend at: https://rclone.org/drive/ **Google Application Client IdSetting your own is recommended.See https://rclone.org/drive/#making-your-own-client-id for how to create your own.If you leave this blank, it will use an internal key which is low performance.Enter a string value. Press Enter for the default (\"\").client_id&gt;Google Application Client SecretSetting your own is recommended.Enter a string value. Press Enter for the default (\"\").client_secret&gt;Scope that rclone should use when requesting access from drive.Enter a string value. Press Enter for the default (\"\").Choose a number from below, or type in your own value 1 / Full access all files, excluding Application Data Folder. \\ \"drive\" 2 / Read-only access to file metadata and file contents. \\ \"drive.readonly\" / Access to files created by rclone only. 3 | These are visible in the drive website. | File authorization is revoked when the user deauthorizes the app. \\ \"drive.file\" / Allows read and write access to the Application Data folder. 4 | This is not visible in the drive website. \\ \"drive.appfolder\" / Allows read-only access to file metadata but 5 | does not allow any access to read or download file content. \\ \"drive.metadata.readonly\"scope&gt; 1 #输入1赋予访问权限ID of the root folderLeave blank normally.Fill in to access \"Computers\" folders (see docs), or for rclone to usea non root folder as its starting point.Enter a string value. Press Enter for the default (\"\").root_folder_id&gt;Service Account Credentials JSON file path Leave blank normally.Needed only if you want use SA instead of interactive login.Enter a string value. Press Enter for the default (\"\").service_account_file&gt;Edit advanced config? (y/n)y) Yesn) No (default)y/n&gt; #跳过Remote configUse auto config? * Say Y if not sure * Say N if you are working on a remote or headless machiney) Yes (default)n) Noy/n&gt; #跳过 获取配置文件搜索 ，windows下正常都在 C:\\Users\\你的用户名\\\\.config\\rclone目录下，Linux正常都在 ./.config/rclone/目录下 使用教程常用命令： 123456789101112131415161718rclone config - 以控制会话的形式添加rclone的配置，配置保存在.rclone.conf文件中。rclone copy - 将文件从源复制到目的地址，跳过已复制完成的。rclone sync - 将源数据同步到目的地址，只更新目的地址的数据。rclone move - 将源数据移动到目的地址。rclone delete - 删除指定路径下的文件内容。rclone purge - 清空指定路径下所有文件数据。rclone mkdir - 创建一个新目录。rclone rmdir - 删除空目录。rclone check - 检查源和目的地址数据是否匹配。rclone ls - 列出指定路径下所有的文件以及文件大小和路径。rclone lsd - 列出指定路径下所有的目录/容器/桶。rclone lsl - 列出指定路径下所有文件以及修改时间、文件大小和路径。rclone md5sum - 为指定路径下的所有文件产生一个md5sum文件。rclone sha1sum - 为指定路径下的所有文件产生一个sha1sum文件。rclone size - 获取指定路径下，文件内容的总大小。.rclone version - 查看当前版本。rclone cleanup - 清空remote。rclone dedupe - 交互式查找重复文件，进行删除/重命名操作。 显示网盘上的目录 12rclone lsd onedrive: #onedrive是上面设置的名称rclone lsd gdrive: #gdrive是上面设置的名称 拷贝谷歌网盘上的文件到Onedrive 1234!rclone copy gdrive:music onedrive:音乐 --ignore-existing --config ./music/rclone.conf # --config xxxx.conf 表示指定配置文件# --ignore-existing表示跳过已存在的文件# 此命令表示将谷歌网盘下的music目录复制到Onedrive网盘下的音乐目录 挂在Onedrive 1rclone mount onedrive:音乐 music --copy-links --no-gzip-encoding --no-check-certificate --allow-other --allow-non-empty --umask 000 --config /content/gdrive/My\\ Drive/music/rclone.conf Linux上挂载网盘 新建Linux下的文件夹 12rm -rf /root/music #删除已有的目录mkdir /root/music #新建目录 挂载磁盘 下载脚本 1wget -N --no-check-certificate https://raw.githubusercontent.com/x91270/Centos/master/rcloned 使用 vim rcloned修改脚本项 123NAME&#x3D;&quot;myone&quot; #创建的rclone名，本文此处填ojbkREMOTE&#x3D;&quot;音乐&quot; #远程挂载地址对应的文件夹，是你OneDrive对应的具体目录LOCAL&#x3D;&quot;&#x2F;root&#x2F;music&quot; #在本机上的挂载地址 启动脚本 rcloned start 挂载成功后，输入df -h命令查看 设置开机启动 1234mv rcloned /etc/init.d/rcloned #移动rcloned到init(开机启动目录)下chmod +x /etc/init.d/rcloned #给rcloned可执行权限chkconfig rcloned on #设置自启动bash /etc/init.d/rcloned start #启动rclone","categories":[{"name":"软件","slug":"软件","permalink":"https://www.yaronzz.com/categories/%E8%BD%AF%E4%BB%B6/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://www.yaronzz.com/tags/linux/"},{"name":"onedrive","slug":"onedrive","permalink":"https://www.yaronzz.com/tags/onedrive/"},{"name":"rclone","slug":"rclone","permalink":"https://www.yaronzz.com/tags/rclone/"},{"name":"googledrive","slug":"googledrive","permalink":"https://www.yaronzz.com/tags/googledrive/"}]},{"title":"CefSharp的使用","slug":"WPF-CefSharp的使用","date":"2020-07-30T07:30:48.000Z","updated":"2022-05-11T08:07:07.208Z","comments":true,"path":"post/cefsharp_use/","link":"","permalink":"https://www.yaronzz.com/post/cefsharp_use/","excerpt":"之前一直使用WPF自带的WebBrowser控件，但由于它使用的是IE内核，十分难用。于是换了一个开源的浏览器包CefSharp，其支持Winform和WPF，内嵌了Chrome浏览器组件并且有比较详细的说明文档。 开源项目地址 官方中文帮助文档","text":"之前一直使用WPF自带的WebBrowser控件，但由于它使用的是IE内核，十分难用。于是换了一个开源的浏览器包CefSharp，其支持Winform和WPF，内嵌了Chrome浏览器组件并且有比较详细的说明文档。 开源项目地址 官方中文帮助文档 安装 通过Nuget安装，右击项目 -&gt; 管理Nuget程序包 -&gt; 在打开的界面中搜索CefSharp，依次安装 CefSharp.Common和 CefSharp.Wpf ，至于 cef.redist.x64和 cef.redist.x86会自动安装。 配置解决方案平台 因为CefSharp不支持ANYCPU所以要配置x86、x64，点击菜单生成 -&gt; 配置管理器。选择解决方案平台，点击编辑，先将x64和x86删掉，再重新新建，重新配置比较容易些。 使用使用时可以直接在xaml文件中直接添加ChromiumWebBrowser控件，不过一个ChromiumWebBrowser控件就要占几M的内存，所以代码动态添加也是一种选择。 在xaml中添加浏览器 xmal文件头部插入引用xmlns:wpf=&quot;clr-namespace:CefSharp.Wpf;assembly=CefSharp.Wpf&quot;，添加控件如下： 123&lt;Grid x:Name&#x3D;&quot;ctrlBrowerGrid&quot;&gt; &lt;wpf:ChromiumWebBrowser x:Name&#x3D;&quot;Browser&quot;&#x2F;&gt;&lt;&#x2F;Grid&gt; cs文件中操作控件访问网址： 1Browser.Load(“www.baidu.com”); 动态添加浏览器 添加浏览器类： 1234567891011121314151617internal sealed class CollapsableChromiumWebBrowser : ChromiumWebBrowser&#123; public CollapsableChromiumWebBrowser() &#123; this.Loaded +&#x3D; this.BrowserLoaded; &#125; private void BrowserLoaded(object sender, System.Windows.RoutedEventArgs e) &#123; &#x2F;&#x2F; Avoid loading CEF in designer if (DesignerProperties.GetIsInDesignMode(this)) return; &#x2F;&#x2F; Avoid NRE in AbstractRenderHandler.OnPaint ApplyTemplate(); CreateOffscreenBrowser(new Size(400, 400)); &#125;&#125; 动态添加和操作控件： 12345CollapsableChromiumWebBrowser Browser &#x3D; new CollapsableChromiumWebBrowser();&#x2F;&#x2F;页面插入控件ctrlBrowerGrid.Children.Add(Browser);&#x2F;&#x2F;这里不能用Load()的方法，会报错。Browser.Address &#x3D; “www.baidu.com”; 获取Cookie和Html 添加Cookie访问类 12345678910111213141516171819202122public class CookieVisitor : ICookieVisitor&#123; public static string Cookies &#x3D; null; public static string Html &#x3D; null; public event Action&lt;object&gt; Action; public bool Visit(CefSharp.Cookie cookie, int count, int total, ref bool deleteCookie) &#123; if(count &#x3D;&#x3D; 0) Cookies &#x3D; null; Cookies +&#x3D; cookie.Name + &quot;&#x3D;&quot; + cookie.Value + &quot;;&quot;; deleteCookie &#x3D; false; return true; &#125; public void Dispose() &#123; if (Action !&#x3D; null) Action((Html, Cookies)); return; &#125;&#125; 添加Cookie和Html获取回调函数 12345public async void RecieveCookie(object data)&#123; (string html,string cookies) &#x3D; ((string,string))data; return;&#125; 浏览器控件访问网址，并设置回调 1234567891011121314async void LoadWebBrowser()&#123; Browser.FrameLoadEnd +&#x3D; Browser_FrameLoadEnd; Browser.Address &#x3D; &quot;www.baidu.com&quot;;&#125;private async void Browser_FrameLoadEnd(object sender, FrameLoadEndEventArgs e)&#123; CookieVisitor.Html &#x3D; await Browser.GetSourceAsync(); CookieVisitor visitor &#x3D; new CookieVisitor(); visitor.Action +&#x3D; RecieveCookie; Cef.GetGlobalCookieManager().VisitAllCookies(visitor); return;&#125;","categories":[{"name":"code","slug":"code","permalink":"https://www.yaronzz.com/categories/code/"}],"tags":[{"name":"WPF","slug":"WPF","permalink":"https://www.yaronzz.com/tags/WPF/"},{"name":"C#","slug":"C","permalink":"https://www.yaronzz.com/tags/C/"}]},{"title":"Get AccessToken From Tidal","slug":"[Tidal] GetAccessTokenFromTidal","date":"2020-07-16T08:16:33.000Z","updated":"2022-06-07T02:25:12.045Z","comments":true,"path":"post/get_accesstoken/","link":"","permalink":"https://www.yaronzz.com/post/get_accesstoken/","excerpt":"AccessToken is a key to get the track\\video streamurl. AccessToken from Tidal Desktop: Support MQA Flac, can’t download 360\\Dobly AccessToken from Tidal Android: Support all AccessToken from Tidal IOS: Can’t download Flac","text":"AccessToken is a key to get the track\\video streamurl. AccessToken from Tidal Desktop: Support MQA Flac, can’t download 360\\Dobly AccessToken from Tidal Android: Support all AccessToken from Tidal IOS: Can’t download Flac How to use AccessToken. For tidal-dl: Open tidal-dl and Enter 10 to set AccessToken For tidal-gui: Open file tidal-ini and add a key “accesstoken=xxxxxxxxx” (xxxxxxx is your AccessToken) Get AccessToken from Tidal Android Login Tidal Android and play a track With any file explorer, go to /sdcard/Android/data/com.aspiro.tidal/cache/okhttp Open a file in the folder and Find the ‘Authorization: Bearer’ very_long_key (At the beginning of the file)very_long_key is what you need to copy/paste, if the file not contain the ‘Authorization: Bearer’, open another file. Get AccessToken from Tidal DesktopDownload Software Tidal Desktop Charles : View all of the HTTP and SSL / HTTPS traffic between their machine and the Internet Install Charles Install Charles Root CertificateSelect menu: Help –&gt; SSL Proxying –&gt; Install Charles Root Certificate SSL Proxying Settings Select menu: Proxy–&gt;SSL Proxying Settings Open SSL Proxying page and follow picture settings Open Options Windows Proxy Start Recording Start SSL Proxying External Proxy Settings (If you need VPN to use Tidal Desktop) Select menu: Proxy–&gt;Proxying Settings Open Proxies page \\ Windows page and follow picture settings Select menu: Proxy–&gt;External Proxying Settings Follow picture settings (IP and Port come from your VPN) Get AccessToken Install Charles and Open it Open Tidal Desktop Charles will view all of the HTTP / HTTPS traffic between tidal and the Internet. Relogin on the Tidal Desktop and play a track ‘Ctrl + F’ on the Charles Enter ‘authorization: Bearer’ or ‘authorization’ and click Find-Button Select url contains ‘tidal’ Double click the selection Select Contents page copy the authorization (remove ‘Bearer ‘) Q&amp;A Follow documentation but I can’t get the AccessToken’Google how to use Charles. How to get AccessToken from Tidal IOSGoogle Charles IOS.","categories":[{"name":"软件","slug":"软件","permalink":"https://www.yaronzz.com/categories/%E8%BD%AF%E4%BB%B6/"}],"tags":[{"name":"tidal","slug":"tidal","permalink":"https://www.yaronzz.com/tags/tidal/"}]},{"title":"音频相关知识点","slug":"[剪辑] 音频","date":"2020-06-30T01:00:33.000Z","updated":"2022-04-19T07:49:39.494Z","comments":true,"path":"post/audio_knowledge_point/","link":"","permalink":"https://www.yaronzz.com/post/audio_knowledge_point/","excerpt":"音频知识点包括音频属性与音频格式等。","text":"音频知识点包括音频属性与音频格式等。 音频属性采样频率 Hz采样频率就是采用一段音频，做为样本，因为wav使用的是数码信号，它是用一堆数字来描述原来的模拟信号，所以它要对原来的模拟信号进行分析，我们知道所有的声音都有其波形，数码信号就是在原有的模拟信号波形上每隔一段时间进行一次“取点”，赋予每一个点以一个数值，这就是“采样”，然后把所有的“点”连起来就可以描述模拟信号了，很明显，在一定时间内取的点越多，描述出来的波形就越精确，这个尺度我们就称为“采样频率”。 我们最常用的采样频率是44.1kHz，它的意思是每秒取样44100次。之所以使用这个数值是因为经过了反复实验（实际上是那个时代才是视频27/1.0001时钟做CD刻录遗留问题），人们发现这个采样频率最合适，低于这个值就会有较明显的损失，而高于这个值人的耳朵已经很难分辨，而且增 大了数字音频所占用的空间。 一般为了达到“万分精确”，我们还会使用48kHz甚至96kHz的采样频率，实际上，96kHz采样频率和44.1kHz采样频率的区别绝对不会象44.1kHz和22kHz那样区别如此之大，我们所使用的CD的采样标准就是44.1kHz，目前44.1kHz还是一个最通行的标准，有些人认为96kHz将是未来录音界的趋势。采样频率提高应该是一件好事，但我们真的能听出96kHz采样频率制作的音乐与44.1kHz采样频率制作的音乐的区别吗？ 注：16bit/44.1kHz是CD中音频的采样，24bit/48kHz是DVD中音频的采样，24bit/192kHz是蓝光中音频的采样。 采样位数 bit（位深）比特率是大家常听说的一个名词，数码录音一般使用16比特、20比特或24比特制作音乐。什么是“比特”？我们知道声音有轻有响，影响声音响度的物理要素是振幅，作为数码录音，必须也要能精确表示乐曲的轻响，所以一定要对波形的振幅有一个精确的描述。“比特(bit)”就是这样一个单位，16比特就是指把波形的振幅划为2^16即65536个等级，根据模拟信号的轻响把它划分到某个等级中去，就可以用数字来表示了。 和采样频率一样，比特率越高，越能细致地反映乐曲的轻响变化。20比特就可以产生1048576个等级，表现交响乐这类动态十分大的音乐已经没有什么问题了。刚才提到了一个名词“动态”，它其实指的是一首乐曲最响和最轻的对比能达到多少，我们也常说“动态范围”，单位是dB，而动态范围和我们录音时采用的比特率是紧密结合在一起的，如果我们使用了一个很低的比特率，那么就只有很少的等级可以用来描述音响的强弱，当然就不能听到大幅度的强弱对比了。 动态范围和比特率的关系是；比特率每增加1比特，动态范围就增加6dB。所以假如我们使用1比特录音，那么我们的动态范围就只有6dB，这样的音乐是不可能听的。16比特时，动态范围是96dB。这可以满足一般的需求了。20比特时，动态范围是120dB，对比再强烈的交响乐都可以应付自如了，表现音乐的强弱是绰绰有余了。发烧级的录音师还使用24比特，但是和采样精度一样，它不会比20比特有很明显的变化，理论上24比特可以做到144 dB的动态范围，但实际上是很难达到的，因为任何设备都不可避免会产生噪音，至少在现阶段24比特很难达到其预期效果。 码率 kbps表示每秒存储声音容量，如CD标准的声音信号参数为：信号采样频率为44.1kHz，量化精度为16位，包含两个声道。根据每秒钟存储声音容量的公式： 字节数 = 采样频率×采样精度(位数)×声道数，可计算出其数据率为 1411.2kbps， 即176.4kBps。 (大写B表示byte,即字节，一个字节=八个位，即1B=8b；前面的小写k表示千的意思，即千个位kb或千个字节kB) 音频格式CD标准CD格式也就是44.1K的采样频率，速率88K/秒，16位量化位数，因为CD音轨可以说是近似无损的，因此它的声音基本上是忠于原声的。一个CD音频文件是一个.cda文件，这只是一个索引信息，并不是真正的包含声音信息，所以不论CD音乐的长短，在电脑上看到的“.cda文件”都是44字节长。 WAV无损，是微软公司开发的一种声音文件格式，标准格式的WAV文件和CD格式一样，也是44.1K的采样频率，速率88K/秒，16位量化位数。 MP3MPEG音频文件的压缩是一种有损压缩，MPEG3音频编码具有10：1~12：1的高压缩率，同时基本保持低音频部分不失真，但是牺牲了声音文件中12KHz到16KHz高音频这部分的质量来换取文件的尺寸，相同长度的音乐文件，用.mp3格式来储存，一般只有.wav文件的1/10，而音质要次于CD格式或WAV格式的声音文件。 OGGogg格式完全开源，完全免费， 和mp3不相上下的新格式。 与MP3类似，OGGVorbis也是对音频进行有损压缩编码，但通过使用更加先进的声学模型去减少损失，因此，相同码率编码的OGGVorbis比MP3音质更好一些，文件也更小一些。 FLACFLAC即是Free Lossless Audio Codec的缩写，中文可解为无损音频压缩编码。FLAC是一套著名的自由音频压缩编码，其特点是无损压缩。不同于其他有损压缩编码如MP3及AAC，它不会破坏任何原有的音频资讯，所以可以还原音乐光盘音质。 APEAPE是流行的数字音乐文件格式之一。与MP3这类有损压缩方式不同，APE是一种无损压缩音频技术，也就是说当你将从音频CD上读取的音频数据文件压缩成APE格式后，你还可以再将APE格式的文件还原，而还原后的音频文件与压缩前的一模一样，没有任何损失。APE的文件大小大概为CD的一半。 AAC应用相对广泛的有AAC,（高级音频编码技术，Advanced Audio Coding）是杜比实验室为音乐社区提供的技术。AAC号称「最大能容纳48通道的音轨，采样率达96 KHz，并且在320Kbps的数据速率下能为5.1声道音乐节目提供相当于ITU-R广播的品质」。和MP3比起来，它的音质比较好，也能够节省大约30%的储存空间与带宽。","categories":[{"name":"学习","slug":"学习","permalink":"https://www.yaronzz.com/categories/%E5%AD%A6%E4%B9%A0/"}],"tags":[{"name":"audio","slug":"audio","permalink":"https://www.yaronzz.com/tags/audio/"}]},{"title":"Typora快捷键","slug":"[软件] Typora快捷键","date":"2020-06-26T07:00:33.000Z","updated":"2022-06-08T02:15:06.800Z","comments":true,"path":"post/typora_keymap/","link":"","permalink":"https://www.yaronzz.com/post/typora_keymap/","excerpt":"Typora快捷键包括菜单栏、文件、编辑、段落、格式、视图等。","text":"Typora快捷键包括菜单栏、文件、编辑、段落、格式、视图等。 一：菜单栏 文件：alt+F 编辑：alt+ 段落：alt+P 格式：alt+O 视图：alt+V 主题：alt+T 帮助：alt+H 二：文件 新建：Ctrl+N 新建窗口：Ctrl+Shift+N 打开：Ctrl+O 快速打开：Ctrl+P 保存：Ctrl+S 另存为：Ctrl+Shift+S 偏好：Ctrl+, 关闭：Ctrl+W 三：编辑 撤销：Ctrl+Z 重做：Ctrl+Y 剪切：Ctrl+X 复制：Ctrl+C 粘贴：Ctrl+V 插入链接：Ctrl+K 复制为MarkDown：Ctrl+Shift+C 粘贴为纯文本：Ctrl+Shift+V 全选：Ctrl+A 选中当前行/句：Ctrl+L 选中当前格式文本：Ctrl+E 选中当前词：Ctrl+D 跳转到文首：Ctrl+Home 跳转到所选内容：Ctrl+J 跳转到文末：Ctrl+End 查找：Ctrl+F 查找下一个：F3 查找上一个：Shift+F3 替换：Ctrl+H 四：段落 标题：Ctrl+1/2/3/4/5 段落：Ctrl+0 增大标题级别：Ctrl+= 减少标题级别：Ctrl+- 表格：Ctrl+T 代码块：Ctrl+Shift+K 公式块：Ctrl+Shift+M 引用：Ctrl+Shift+Q 有序列表：Ctrl+Shift+[ 无序列表：Ctrl+Shift+] 增加缩进：Ctrl+] 减少缩进：Ctrl+[ 五：格式 加粗：Ctrl+B 斜体：Ctrl+I 下划线：Ctrl+U 代码：Ctrl+Shift+` 删除线：Alt+Shift+5 超链接：Ctrl+K 图像：Ctrl+Shift+I 清除样式：Ctrl+ 六：视图 显示隐藏侧边栏：Ctrl+Shift+L 大纲视图：Ctrl+Shift+1 文档列表视图：Ctrl+Shift+2 文件树视图：Ctrl+Shift+3 源代码模式：Ctrl+/ 专注模式：F8 打字机模式：F9 切换全屏：F11 实际大小：Ctrl+Shift+0 放大：Ctrl+Shift+= 缩小：Ctrl+Shift+- 应用内窗口切换：Ctrl+Tab 打开DevTools：Shift+F12","categories":[{"name":"软件","slug":"软件","permalink":"https://www.yaronzz.com/categories/%E8%BD%AF%E4%BB%B6/"}],"tags":[{"name":"typora","slug":"typora","permalink":"https://www.yaronzz.com/tags/typora/"}]},{"title":"Office365家庭版却需要激活专业增强版的解决办法","slug":"Office365家庭版却需要激活专业增强版解决办法","date":"2020-06-26T07:00:33.000Z","updated":"2022-05-11T08:07:07.102Z","comments":true,"path":"post/office365/","link":"","permalink":"https://www.yaronzz.com/post/office365/","excerpt":"由于之前使用KMS破解过office，所以安装了正版的office365家庭版之后，打开却显示当前版本是专业增强版，并且需要许可证。","text":"由于之前使用KMS破解过office，所以安装了正版的office365家庭版之后，打开却显示当前版本是专业增强版，并且需要许可证。 解决方法 以管理员身份运行CMD 输入命令切换到office目录 cd C:\\Program Files\\Microsoft Office\\Office16 输入命令查询破解软件的KEY(位) cscript ospp.vbs /dstatus 输入命令卸载KEY cscript ospp.vbs /unpkey:XXXXX","categories":[{"name":"软件","slug":"软件","permalink":"https://www.yaronzz.com/categories/%E8%BD%AF%E4%BB%B6/"}],"tags":[{"name":"office","slug":"office","permalink":"https://www.yaronzz.com/tags/office/"}]},{"title":"正则表达式语法","slug":"正则表达式","date":"2020-06-22T04:40:33.000Z","updated":"2022-05-11T08:07:07.211Z","comments":true,"path":"post/regular_expression/","link":"","permalink":"https://www.yaronzz.com/post/regular_expression/","excerpt":"正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个字符串串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。","text":"正则表达式(regular expression)描述了一种字符串匹配的模式（pattern），可以用来检查一个字符串串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合某个条件的子串等。 正则表达式常用的字符如下： char 描述 ( ) 标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 ( 和 )。 * 匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 *。 + 匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 +。 . 匹配除换行符 \\n 之外的任何单字符。要匹配 . ，请使用 . 。 [ 标记一个中括号表达式的开始。要匹配 [，请使用 [。 ? 匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 ?。 \\ 将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， ‘n’ 匹配字符 ‘n’。’\\n’ 匹配换行符。序列 ‘\\‘ 匹配 “&quot;，而 ‘(‘ 则匹配 “(“。 ^ 匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 ^。 { 标记限定符表达式的开始。要匹配 {，请使用 {。 | 指明两项之间的一个选择。要匹配 |，请使用 |。 匹配单个字符 Char Function . 匹配任意1个字符（除了\\n） [ ] 匹配[ ]中列举的字符 \\d 匹配数字，即0-9 \\D 匹配非数字，即不是数字 \\s 匹配空白，即 空格，tab键 \\S 匹配非空白 \\w 匹配单词字符，即a-z、A-Z、0-9、_ \\W 匹配非单词字符 示例: 123456789101112131415161718import reret = re.match(\".\",\"M\")print(ret.group()) #Mret = re.match(\"t.o\",\"too\")print(ret.group()) #tooret = re.match(\"[hH]ello\",\"hello Python\")print(ret.group()) # helloret = re.match(\"[0-9]Hello Python\",\"7Hello Python”)print(ret.group()) # 7Hello Pythonret = re.match(\"[0-3,5-9]Hello Python\",\"7Hello Python\")print(ret.group()) # 7Hello Pythonret = re.match(\"嫦娥\\d号\",\"嫦娥1号发射成功\")print(ret.group()) #嫦娥1号 匹配多个字符 Char Function * 匹配前一个字符出现0次或者无限次，即可有可无 + 匹配前一个字符出现1次或者无限次，即至少有1次 ? 匹配前一个字符出现1次或者0次，即要么有1次，要么没有 {m} 匹配前一个字符出现m次 {m,n} 匹配前一个字符出现从m到n次 示例: 123456789101112131415161718192021import reret = re.match(\"[A-Z][a-z]*\",\"M\")print(ret.group()) #Mret = re.match(\"[A-Z][a-z]*\",\"MnnM\")print(ret.group()) #Mnnret = re.match(\"[1-9]?[0-9]\",\"7\")print(ret.group()) #7ret = re.match(\"[1-9]?\\d\",\"33\")print(ret.group()) #33ret = re.match(\"[1-9]?\\d\",\"09\")print(ret.group()) #Noneret = re.match(\"[a-zA-Z0-9_]&#123;6&#125;\",\"12a3g45678\")print(ret.group()) #12a3g4ret = re.match(\"[a-zA-Z0-9_]&#123;8,20&#125;\",\"1ad12f23s34455ff66\")print(ret.group()) #1ad12f23s34455ff66 获取子串 String Function (.+?) 惰性匹配,从左到右匹配,并且至少有一个字符 (.+) 贪婪匹配,整个字符串是否匹配,并且至少有一个字符 (.*?) 惰性匹配,从左到右匹配 (.*) 贪婪匹配,整个字符串是否匹配 示例: 1234567891011121314151617181920import retxt = \"&lt;111222&gt;&lt;3334444&gt;\"ret = re.findall(r\"&lt;(.+?)&gt;\", txt)# 返回 111222 和 3334444txt = \"&lt;111222&gt;&lt;3334444&gt;\"ret = re.findall(r\"&lt;(.+)&gt;\", txt)# 返回 111222&gt;&lt;3334444txt = \"&lt;111222&gt;&lt;3334444&gt;\"ret = re.findall(r\"&lt;.+&gt;\", txt)# 返回 &lt;111222&gt;&lt;3334444&gt;txt = \"&lt;&gt;&lt;3334444&gt;&lt;555666&gt;\"ret = re.findall(r\"&lt;(.*?)&gt;\", txt)# 返回 \"\"和3334444和555666txt = \"&lt;&gt;&lt;3334444&gt;&lt;555666&gt;\"ret = re.findall(r\"&lt;(.+?)&gt;\", txt)# 返回 &gt;&lt;3334444和555666","categories":[{"name":"code","slug":"code","permalink":"https://www.yaronzz.com/categories/code/"}],"tags":[{"name":"正则表达式","slug":"正则表达式","permalink":"https://www.yaronzz.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"}]},{"title":"剪辑资源如何获取","slug":"[剪辑] 剪辑资源如何获取","date":"2020-06-21T15:12:03.000Z","updated":"2022-04-19T07:49:39.493Z","comments":true,"path":"post/video_clip_resources/","link":"","permalink":"https://www.yaronzz.com/post/video_clip_resources/","excerpt":"剪辑资源一般包括视频与音频，下面主要介绍视频的种子搜索，常用的下载工具与音频的解析工具等。","text":"剪辑资源一般包括视频与音频，下面主要介绍视频的种子搜索，常用的下载工具与音频的解析工具等。 视频资源获取种子搜索神器MagnetwmagnetW是基于magnetX的规则原理，将各个磁力站的搜索结果统一格式化的软件，也就是种子搜索神器。通过关键词搜索相关的资源，复制对应的资源链接，使用迅雷或者其他种子下载软件，即可下载。 软件开源免费，没有群组，目前代码只在Github上托管，作者提供了Windows、Mac、Linux三个平台的安装包。 1下载地址为：https:&#x2F;&#x2F;github.com&#x2F;xiandanin&#x2F;magnetW&#x2F;releases 豆瓣资源下载大师豆瓣资源下载大师是一个油猴(Tampermonkey)脚本，所以这里需要先安装油猴扩展，UP使用的是Firefox浏览器，主要是因为Firefox的扩展网页国内可以访问。 安装步骤如下： 安装Firefox 打开油猴扩展，进行安装 打开豆瓣资源下载大师，点击安装 测试，打开豆瓣电影《想哭的我戴上了猫的面具》，可以看见页面右侧出现了很多资源按钮，移动到下面电影资源下载，就可以看见很多资源网站，按钮没变黄橙色就表示网站有资源。 下载神器MotrixMotrix是一款全能的下载工具，支持下载 HTTP、FTP、BT、磁力链等资源。虽然还代替不了迅雷，但平时配合浏览器下载一些网站资源还是挺不错的，界面简洁无广告，开源免费。 作者提供了Windows、Mac、Linux三个平台的安装包。 1下载地址为：https:&#x2F;&#x2F;github.com&#x2F;agalwood&#x2F;Motrix&#x2F;releases 音乐资源获取UP主剪辑用到的BGM都是通过各大音乐APP下载下来的，比如用过的音乐APP就有下面的几种： QQ音乐 网易云 酷狗音乐 虾米音乐 Tidal 这里有个很大的问题，就是如果某首歌曲是VIP才能听的话，那下载下来的歌就是一个加密的文件，这就相当不开心了，所以这里给大家提供一个解决方法：Unlock Music 音乐解锁 Unlock-Music是一款WEB软件，使用浏览器就能对音乐进行解锁。目前软件支持的格式有： QQ音乐 (.qmc0/.qmc2/.qmc3/.qmcflac/.qmcogg/.tkm) Moo音乐格式 (.bkcmp3/.bkcflac) QQ音乐Tm格式 (.tm0/.tm2/.tm3/.tm6) QQ音乐新格式 (实验性支持) .mflac .mgg 网易云音乐格式 (.ncm) 虾米音乐格式 (.xm) (测试阶段) 酷我音乐格式 (.kwm) (测试阶段) 酷狗音乐格式 (.kgm) (Alpha测试) 只需要将程序下载下来，解压压缩包后，点击index.html文件，使用浏览器打开即可使用，下载地址为： 12蓝奏云网盘：https://yaronzz.lanzous.com/iJpFxdx240h原网站Github(legacy版本): https://github.com/ix64/unlock-music/releases","categories":[{"name":"剪辑","slug":"剪辑","permalink":"https://www.yaronzz.com/categories/%E5%89%AA%E8%BE%91/"}],"tags":[{"name":"music","slug":"music","permalink":"https://www.yaronzz.com/tags/music/"},{"name":"video","slug":"video","permalink":"https://www.yaronzz.com/tags/video/"},{"name":"download","slug":"download","permalink":"https://www.yaronzz.com/tags/download/"}]},{"title":"VS调试Linux程序环境配置","slug":"[环境] VS下Linux环境配置","date":"2020-06-21T11:01:17.000Z","updated":"2022-04-19T07:49:39.590Z","comments":true,"path":"post/vs_linux_debug/","link":"","permalink":"https://www.yaronzz.com/post/vs_linux_debug/","excerpt":"基础配置 Linux安装调试器 1sudo apt-get install openssh-server g++ gdb gdbserver","text":"基础配置 Linux安装调试器 1sudo apt-get install openssh-server g++ gdb gdbserver Windows环境配置 Linux C++调试组件安装 Linux头文件拷贝到Windows Linux的头文件目录为：/usr/include Windows的目录为：安装目录\\Common7\\IDE\\VC\\Linux\\include\\usr\\include 注：拷贝之前最好先备份一下windows的头文件目录 VS配置 增加Linux程序编译时的信息输出，以便更容易查看错误信息，打开路径”菜单-工具-选项-项目和解决方案-生成并运行”，更改MSBuild的两个选项改为普通 添加Linux的IP与端口，使用SSH连接，打开路径”菜单-工具-选项-Cross Platform” 测试工程 新建Linux工程 测试代码 12345678910111213141516#include &lt;cstdio&gt;#include &lt;cstdlib&gt;#include &lt;string.h&gt;#include &lt;pthread.h&gt;void* func(void* arg)&#123; printf(\"HELLO WORLD - VS LINUX!\"); return NULL;&#125;int main()&#123; pthread_t handle; pthread_create(&amp;handle, NULL, func,NULL); pthread_join(handle, NULL); return 0;&#125; 修改项目配置 路径：右键项目-属性-C/C++-所有选项 a. 检查linux是否支持C11，如果不支持的话，要改为C99之类 b. 附加选项增加多线程所需要的标识‘-lphread’ 路径：右键项目-属性-链接器-所有选项 a. 附加选项增加多线程所需要的标识‘-lphread’ 路径：右键项目-属性-常规 a. 远程生成根目录（默认生成地址为~/project，这里可以修改成自己的专属目录地址） 路径：右键项目-属性-调试 a. 调试模式（默认为gdbserver，需要看看自己的linux是否支持，如果不支持要改成gdb） 调试 路径：菜单-调试-linux console，可以查看printf输出的信息，linux上需要安装gdbserver才能看到输出的信息 链接库的配置 比如：工程需要链接静态库 /root/projects/xxxxxxxx.a","categories":[{"name":"settings","slug":"settings","permalink":"https://www.yaronzz.com/categories/settings/"}],"tags":[{"name":"linux","slug":"linux","permalink":"https://www.yaronzz.com/tags/linux/"},{"name":"vs","slug":"vs","permalink":"https://www.yaronzz.com/tags/vs/"}]},{"title":"Vscode-Lua环境安装","slug":"[环境] Vscode-Lua环境安装","date":"2020-06-21T11:01:17.000Z","updated":"2022-04-19T07:49:39.580Z","comments":true,"path":"post/vscode_lua/","link":"","permalink":"https://www.yaronzz.com/post/vscode_lua/","excerpt":"VSCODE安装下载安装 VSCODE：https://code.visualstudio.com/","text":"VSCODE安装下载安装 VSCODE：https://code.visualstudio.com/ 选择软件左侧插件扩展项，在输入框中输入要安装的插件即可。 汉化插件 Chinese (Simplified) Language Pack for Visual Studio Code 主题与图标 Atom One Dark Theme vscode-icons 代码自动对齐 Better Align 显示对齐线 Guides Lua插件 调试Luavscode的项目工程以文件夹为单位，打开文件夹即打开一个工程，lua的工作目录为此文件夹路径。 新建文件加 test 打开test目录，鼠标右键选择vscode打开目录 新建info.ls 1234info = &#123; age = 10, name = \"xiaoming\",&#125; 新建main.ls 12345require(\"info\")para = _G.infoprint(para.name)print(para.age) 点击软件右下角语言模式，将ls文件关联到lua 打开mian.ls，按F5即可调试，按F12可以跳转参数定义，将鼠标移动到参数上也可以显示参数信息","categories":[{"name":"settings","slug":"settings","permalink":"https://www.yaronzz.com/categories/settings/"}],"tags":[{"name":"vs","slug":"vs","permalink":"https://www.yaronzz.com/tags/vs/"},{"name":"lua","slug":"lua","permalink":"https://www.yaronzz.com/tags/lua/"}]},{"title":"Macos初始配置与使用","slug":"[系统] Macos初始配置","date":"2020-06-16T03:17:40.000Z","updated":"2022-06-07T02:25:12.058Z","comments":true,"path":"post/macos_build/","link":"","permalink":"https://www.yaronzz.com/post/macos_build/","excerpt":"主要介绍虚拟机配置、环境配置与软件安装。","text":"主要介绍虚拟机配置、环境配置与软件安装。 虚拟机配置 安装VMware 版本15.5 序列号： 12345UY758-0RXEQ-M81WP-8ZM7Z-Y3HDAVF750-4MX5Q-488DQ-9WZE9-ZY2D6UU54R-FVD91-488PP-7NNGC-ZFAX6YC74H-FGF92-081VZ-R5QNG-P6RY4YC34H-6WWDK-085MQ-JYPNX-NZRA2 安装VMware Unlocker工具（提取码dagu），才能使用Macos 下载完成后解压unlocker，将解压后的文件复制到Vmware的安装目录，使用管理员运行unlocker.exe和win-install.cmd。 安装Macos10.15 提取码 jlhr 安装VMwareTool 环境配置 修改Host文件，解决GitHub的raw.githubusercontent.com无法连接问题 打开终端输入sudo vi /etc/hosts,并复制黏贴以下内容，之后按ESC键，再输入:wq保存 1234567891011121314151617181920# GitHub Start52.74.223.119 github.com192.30.253.119 gist.github.com54.169.195.247 api.github.com185.199.111.153 assets-cdn.github.com151.101.76.133 raw.githubusercontent.com151.101.108.133 user-images.githubusercontent.com151.101.76.133 gist.githubusercontent.com151.101.76.133 cloud.githubusercontent.com151.101.76.133 camo.githubusercontent.com151.101.76.133 avatars0.githubusercontent.com151.101.76.133 avatars1.githubusercontent.com151.101.76.133 avatars2.githubusercontent.com151.101.76.133 avatars3.githubusercontent.com151.101.76.133 avatars4.githubusercontent.com151.101.76.133 avatars5.githubusercontent.com151.101.76.133 avatars6.githubusercontent.com151.101.76.133 avatars7.githubusercontent.com151.101.76.133 avatars8.githubusercontent.com# GitHub End 安装brew 打开终端，输入一下命令并按回车 1/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" 可能会出现卡住的情况，如下： 12==&gt; Tapping homebrew/coreCloning into '/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core'... 则直接按Ctrl+C退出，换源安装core，输入以下命令： 12cd /usr/local/Homebrew/Library/Taps/homebrewgit clone git://mirrors.ustc.edu.cn/homebrew-core.git/ /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core --depth=1 接下来修改为国内源，加速访问速度： 1234567cd /usr/local/homebrewgit remote set-url origin https://mirrors.ustc.edu.cn/brew.gitcd /usr/local/homebrew/Library/Taps/homebrew/homebrew-core\"git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.gitcd /usr/local/homebrew/Library/Taps/homebrew/homebrew-cask\"git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-cask.git/usr/local/homebrew/bin/brew update 如果要换回原来的源，则输入以下命令： 123456cd /usr/local/homebrewgit remote set-url origin https://github.com/homebrew/brew.gitcd /usr/local/homebrew/Library/Taps/homebrew/homebrew-coregit remote set-url origin https://github.com/homebrew/homebrew-core.gitcd /usr/local/homebrew/Library/Taps/homebrew/homebrew-caskgit remote set-url origin https://github.com/homebrew/homebrew-cask.git 软件安装 V2rayU 地址：https://github.com/yanue/V2rayU/releases 功能：支持二维码扫描、URL导入等功能，跟V2rayN差不多 谷歌浏览器 地址：https://www.google.com/intl/zh-CN/chrome/","categories":[{"name":"软件","slug":"软件","permalink":"https://www.yaronzz.com/categories/%E8%BD%AF%E4%BB%B6/"}],"tags":[{"name":"macos","slug":"macos","permalink":"https://www.yaronzz.com/tags/macos/"}]},{"title":"Charles抓包工具使用教程","slug":"[软件] Charles抓包工具","date":"2020-06-15T10:02:20.000Z","updated":"2022-06-07T02:25:12.061Z","comments":true,"path":"post/charles_use/","link":"","permalink":"https://www.yaronzz.com/post/charles_use/","excerpt":"Charles是一款抓包工具，能够在Windows，Mac，Linux上使用，个人觉得比Fiddler要好用得多。它可以提供代理服务，使手机或电脑软件通过它代理上网。 注：破解教程","text":"Charles是一款抓包工具，能够在Windows，Mac，Linux上使用，个人觉得比Fiddler要好用得多。它可以提供代理服务，使手机或电脑软件通过它代理上网。 注：破解教程 使用教程 安装电脑证书 选择菜单Help–&gt;SSL Proxying–&gt;Install Charles Root Certificate 安装手机证书 选择菜单Help–&gt;SSL Proxying–&gt;Install Charles Root Certificate on a Mobile Device or Remote Browser 手机与电脑连接同一个WIFI，进入WIFI设置，选择配置代理–手动，填写Charles提供的IP与端口 手机使用浏览器登录网址 chls.pro/ssl ,下载并安装证书 设置监听站点与数据 选择菜单Proxy–&gt;SSL Proxying Settings，勾选Enable SSL Proxying，在Location部份选择add，按如下图添加，抓取任意站点、443端口的数据。 设置代理 选择菜单Proxy–&gt;Proxying Settings，勾选HTTP和SOCKS，填写自己的代理端口，如下所示。如果不需要代理这一步骤可以跳过。 开始抓包 选择菜单Proxy，勾选Windows Proxy，如果需要代理则再勾选External Proxy Settings","categories":[{"name":"软件","slug":"软件","permalink":"https://www.yaronzz.com/categories/%E8%BD%AF%E4%BB%B6/"}],"tags":[{"name":"charles","slug":"charles","permalink":"https://www.yaronzz.com/tags/charles/"}]},{"title":"jsDelivr加速Github图床","slug":"[服务器] jsDelivr加速Github图床","date":"2020-03-29T03:16:03.000Z","updated":"2022-06-07T02:25:12.054Z","comments":true,"path":"post/jsdelivr_cdn_github/","link":"","permalink":"https://www.yaronzz.com/post/jsdelivr_cdn_github/","excerpt":"写博客经常会遇到的问题就是图片的存放，既要保证图片存放地址的稳定，也要保证图片访问的速度。在网上找了许多方法，其中最简单的就是直接使用专门的图床网站，比如sm.ms之类。但总感觉不是太好整理，另外以后要搬运或者版本更新也不是很方便，于是想到了以Github作为图床，再用jsDelivr来加速访问。","text":"写博客经常会遇到的问题就是图片的存放，既要保证图片存放地址的稳定，也要保证图片访问的速度。在网上找了许多方法，其中最简单的就是直接使用专门的图床网站，比如sm.ms之类。但总感觉不是太好整理，另外以后要搬运或者版本更新也不是很方便，于是想到了以Github作为图床，再用jsDelivr来加速访问。 jsDelivr加速访问jsDelivr是一家免费的公共的CDN服务器提供商，由于Github在国内的访问速度很慢，而且时不时断线，所以推荐使用jsDelivr作为CDN加速。只需要将文件的访问链接简单改一下即可，格式如下： 1https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;用户名&#x2F;仓库名@latest&#x2F;图片的路径&#x2F;图片名称.jpg Github图床GitHub是一个面向开源及私有软件项目的托管平台，也是目前世界最大的程序员集中地。除了用来当做程序的版本控制库之外，也可以储存其他的东西，Github图床主要也是图个稳定，只要不恶意刷流量影响也就不大。 1. 新建Github仓库 仓库名随意 权限选择公开 使用Readme.md初始化 2. 生成仓库的访问钥匙token 右上角点击头像，选择Settings 选择Developer settings/Personal access tokens 点击Generate new token，获取token并复制下来 Note名称随便填，repo需要打钩，其他不用管 3. 下载配置PicGo 选择相应的电脑版本下载: https://github.com/Molunerfinn/PicGo/releases 配置图床信息：1234仓库名：github用户名&#x2F;仓库门分支名：填master存储路径：仓库中的目录名自定义域名：https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;用户名&#x2F;仓库名@latest&#x2F; 下载图片上传软件PicGo，设置刚才新建的repo名称、token、分支名写master，存储地址填写本地图片存放目录。","categories":[{"name":"建站","slug":"建站","permalink":"https://www.yaronzz.com/categories/%E5%BB%BA%E7%AB%99/"}],"tags":[{"name":"jsdelivr","slug":"jsdelivr","permalink":"https://www.yaronzz.com/tags/jsdelivr/"},{"name":"github","slug":"github","permalink":"https://www.yaronzz.com/tags/github/"}]},{"title":"Tidal-Media-Downloader Installation Documentation","slug":"[Tidal] Tidal-Media-Downloader-Installation-Documentation","date":"2020-03-16T08:10:33.000Z","updated":"2022-06-07T02:25:12.047Z","comments":true,"path":"post/tidal_dl_installation/","link":"","permalink":"https://www.yaronzz.com/post/tidal_dl_installation/","excerpt":"Tidal-Media-Downloader is an application that lets you download videos、tracks、playlist、album and artist’s album from Tidal Website","text":"Tidal-Media-Downloader is an application that lets you download videos、tracks、playlist、album and artist’s album from Tidal Website Have two version： Tidal-dl: cli，support windows\\linux\\macos\\android Tidal-gui: gui，support windows 🎉Tidal-dl InstallSelect the installation steps according to the computer system Windows：tidal-dl.exe Linux: pip3 install tidal-dl --upgrade MacOs: 12345678brew instal ffmpegbrew install pythoncurl -O http:&#x2F;&#x2F;python-distribute.org&#x2F;distribute_setup.pypython distribute_setup.pycurl -O https:&#x2F;&#x2F;raw.github.com&#x2F;pypa&#x2F;pip&#x2F;master&#x2F;contrib&#x2F;get-pip.pypython get-pip.pypip3 install --upgrade tidal-dltidal-dl Android: a). Install termux：https://play.google.com/store/apps/details?id=com.termux b). Open permission：termux-setup-storage c). Install python和tidal-dl 1234567pkg install python clang libjpeg-turbo ffmpeg zlib -yapt updateapt upgradepkg updatepip3 install --upgrade pippip3 install --upgrade tidal-dltidal-dl Use Enter username and password. Type ‘2’ and enter，set config file Name Function Download path File save directory Audio quality Track quality Video quality Support 1080\\720\\480\\360\\240 Add hyphens ‘-‘ between number and title, like‘01-Yellow.m4a’ Convert mp4 to m4a Convert mp4 to m4a(Only track) Add year before or after the name of album directory Add explicit tag like‘01-Yellow-explicit.m4a’ Include singles download artist EP&amp;Single Save covers Cover-Files are saved in the album directory Artist name before track-title Add artist name before the track-file-name ID before album-folder like ‘[20495848] Wretched and Divine’ Audio quailty: Master &gt; HiFi &gt; High &gt; Normal Audio Quality Format Normal mp4 or m4a High mp4 or m4a HiFi mp4 or m4a or flac Master(BEST) flac Type track\\video\\album\\playlist\\artist url to download 🍕Tidal-guiBecause the gui more cumbersome to do, it is generally tidal-dl that adds new features first, and then gui follows up. Therefore it is recommended to use tidal-dl. Download Tidal-gui Open tidal-gui and set https-proxy and login Type track\\video\\album\\playlist\\artist url to download 💎Disclaimer Music is not free, need a HIFI account. Private use only. Any secondary development of this tool has nothing to do with me. You should not use this method to distribute or pirate music. It may be illegal to use this in your country, so be informed. ⚽Q&amp;A Does the tool require hi-fi account?Yes. Can’t download ‘Master’?Make sure the track or album you want to save has the “M” logo beside of it. Need gui for MacOs.Need some times to learn swift. Requested quality is not allowed in user’s subscription?You need a hi-fi account.","categories":[{"name":"软件","slug":"软件","permalink":"https://www.yaronzz.com/categories/%E8%BD%AF%E4%BB%B6/"}],"tags":[{"name":"tidal","slug":"tidal","permalink":"https://www.yaronzz.com/tags/tidal/"}]},{"title":"Tidal-Media-Downloader安装文档","slug":"[Tidal] Tidal-Media-Downloader安装文档","date":"2020-03-16T07:51:31.000Z","updated":"2022-06-07T02:25:12.048Z","comments":true,"path":"post/tidal_dl_installation_chn/","link":"","permalink":"https://www.yaronzz.com/post/tidal_dl_installation_chn/","excerpt":"Tidal-Media-Downloader是一个从Tidal音乐网站下载音频资源的工具，支持下载歌曲、专辑、歌单、歌手全部专辑和批量下载功能。","text":"Tidal-Media-Downloader是一个从Tidal音乐网站下载音频资源的工具，支持下载歌曲、专辑、歌单、歌手全部专辑和批量下载功能。 目前有两个版本： Tidal-dl: 命令行模式，支持windows\\linux\\macos\\android Tidal-gui: 界面模式，支持windows 🎉Tidal-dl 安装教程根据电脑系统选择下面各自安装过程： Windows下安装：tidal-dl.exe Linux下安装: pip3 install tidal-dl --upgrade MacOs下安装: 12345678brew instal ffmpegbrew install pythoncurl -O http://python-distribute.org/distribute_setup.pypython distribute_setup.pycurl -O https://raw.github.com/pypa/pip/master/contrib/get-pip.pypython get-pip.pypip3 install --upgrade tidal-dltidal-dl Android下安装: a). 安装termux：https://play.google.com/store/apps/details?id=com.termux b). 打开权限：termux-setup-storage c). 安装python和tidal-dl 1234567pkg install python clang libjpeg-turbo ffmpeg zlib -yapt updateapt upgradepkg updatepip3 install --upgrade pippip3 install --upgrade tidal-dltidal-dl 使用教程 输入账号密码登录 输入’2’回车，设置配置项 名称 功能 Download path 输出目录 Convert mp4 to m4a 是否将Mp4格式的音频文件转换为M4a格式 Add explicit tag 是否在下载的歌曲文件名后加上explicit脏话标志 Add hyphens 文件名的序号和歌名之间加扩折号，如‘01-Yellow.m4a’ Add user track number 文件名添加序号 Audio quality 下载的音乐质量 Video quality 下载的视频质量 Check exist 跳过已经下载的文件 Artist name before track-title 歌曲文件名前歌手名称 ID before album-folder 专辑文件夹名前加专辑ID Add year 下载的专辑目录前或后加上发布年号 Include singles 下载歌手专辑时，是否下载EP\\单曲 Save covers 是否保存封面文件 音频质量Audio quality的选择对应的文件格式如下： Master &gt; HiFi &gt; High &gt; Normal 音频质量 文件格式 Normal mp4或m4a High mp4或m4a HiFi flac或mp4或m4a Master flac 输入链接或者ID即可下载 🍕Tidal-gui因为界面做起来比较麻烦，所以一般都是tidal-dl先加新功能之后，gui再跟进。所有如果对界面需求不是很大的话，建议使用tidal-dl比较好。 下载tidal-gui文件 打开tidal-gui设置https代理(不需要的可以不用)并登陆 输入歌曲\\专辑\\视频\\歌手ID或URL即可下载 💎免责声明 音乐不是免费的，需要开通HIFI会员。 这是一个私人工具，请不要用于商业和恶意传播等用途。 任何对此工具的二次开发，产生的后果跟本人无关。 请不要用此工具分发和盗版音乐。 在你的国家和地区使用此工具可能是违法的行为，请知悉。 ⚽常见问题解答 下载时，我是否需要开通会员？答：当然 为什么我下载的不是Master音质？答：Tidal有些歌曲是没有到Master音质的，可以去网站上看看歌曲后面是否有M标志 为什么没有MacOs的界面工具？答：还不会Swift Requested quality is not allowed in user’s subscription?答：先检查自己是不是会员，另外有些歌曲在一些地区是限制下载的。","categories":[{"name":"软件","slug":"软件","permalink":"https://www.yaronzz.com/categories/%E8%BD%AF%E4%BB%B6/"}],"tags":[{"name":"tidal","slug":"tidal","permalink":"https://www.yaronzz.com/tags/tidal/"}]},{"title":"Windows值得推荐的软件","slug":"Windows软件资源","date":"2020-03-15T11:01:17.000Z","updated":"2022-06-08T02:15:06.785Z","comments":true,"path":"post/windows_software/","link":"","permalink":"https://www.yaronzz.com/post/windows_software/","excerpt":"装机必备软件包括系统、聊天与娱乐、日常工具、办公、设计与编辑、编程等。 开发软件常用资源可以在第三方平台搜索，比如:中科大","text":"装机必备软件包括系统、聊天与娱乐、日常工具、办公、设计与编辑、编程等。 开发软件常用资源可以在第三方平台搜索，比如:中科大 系统软件 功能 软件 链接 安全与清理 火绒安全 https://www.huorong.cn/ 输入法 搜狗 https://pinyin.sogou.com/ 截图 Snipaste https://www.snipaste.com/ 压缩 Bandizip https://www.bandisoft.com/bandizip/ 卸载 Geek https://geekuninstaller.com/download 搜索 Listary https://www.listary.com/ 复制黏贴 Ditto https://ditto-cp.sourceforge.io/ Win集成工具 PowerToys https://github.com/microsoft/PowerToys/releases 聊天与娱乐 功能 软件 链接 聊天 QQ https://im.qq.com/ 微信 https://weixin.qq.com/ Telegram https://telegram.org/ 音乐 网易云 https://music.163.com/#/download QQ音乐 https://y.qq.com/ 视频 Potplayer https://potplayer.en.softonic.com/windows 日常工具 功能 软件 链接 下载 迅雷 https://www.xunlei.com/ Motrix https://motrix.app/ 网盘 百度网盘 https://pan.baidu.com/ 阿里云盘 https://www.aliyundrive.com/ 浏览器 谷歌 https://www.google.cn/intl/zh-CN/chrome/ 火狐 http://www.firefox.com.cn/ 远程控制 向日葵 https://sunlogin.oray.com/ 上网 V2rayN https://github.com/2dust/v2rayN/releases/latest 办公 功能 软件 链接 UI设计 Lunacy https://icons8.cn/lunacy 文档 Typora https://www.typora.io/ WPS https://education.wps.cn/ 剪辑 PR2019 http://www.downza.cn/soft/282275.html 压缩视频 小丸子工具箱 https://pan.baidu.com/s/1zMv_4ltgEMSyt5tmwktADg 程序开发 功能 软件 链接 开发 VSCode https://code.visualstudio.com/ Visual Studio https://visualstudio.microsoft.com/zh-hans/ QT https://mirrors.ustc.edu.cn/qtproject/ 远程连接 WindTerm https://github.com/kingToolbox/WindTerm/releases XShell http://www.zdfans.com/search.asp?keyword=xshell 版本控制 svn https://tortoisesvn.net/ git https://tortoisegit.org/download/ 抓包 Charles https://www.charlesproxy.com/ API调试 Postman Postman 虚拟机 VMware15 https://download3.vmware.com/software/wkst/file/VMware-workstation-full-15.1.0-13591040.exe秘钥YG5H2-ANZ0H-M8ERY-TXZZZ-YKRV8UG5J2-0ME12-M89WY-NPWXX-WQH88UA5DR-2ZD4H-089FY-6YQ5T-YPRX6GA590-86Y05-4806Y-X4PEE-ZV8E0ZF582-0NW5N-H8D2P-0XZEE-Z22VAYA18K-0WY8P-H85DY-L4NZG-X7RAD 系统 win7专业版: ed2k://|file|cn_windows_7_professional_x64_dvd_x15-65791.iso|3341268992|3474800521D169FBF3F5E527CD835156|/ win7旗舰版: ed2k://|file|cn_windows_7_ultimate_x64_dvd_x15-66043.iso|3341268992|7DD7FA757CE6D2DB78B6901F81A6907A|/ win7旗舰版SP1: ed2k://|file|cn_windows_7_ultimate_with_sp1_x64_dvd_u_677408.iso|3420557312|B58548681854236C7939003B583A8078|/ win10零售版:ed2k://|file|cn_windows_10_consumer_editions_version_1909_updated_jan_2020_x64_dvd_47161f17.iso|5417457664|274FEBA5BF0C874C291674182FA9C851|/ win10商业版: ed2k://|file|cn_windows_10_business_editions_version_1909_updated_jan_2020_x64_dvd_b3e1f3a6.iso|5311711232|3527D2A9845FF4105F485CC364655B66|/","categories":[{"name":"软件","slug":"软件","permalink":"https://www.yaronzz.com/categories/%E8%BD%AF%E4%BB%B6/"}],"tags":[{"name":"windows","slug":"windows","permalink":"https://www.yaronzz.com/tags/windows/"}]},{"title":"HEXO建站","slug":"HEXO建站","date":"2020-03-11T02:47:20.000Z","updated":"2022-05-11T08:07:07.074Z","comments":true,"path":"post/hexo_build/","link":"","permalink":"https://www.yaronzz.com/post/hexo_build/","excerpt":"主要介绍如何搭建hexo和部署到github。","text":"主要介绍如何搭建hexo和部署到github。 环境安装 安装 node.js 安装 HEXO 1234npm config set registry http://registry.npm.taobao.org #设置国内镜像链接npm install hexo-cli -gnpm install hexo --savenpm install hexo-deployer-git --save 新建博客 新建博客文件夹，在目录下输入以下命令： 123hexo init #初始化博客hexo g #编译成静态网页hexo s #本地测试 新建文章 1hexo new \"测试文章\" 新建页面 12hexo new page tags #标签页hexo new page categories #归档页 打开生成的文件source/tags/index.md和source/categories/index.md，分别添加 type: &quot;tags&quot; 和 type: &quot;categories&quot;。 生成博客，并在本地部署 12hexo ghexo s 浏览器打开 127.0.0.1:4000 即可浏览博客 部署到Github 在github新建项目xxxx.github.io，其中xxxx为账号名，克隆项目到本地 配置ssh 生成秘钥：ssh-keygen -t rsa -C &quot;你的邮件地址&quot; 复制公钥文件内容，默认为id_rsa.pub 登录Github，点击头像 -&gt; Settings -&gt; SSH keys -&gt; Add SSH key 把公钥粘贴到key中，填好title并点击Add key 输入命令ssh -T git@github.com，选yes，等待片刻可看到成功提示 打开博客目录下的_config.yml，在文件中添加： 1234deploy: type: git repo: git@github.com:your_name/your_name.github.io.git branch: master 执行编译上传命令 hexo d -g，浏览器打开 xxxx.github.io 即可浏览博客 域名解析 添加一个CNAME记录，主机记录@，记录值xxx.github.io，其他默认 添加一个CNAME记录，主机记录www，记录值xxx.github.io，其他默认 github设置 打开项目’xxxx.github.io‘，选择settings页面 找到Custom domain，填写域名，不用加www Enforce HTTPS打钩 在博客根目录source下新建CNAME文件，填写域名","categories":[{"name":"建站","slug":"建站","permalink":"https://www.yaronzz.com/categories/%E5%BB%BA%E7%AB%99/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://www.yaronzz.com/tags/hexo/"},{"name":"教程","slug":"教程","permalink":"https://www.yaronzz.com/tags/%E6%95%99%E7%A8%8B/"}]}],"categories":[{"name":"design_patterns","slug":"design-patterns","permalink":"https://www.yaronzz.com/categories/design-patterns/"},{"name":"code","slug":"code","permalink":"https://www.yaronzz.com/categories/code/"},{"name":"建站","slug":"建站","permalink":"https://www.yaronzz.com/categories/%E5%BB%BA%E7%AB%99/"},{"name":"软件","slug":"软件","permalink":"https://www.yaronzz.com/categories/%E8%BD%AF%E4%BB%B6/"},{"name":"linux","slug":"linux","permalink":"https://www.yaronzz.com/categories/linux/"},{"name":"system","slug":"system","permalink":"https://www.yaronzz.com/categories/system/"},{"name":"学习","slug":"学习","permalink":"https://www.yaronzz.com/categories/%E5%AD%A6%E4%B9%A0/"},{"name":"剪辑","slug":"剪辑","permalink":"https://www.yaronzz.com/categories/%E5%89%AA%E8%BE%91/"},{"name":"settings","slug":"settings","permalink":"https://www.yaronzz.com/categories/settings/"}],"tags":[{"name":"cpp","slug":"cpp","permalink":"https://www.yaronzz.com/tags/cpp/"},{"name":"qt","slug":"qt","permalink":"https://www.yaronzz.com/tags/qt/"},{"name":"arm","slug":"arm","permalink":"https://www.yaronzz.com/tags/arm/"},{"name":"linux","slug":"linux","permalink":"https://www.yaronzz.com/tags/linux/"},{"name":"network","slug":"network","permalink":"https://www.yaronzz.com/tags/network/"},{"name":"github","slug":"github","permalink":"https://www.yaronzz.com/tags/github/"},{"name":"ss","slug":"ss","permalink":"https://www.yaronzz.com/tags/ss/"},{"name":"nfs","slug":"nfs","permalink":"https://www.yaronzz.com/tags/nfs/"},{"name":"gdb","slug":"gdb","permalink":"https://www.yaronzz.com/tags/gdb/"},{"name":"vnc","slug":"vnc","permalink":"https://www.yaronzz.com/tags/vnc/"},{"name":"udp","slug":"udp","permalink":"https://www.yaronzz.com/tags/udp/"},{"name":"windows","slug":"windows","permalink":"https://www.yaronzz.com/tags/windows/"},{"name":"python","slug":"python","permalink":"https://www.yaronzz.com/tags/python/"},{"name":"sqlite","slug":"sqlite","permalink":"https://www.yaronzz.com/tags/sqlite/"},{"name":"lambda","slug":"lambda","permalink":"https://www.yaronzz.com/tags/lambda/"},{"name":"shell","slug":"shell","permalink":"https://www.yaronzz.com/tags/shell/"},{"name":"qss","slug":"qss","permalink":"https://www.yaronzz.com/tags/qss/"},{"name":"cloudreve","slug":"cloudreve","permalink":"https://www.yaronzz.com/tags/cloudreve/"},{"name":"json","slug":"json","permalink":"https://www.yaronzz.com/tags/json/"},{"name":"ssl","slug":"ssl","permalink":"https://www.yaronzz.com/tags/ssl/"},{"name":"nginx","slug":"nginx","permalink":"https://www.yaronzz.com/tags/nginx/"},{"name":"onedrive","slug":"onedrive","permalink":"https://www.yaronzz.com/tags/onedrive/"},{"name":"rclone","slug":"rclone","permalink":"https://www.yaronzz.com/tags/rclone/"},{"name":"googledrive","slug":"googledrive","permalink":"https://www.yaronzz.com/tags/googledrive/"},{"name":"WPF","slug":"WPF","permalink":"https://www.yaronzz.com/tags/WPF/"},{"name":"C#","slug":"C","permalink":"https://www.yaronzz.com/tags/C/"},{"name":"tidal","slug":"tidal","permalink":"https://www.yaronzz.com/tags/tidal/"},{"name":"audio","slug":"audio","permalink":"https://www.yaronzz.com/tags/audio/"},{"name":"typora","slug":"typora","permalink":"https://www.yaronzz.com/tags/typora/"},{"name":"office","slug":"office","permalink":"https://www.yaronzz.com/tags/office/"},{"name":"正则表达式","slug":"正则表达式","permalink":"https://www.yaronzz.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"name":"music","slug":"music","permalink":"https://www.yaronzz.com/tags/music/"},{"name":"video","slug":"video","permalink":"https://www.yaronzz.com/tags/video/"},{"name":"download","slug":"download","permalink":"https://www.yaronzz.com/tags/download/"},{"name":"vs","slug":"vs","permalink":"https://www.yaronzz.com/tags/vs/"},{"name":"lua","slug":"lua","permalink":"https://www.yaronzz.com/tags/lua/"},{"name":"macos","slug":"macos","permalink":"https://www.yaronzz.com/tags/macos/"},{"name":"charles","slug":"charles","permalink":"https://www.yaronzz.com/tags/charles/"},{"name":"jsdelivr","slug":"jsdelivr","permalink":"https://www.yaronzz.com/tags/jsdelivr/"},{"name":"hexo","slug":"hexo","permalink":"https://www.yaronzz.com/tags/hexo/"},{"name":"教程","slug":"教程","permalink":"https://www.yaronzz.com/tags/%E6%95%99%E7%A8%8B/"}]}